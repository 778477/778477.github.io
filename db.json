{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/favicon/favicon.ico","path":"favicon/favicon.ico","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.css","path":"bootstrap/css/bootstrap-theme.css","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.min.css.map","path":"bootstrap/css/bootstrap-theme.min.css.map","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.min.css","path":"bootstrap/css/bootstrap-theme.min.css","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.css.map","path":"bootstrap/css/bootstrap-theme.css.map","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.min.css.map","path":"bootstrap/css/bootstrap.min.css.map","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.eot","path":"bootstrap/fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.woff","path":"bootstrap/fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.woff2","path":"bootstrap/fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.ttf","path":"bootstrap/fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/js/npm.js","path":"bootstrap/js/npm.js","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/js/bootstrap.min.js","path":"bootstrap/js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.min.css","path":"bootstrap/css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.svg","path":"bootstrap/fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/js/bootstrap.js","path":"bootstrap/js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.css","path":"bootstrap/css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.css.map","path":"bootstrap/css/bootstrap.css.map","modified":1,"renderable":1},{"_id":"themes/minos/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/minos/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/minos/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/minos/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/minos/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/minos/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/main.css","path":"webfonts/ptserif/main.css","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/source-code-pro/main.css","path":"webfonts/source-code-pro/main.css","modified":0,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","path":"webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","path":"webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","path":"webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","path":"webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","path":"webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","path":"webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","path":"webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","path":"webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","path":"webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/add-symbolic-breakpoint-menu.jpg","path":"img/add-symbolic-breakpoint-menu.jpg","modified":0,"renderable":0},{"_id":"source/img/close.png","path":"img/close.png","modified":0,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/FPSBar.gif","path":"img/FPSBar.gif","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/hdu-3839-accepted.png","path":"img/hdu-3839-accepted.png","modified":0,"renderable":0},{"_id":"source/img/hdu-4527-accepted.png","path":"img/hdu-4527-accepted.png","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/house_robber.png","path":"img/house_robber.png","modified":0,"renderable":0},{"_id":"source/img/hud-1409-accepted.png","path":"img/hud-1409-accepted.png","modified":0,"renderable":0},{"_id":"source/img/Minimum Size Subarray Sum.png","path":"img/Minimum Size Subarray Sum.png","modified":0,"renderable":0},{"_id":"source/img/Minimum Size Subarray Sum 2.png","path":"img/Minimum Size Subarray Sum 2.png","modified":0,"renderable":0},{"_id":"source/img/Minimum Size Subarray Sum 3.png","path":"img/Minimum Size Subarray Sum 3.png","modified":0,"renderable":0},{"_id":"source/img/Minimum Window Substring.png","path":"img/Minimum Window Substring.png","modified":0,"renderable":0},{"_id":"source/img/move-breakpoint-to-user.jpg","path":"img/move-breakpoint-to-user.jpg","modified":0,"renderable":0},{"_id":"source/img/open-bg.jpg","path":"img/open-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/Permutation Sequence.png","path":"img/Permutation Sequence.png","modified":0,"renderable":0},{"_id":"source/img/post-bg-android.jpg","path":"img/post-bg-android.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-theory.jpg","path":"img/post-bg-theory.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-unix.jpg","path":"img/post-bg-unix.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-web.jpg","path":"img/post-bg-web.jpg","modified":0,"renderable":0},{"_id":"source/img/Range Sum Query Accepted.png","path":"img/Range Sum Query Accepted.png","modified":0,"renderable":0},{"_id":"source/img/Regular Expression Matching.png","path":"img/Regular Expression Matching.png","modified":0,"renderable":0},{"_id":"source/img/reveal-app-chooser.jpg","path":"img/reveal-app-chooser.jpg","modified":0,"renderable":0},{"_id":"source/img/search.png","path":"img/search.png","modified":0,"renderable":0},{"_id":"source/img/setup-breakpoint-popup.jpg","path":"img/setup-breakpoint-popup.jpg","modified":0,"renderable":0},{"_id":"source/img/tags-bg.jpg","path":"img/tags-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/travis-ci.png","path":"img/travis-ci.png","modified":0,"renderable":0},{"_id":"source/img/travis-ci1.png","path":"img/travis-ci1.png","modified":0,"renderable":0},{"_id":"source/img/vaild-number-accepted.png","path":"img/vaild-number-accepted.png","modified":0,"renderable":0},{"_id":"source/img/Word_Search_II.png","path":"img/Word_Search_II.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1465172730000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1465172730000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1465172730000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1465172730000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1465172730000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1465172730000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1465172719000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1465172730000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1465172730000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1465172730000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1465172730000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1465172730000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1465172730000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1465172730000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1465172730000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1465172730000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1465172730000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465172730000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1465172730000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465172730000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1465172730000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1465172730000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1465172730000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1465172730000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1465172730000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1465172730000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1465172730000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465172730000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465172730000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1465172730000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1465172730000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1465172730000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1465172730000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1465172730000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1465172730000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1465172730000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1465172730000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1465172730000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465172730000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1465172730000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1465172730000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1465172730000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1465175013000},{"_id":"themes/clean-blog/README.md","hash":"c5c7b0fd01aa229304e7b00697517aaca51de577","modified":1465175013000},{"_id":"themes/clean-blog/_config.yml","hash":"7b5bc16557fece89d4c81842079dc25c9122d1e2","modified":1465175013000},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1465175013000},{"_id":"themes/clean-blog/.git/config","hash":"0037ed70f19e4933b19020ad514d8e9e049174f1","modified":1465175013000},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1465175004000},{"_id":"themes/clean-blog/.git/index","hash":"b5de0f0c26acbcf096c2cf8b8d61b776181e1fb2","modified":1465175013000},{"_id":"themes/clean-blog/.git/packed-refs","hash":"a43cdba3571014be88a98552bd2f66379a99f917","modified":1465175013000},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1465175013000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1465175013000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1465175013000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1465175013000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1465175013000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1465175013000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1465175013000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1465175013000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1465175013000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1465175013000},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"ad0da72df13ce3566985bb390c2c9a9352cf4f07","modified":1465175013000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"87995288ca6f95a04add641727aedd3f6afa55eb","modified":1465175013000},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"3a244ef80c58591dda5cfd3aae6654a74f9abdc7","modified":1465175013000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1465175013000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1465175013000},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1465175004000},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1465175004000},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1465175004000},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"9ce5df85e17ad2f90a45e68f650b00ef4748bc2f","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"43a517d1f23a3f42ee2f87b948cd1bd740e57934","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"8d63ce240bbcc850b5d438d1f45ad9441ac1c9cc","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"24907694c8c2bb999bc54737a27c914097207564","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"85474dc392ae8984311465fad3af2b30445a687b","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1465175013000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1465175013000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1465175013000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"5af12745f334ba579e9a053f85df4b40def0e8fb","modified":1465175013000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1465175013000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"ef69768108a5bade33b451bf169c5939ad6b1e32","modified":1465175013000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"a08560341906e9ddd927b697f2625a79b7e95396","modified":1465175013000},{"_id":"themes/clean-blog/source/favicon/favicon.ico","hash":"555a7975c77819173b8b6145c9be91c3a8861345","modified":1465175013000},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1465175013000},{"_id":"themes/clean-blog/source/js/jquery.min.js","hash":"ffe47a16e4b1550ddfba3577cc9cc9fdc8643aff","modified":1465175013000},{"_id":"themes/clean-blog/.git/objects/pack/pack-c8109df0bbdf3f012283ce7298928d530c274be8.idx","hash":"8d6b17b5350f7a90359f66404e27f1a947670353","modified":1465175013000},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"b7c9d49207502fe83a676767e5f5be66718511e5","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.css","hash":"6c3f0c97a5c7e1ef6453d6b64e875b5eb141d397","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.min.css.map","hash":"55253bf57e974dc89014e57783a1a4c737e7c867","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.min.css","hash":"bcb96e31a2b8fed5575995fa0c58293e64972116","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap-theme.css.map","hash":"29d019dd007929a57c564b2b85785e4e12e58db2","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.min.css.map","hash":"95fb9d7b83bebc9c37cefee87514f5979ee8785d","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/js/bootstrap.min.js","hash":"791aa054a026bddc0de92bad6cf7a1c6e73713d5","modified":1465175013000},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.min.css","hash":"8eb176c70b9cfa6871b76d6dc98fb526e7e9b3de","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/js/bootstrap.js","hash":"8cf4186ce86777b4b408ce308ca9f66dd421f509","modified":1465175013000},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"9ce5df85e17ad2f90a45e68f650b00ef4748bc2f","modified":1465175013000},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.css","hash":"4316dcfb54e1b0a428e1d37203a4028fd0408298","modified":1465175013000},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1465175013000},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"9ce5df85e17ad2f90a45e68f650b00ef4748bc2f","modified":1465175013000},{"_id":"themes/clean-blog/source/js/jquery.js","hash":"73eec826a9074dedb06c4cac5e044234dc508905","modified":1465175013000},{"_id":"themes/clean-blog/source/bootstrap/css/bootstrap.css.map","hash":"85cacfd84a6258ed0e193874efa31c87f86b9e87","modified":1465175013000},{"_id":"themes/clean-blog/.git/objects/pack/pack-c8109df0bbdf3f012283ce7298928d530c274be8.pack","hash":"944a19ae6b385a02b2d0eccf7fbfca6c93a64019","modified":1465175013000},{"_id":"themes/minos/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1465175364000},{"_id":"themes/minos/README.md","hash":"971b835999fd136807ec8505e778a9124b3a871d","modified":1465175364000},{"_id":"themes/minos/.gitignore","hash":"bbe994b5dffd47ea6ad0458525548d5650e043a7","modified":1465175364000},{"_id":"themes/minos/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1465175364000},{"_id":"themes/minos/_config.yml.example","hash":"ad310ea24abd37909faadbd83a8d6261dcd0e9b3","modified":1465175364000},{"_id":"themes/minos/package.json","hash":"6b4e8276c212f5a617dc558548f5b3d1ae0fb1f2","modified":1465175364000},{"_id":"themes/minos/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1465175364000},{"_id":"themes/minos/.git/config","hash":"86ce9cdb1395b8347f38abd45a74bbfee3334069","modified":1465175364000},{"_id":"themes/minos/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1465175351000},{"_id":"themes/minos/.git/index","hash":"71b95a4b03113e6db1e57647c32c5891ef9ba6de","modified":1465175364000},{"_id":"themes/minos/.git/packed-refs","hash":"1c4ce2bebab3a833a27f2dff064e605f4aae6ca3","modified":1465175364000},{"_id":"themes/minos/languages/en.yml","hash":"7bada5ca0cf685cb21ab64ba6ef2983314fe10c5","modified":1465175364000},{"_id":"themes/minos/languages/ru.yml","hash":"c0ac1d63913b0caea5494db14e458f7e5a0937c3","modified":1465175364000},{"_id":"themes/minos/languages/zh-CN.yml","hash":"c6daf6c25bdddcfa989ff0dd62559ed2ea5f790b","modified":1465175364000},{"_id":"themes/minos/layout/archive.ejs","hash":"4479c33517aa70f2714ee820775ff8307a0dd115","modified":1465175364000},{"_id":"themes/minos/layout/categories.ejs","hash":"c40b133eb9b8612a2286a83b8d7d2ca344673507","modified":1465175364000},{"_id":"themes/minos/layout/category.ejs","hash":"cd17981f9cac718731880148cb17de60d148a75c","modified":1465175364000},{"_id":"themes/minos/layout/layout.ejs","hash":"03c85682322dce721f6a90aa0f0b5d2ed6622a35","modified":1465175364000},{"_id":"themes/minos/layout/index.ejs","hash":"505555df272ac4dd23e5eae3acb857a457e421b4","modified":1465175364000},{"_id":"themes/minos/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465175364000},{"_id":"themes/minos/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465175364000},{"_id":"themes/minos/layout/tag.ejs","hash":"bcde8c7ce7e21683ca2cba7fcc21ac43c817a9a4","modified":1465175364000},{"_id":"themes/minos/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1465175364000},{"_id":"themes/minos/layout/tags.ejs","hash":"cf485e9053f96d69a1e0ce0f8a55c3aa33ebde03","modified":1465175364000},{"_id":"themes/minos/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1465175351000},{"_id":"themes/minos/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1465175351000},{"_id":"themes/minos/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1465175351000},{"_id":"themes/minos/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1465175351000},{"_id":"themes/minos/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1465175351000},{"_id":"themes/minos/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1465175351000},{"_id":"themes/minos/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1465175351000},{"_id":"themes/minos/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1465175351000},{"_id":"themes/minos/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1465175351000},{"_id":"themes/minos/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1465175351000},{"_id":"themes/minos/.git/logs/HEAD","hash":"bea80128a6b0268fb5060305160ccd00054b0d2b","modified":1465175364000},{"_id":"themes/minos/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1465175364000},{"_id":"themes/minos/layout/_partial/after-footer.ejs","hash":"59e91784ebde77f8d258dac6f21e29147ad36b4f","modified":1465175364000},{"_id":"themes/minos/layout/_partial/archive-post.ejs","hash":"9d687d6560e05764d3d57b2948680aa3940332cf","modified":1465175364000},{"_id":"themes/minos/layout/_partial/archive.ejs","hash":"fb0206d283ae56717eb92f92784271e79b2e208a","modified":1465175364000},{"_id":"themes/minos/layout/_partial/article.ejs","hash":"9bd6eda11854c189594fe02d4c18f96a81167c4d","modified":1465175364000},{"_id":"themes/minos/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1465175364000},{"_id":"themes/minos/layout/_partial/footer.ejs","hash":"9ff7842d55d8707317fbcd00b1b2fac206a21a1a","modified":1465175364000},{"_id":"themes/minos/layout/_partial/head.ejs","hash":"0bd191a43bc158d1b2b01e1f5001efe5175edbec","modified":1465175364000},{"_id":"themes/minos/layout/_partial/header.ejs","hash":"3431b84ac8057be6766ad2806dd418b71f5b9787","modified":1465175364000},{"_id":"themes/minos/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1465175364000},{"_id":"themes/minos/source/css/_extend.styl","hash":"d31b1c9980353af3c1607ee6caf84835b7322eea","modified":1465175364000},{"_id":"themes/minos/source/css/_variables.styl","hash":"5bb3cfe78ece808ee0b32078535bb3ce69d98065","modified":1465175364000},{"_id":"themes/minos/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465175364000},{"_id":"themes/minos/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465175364000},{"_id":"themes/minos/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465175364000},{"_id":"themes/minos/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465175364000},{"_id":"themes/minos/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465175364000},{"_id":"themes/minos/source/css/style.styl","hash":"6793062670c69b331e786cfb19d5473f82d7d51c","modified":1465175364000},{"_id":"themes/minos/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465175364000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1465175364000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1465175364000},{"_id":"themes/minos/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1465175364000},{"_id":"themes/minos/source/js/script.js","hash":"631cc4a69bc1f7903a24544b79b8e6ea68be9243","modified":1465175364000},{"_id":"themes/minos/.git/objects/pack/pack-e38235447eb2adca8d0f95d2be3967baf3c0a86c.idx","hash":"cc1b4e8b5ad5d5b9dcdec49db2dd5226b3ea4f12","modified":1465175364000},{"_id":"themes/minos/source/js/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1465175364000},{"_id":"themes/minos/.git/refs/heads/master","hash":"c8fd2fd976b28c2dd1154018ca1a63ea00c52f58","modified":1465175364000},{"_id":"themes/minos/layout/_partial/post/category.ejs","hash":"28600328d5d2d68b547b59e7ed713cd315a138d8","modified":1465175364000},{"_id":"themes/minos/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1465175364000},{"_id":"themes/minos/layout/_partial/post/nav.ejs","hash":"573863e2d6a9d637fff4a8e3b2a4cacb65565499","modified":1465175364000},{"_id":"themes/minos/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1465175364000},{"_id":"themes/minos/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1465175364000},{"_id":"themes/minos/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/archive.styl","hash":"f75e3da863fccfebafcae2e76ea6732a927b79f4","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/article.styl","hash":"42ffaa45f8ee22f34f0a560164298e07aa8c24b9","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/comment.styl","hash":"06fc75428036bd8277a6d3dea4b636a0dac91154","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/custom-layout.styl","hash":"8d922662464bda0ac0b639c40fda2ee196bef5b5","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/fancybox.styl","hash":"46a40e2749e68db0348db2938429fe4ce0f4724e","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/header.styl","hash":"c0efb35cee449e1721473ba535e635f8ac08b178","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/footer.styl","hash":"e4e9b6da90a2620f7905b7283e52322bb83d2fdb","modified":1465175364000},{"_id":"themes/minos/source/css/_partial/highlight.styl","hash":"3fb9265868e4cebeaffa155d8825e90311eb3744","modified":1465175364000},{"_id":"themes/minos/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1465175364000},{"_id":"themes/minos/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1465175364000},{"_id":"themes/minos/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1465175364000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1465175364000},{"_id":"themes/minos/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465175364000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1465175364000},{"_id":"themes/minos/source/css/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1465175364000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465175364000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1465175364000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1465175364000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465175364000},{"_id":"themes/minos/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/main.css","hash":"ec6a269189b9a8b807fb4e1de6ffd7acc6a7fea8","modified":1465175364000},{"_id":"themes/minos/source/webfonts/source-code-pro/main.css","hash":"e6a0204ff3c501d6248d96e55aa20d0b42b45a79","modified":1465175364000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1465175364000},{"_id":"themes/minos/.git/logs/refs/heads/master","hash":"bea80128a6b0268fb5060305160ccd00054b0d2b","modified":1465175364000},{"_id":"themes/minos/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","hash":"703369bb4159f050b38ecc4f52cfadb8e5760775","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","hash":"fa8cc541ddc3da23a5a90b08e64e4c12944c56a1","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","hash":"0c79a0581c3472e6bb29082092ea37d897370473","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","hash":"4da92f4f265caa786469ec415cfa6515d2997943","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","hash":"950d5547dc10d4a1bdb837439fcfc6c68bbe1b02","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b64d3a0d20efa14e6063070eb30fbdb594bde59c","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","hash":"36225cd511b12ed61f3e3fbad53773119e9dd73e","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5984003d117f49ae596bde0498310ed215ac3aba","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","hash":"6f1e434623e2fa20ba8972a6f97dd9c800b56168","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","hash":"0b4aef50c2979164681fa6dfe2c1d6bd6be6bcd3","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","hash":"df9999766ca9ffe9428b139931352cd821526aed","modified":1465175364000},{"_id":"themes/minos/source/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","hash":"3f425d6aee0c07774a10d82dcb742e32b067f217","modified":1465175364000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1465175364000},{"_id":"themes/minos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1465175364000},{"_id":"themes/minos/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1465175364000},{"_id":"themes/minos/.git/logs/refs/remotes/origin/HEAD","hash":"bea80128a6b0268fb5060305160ccd00054b0d2b","modified":1465175364000},{"_id":"themes/minos/.git/objects/pack/pack-e38235447eb2adca8d0f95d2be3967baf3c0a86c.pack","hash":"064292c1d8cc48829a9aa7d71c11a56e22ef31f5","modified":1465175364000},{"_id":"source/about/index.md","hash":"d131eb2e4e023168f91de27c2086b53e61c218fd","modified":1465178103000},{"_id":"themes/minos/_config.yml","hash":"634bd74135fe9236786d662e3e4bd55d30ecb7d7","modified":1465177037000},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1465176647000},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1465176711000},{"_id":"source/_posts/2015-08-29-hdu-3839.md","hash":"ddab2900a8b0f28200f241faa2b047241bdcca72","modified":1465177583000},{"_id":"source/_posts/2015-08-30-hdu-4527.md","hash":"99eff384f30e1016c109b3421959c041d1cb8f8b","modified":1443687521000},{"_id":"source/_posts/2015-09-04-ALAssetsLibrary.md","hash":"45ada4e6b4905e67389fb8d27e4c85b3b331b42d","modified":1441360503000},{"_id":"source/_posts/2015-09-04-iOS 杂技.md","hash":"864eb4e4ae5d3328d495bf09883f354c5cda1315","modified":1443691095000},{"_id":"source/_posts/2015-09-06-Permutation- Sequence.md","hash":"1247f82ec3a28a31fe3d08dae0f5280f68b618b3","modified":1443687502000},{"_id":"source/_posts/2015-10-01-Regular-Expression-Matching.md","hash":"76e9ba581649c36800c8d135b4af8bafb5a396fa","modified":1443687512000},{"_id":"source/_posts/2015-10-08-Different-iOS-SDK-Version-Compile.md","hash":"da70350ac29ed090f6eacb815fe3437624fd56e7","modified":1444308617000},{"_id":"source/_posts/2015-10-01-Make-Your-App-Searchable.md","hash":"8ac3a57b10c5739ad2d50bf0a591049ef8578495","modified":1443700312000},{"_id":"source/_posts/2015-10-20-Reveal.md","hash":"4bdce54532ada1b3ed07d9e4e6cff6f565902fee","modified":1445341598000},{"_id":"source/_posts/2015-10-23-Valid-Number.md","hash":"d74160c9ffd314188933b40ebe1299a628bd964b","modified":1445575111000},{"_id":"source/_posts/2015-11-24-为iOS建立 Travis CI.md","hash":"4e44098c70690dc391274236a661c7a7fee3c4c9","modified":1448594281000},{"_id":"source/_posts/2015-11-27-Minimum Window Substring.md","hash":"8b19371387f28f27099af78c013e751162269b44","modified":1448690907000},{"_id":"source/_posts/2015-12-16-Lighter View Controller.md","hash":"ac26fa6583b85889ec463e9007c6220c32f868aa","modified":1450271584000},{"_id":"source/_posts/2016-02-02-Range Sum Query - Mutable.md","hash":"e31bdc153221abc0077379666f57f648d6d928e7","modified":1454384017000},{"_id":"source/_posts/2016-02-29-Cocoa Launch at Login.md","hash":"85f98ea1cc8a99ce910a79c9cf1e1a08b5d39669","modified":1456730855000},{"_id":"source/_posts/2016-03-30-Cocoa Auto Update.md","hash":"37ffb48c2055a39aa0a7e2bddfe1f9756d3e5f11","modified":1459351700000},{"_id":"source/_posts/2016-04-25-House Robber.md","hash":"6910fdeadb47ed1738230ac68eba172bbcbd1eb5","modified":1464425783000},{"_id":"source/_posts/2016-04-08-Minimum Size Subarray Sum.md","hash":"6936e07fc1d78bafc78ead6ce1c4e3eff6ac109f","modified":1460120095000},{"_id":"source/_posts/2016-05-28-Word Search II.md","hash":"1592c71c47236e52f5c6c8d2f34d0a9158d9753d","modified":1464426166000},{"_id":"source/.DS_Store","hash":"1f0517795eabb7f2df621462a709d828b7325671","modified":1465219584000},{"_id":"source/img/Minimum Size Subarray Sum 2.png","hash":"19d814173b1d5693ddaae9a7c999450a4d5b2e13","modified":1460119061000},{"_id":"source/img/Minimum Size Subarray Sum.png","hash":"a82df974435ee84df438b7abb94c1a04847c6f46","modified":1460119052000},{"_id":"source/img/Minimum Size Subarray Sum 3.png","hash":"25153de2bc07166def443c41850cc57953426daa","modified":1460119068000},{"_id":"source/img/Minimum Window Substring.png","hash":"2f689df02f03e7c448eb0ae8345137a7255b587e","modified":1448594281000},{"_id":"source/img/Word_Search_II.png","hash":"3f64e0dbde6dac7b189ab0c53c82335e1477fe9f","modified":1464425186000},{"_id":"source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1440839095000},{"_id":"source/img/close.png","hash":"6c3d59f47b04b42c63f942f83d13aa5caa2ad35b","modified":1440839095000},{"_id":"source/img/favicon.ico","hash":"30f3d08efa9183a92b411dfaeda731bb3ecd177c","modified":1440839095000},{"_id":"source/img/hdu-3839-accepted.png","hash":"20c08fb8a74301243da3a4eb472c19fd67557962","modified":1440838839000},{"_id":"source/img/hdu-4527-accepted.png","hash":"202fa11e41c327f4d8e86586253e613a577925ab","modified":1440935382000},{"_id":"source/img/house_robber.png","hash":"6a447dc1776fe12a50011af4ae6425bcb8da7183","modified":1461585330000},{"_id":"source/img/hud-1409-accepted.png","hash":"e3aabf18ae252afe935382e875ea4597c87f40a7","modified":1445569829000},{"_id":"source/img/open-bg.jpg","hash":"4cde79c344ee76037a0e44ec5ceced6bbcb2045c","modified":1440839095000},{"_id":"source/img/search.png","hash":"af92a22456dbddecdcfa25d174a3a33c5ae30da6","modified":1440839095000},{"_id":"source/img/travis-ci.png","hash":"69e989cb0d74e529069c164f3b7f15f317d1b62e","modified":1448594281000},{"_id":"source/img/travis-ci1.png","hash":"331aa26923038074ff8fbad1ad2bc56f20fe861c","modified":1448594281000},{"_id":"source/img/vaild-number-accepted.png","hash":"899acd24cbd3b67ae933d2799a4a167001c71276","modified":1445572146000},{"_id":"source/img/post-bg-android.jpg","hash":"8e3825bba7d15875937c55836114ac902c69220a","modified":1440839095000},{"_id":"source/img/post-bg-unix.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1440839095000},{"_id":"source/img/reveal-app-chooser.jpg","hash":"502a46e8f37ba08288cae66fae187e44c005456b","modified":1445334289000},{"_id":"source/img/Permutation Sequence.png","hash":"124a62fd8f1e73f7a04e467acd8c1170f2200061","modified":1441554692000},{"_id":"source/img/Regular Expression Matching.png","hash":"4f086a0f5cc2f680e427c1139dfa53f364492a4a","modified":1443687239000},{"_id":"source/img/home-bg.jpg","hash":"c1940198940e09aed4f472f0098c1ab881b7e5ab","modified":1440839095000},{"_id":"source/img/post-bg-web.jpg","hash":"7137a717a20ce07bec9341f76fced2631df4182f","modified":1440839095000},{"_id":"source/img/tags-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1440839095000},{"_id":"source/img/Range Sum Query Accepted.png","hash":"b523cb841a56cfd21b736c0117d14de14ca5cfad","modified":1454341604000},{"_id":"source/img/post-bg-theory.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1440839095000},{"_id":"source/img/add-symbolic-breakpoint-menu.jpg","hash":"b444664c50b818c7411bbba1406d8f18ca2f9d44","modified":1445334289000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1440839095000},{"_id":"source/img/move-breakpoint-to-user.jpg","hash":"b602f9048d4d199653bc219b34c69169b71dfaab","modified":1445334289000},{"_id":"source/img/setup-breakpoint-popup.jpg","hash":"5cb14244a48a31a0c6aca58cede88840e8e95d90","modified":1445334289000},{"_id":"source/img/FPSBar.gif","hash":"1f17964a83885a52f9d11fa4dabe4d0b04d995ac","modified":1445334289000}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"about","_content":"## 获得的证书与奖项\n*  **2013 辽宁第六届大学生程序设计竞赛   一等奖**\n*  **2013 东北地区第七届大学生程序设计竞赛暨中俄大学生对抗赛 二等奖**\n*  2012 第三届\"蓝桥杯\"全国软件专业人才设计与创业大赛 辽宁赛区 本科组 一等奖\n*  **2012 第三届\"蓝桥杯\"全国软件专业人才设计与创业大赛 全国总决赛C/C++ 三等奖**\n*  2012 第八届\"博创 恩智浦\"杯全国大学生嵌入式物联网设计大赛东北赛区 二等奖\n\n## 项目经验\n* 2013 在**东软公司**和**德国戴姆勒公司**合作的车载导航项目中担任TI(Traffic Information)组长负责生成模拟交通信息，这项工作涉及到一些数学建模 和 QT平台编程。\n\n\n## 工作经历\n* 2013.7 - 2013.10 阿里巴巴集团浙江天猫技术有限公司 实习生\n* 2014 - 至今 阿里巴巴集团浙江天猫技术有限公司 无线开发工程师","source":"about/index.md","raw":"title: \"About\"\nlayout: \"about\"\n---\n## 获得的证书与奖项\n*  **2013 辽宁第六届大学生程序设计竞赛   一等奖**\n*  **2013 东北地区第七届大学生程序设计竞赛暨中俄大学生对抗赛 二等奖**\n*  2012 第三届\"蓝桥杯\"全国软件专业人才设计与创业大赛 辽宁赛区 本科组 一等奖\n*  **2012 第三届\"蓝桥杯\"全国软件专业人才设计与创业大赛 全国总决赛C/C++ 三等奖**\n*  2012 第八届\"博创 恩智浦\"杯全国大学生嵌入式物联网设计大赛东北赛区 二等奖\n\n## 项目经验\n* 2013 在**东软公司**和**德国戴姆勒公司**合作的车载导航项目中担任TI(Traffic Information)组长负责生成模拟交通信息，这项工作涉及到一些数学建模 和 QT平台编程。\n\n\n## 工作经历\n* 2013.7 - 2013.10 阿里巴巴集团浙江天猫技术有限公司 实习生\n* 2014 - 至今 阿里巴巴集团浙江天猫技术有限公司 无线开发工程师","date":"2016-06-06T01:55:03.000Z","updated":"2016-06-06T01:55:03.000Z","path":"about/index.html","_id":"cip3brj190000b1a3al4ydp36","comments":1,"content":"<h2 id=\"获得的证书与奖项\"><a href=\"#获得的证书与奖项\" class=\"headerlink\" title=\"获得的证书与奖项\"></a>获得的证书与奖项</h2><ul>\n<li><strong>2013 辽宁第六届大学生程序设计竞赛   一等奖</strong></li>\n<li><strong>2013 东北地区第七届大学生程序设计竞赛暨中俄大学生对抗赛 二等奖</strong></li>\n<li>2012 第三届”蓝桥杯”全国软件专业人才设计与创业大赛 辽宁赛区 本科组 一等奖</li>\n<li><strong>2012 第三届”蓝桥杯”全国软件专业人才设计与创业大赛 全国总决赛C/C++ 三等奖</strong></li>\n<li>2012 第八届”博创 恩智浦”杯全国大学生嵌入式物联网设计大赛东北赛区 二等奖</li>\n</ul>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><ul>\n<li>2013 在<strong>东软公司</strong>和<strong>德国戴姆勒公司</strong>合作的车载导航项目中担任TI(Traffic Information)组长负责生成模拟交通信息，这项工作涉及到一些数学建模 和 QT平台编程。</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><ul>\n<li>2013.7 - 2013.10 阿里巴巴集团浙江天猫技术有限公司 实习生</li>\n<li>2014 - 至今 阿里巴巴集团浙江天猫技术有限公司 无线开发工程师</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"获得的证书与奖项\"><a href=\"#获得的证书与奖项\" class=\"headerlink\" title=\"获得的证书与奖项\"></a>获得的证书与奖项</h2><ul>\n<li><strong>2013 辽宁第六届大学生程序设计竞赛   一等奖</strong></li>\n<li><strong>2013 东北地区第七届大学生程序设计竞赛暨中俄大学生对抗赛 二等奖</strong></li>\n<li>2012 第三届”蓝桥杯”全国软件专业人才设计与创业大赛 辽宁赛区 本科组 一等奖</li>\n<li><strong>2012 第三届”蓝桥杯”全国软件专业人才设计与创业大赛 全国总决赛C/C++ 三等奖</strong></li>\n<li>2012 第八届”博创 恩智浦”杯全国大学生嵌入式物联网设计大赛东北赛区 二等奖</li>\n</ul>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><ul>\n<li>2013 在<strong>东软公司</strong>和<strong>德国戴姆勒公司</strong>合作的车载导航项目中担任TI(Traffic Information)组长负责生成模拟交通信息，这项工作涉及到一些数学建模 和 QT平台编程。</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><ul>\n<li>2013.7 - 2013.10 阿里巴巴集团浙江天猫技术有限公司 实习生</li>\n<li>2014 - 至今 阿里巴巴集团浙江天猫技术有限公司 无线开发工程师</li>\n</ul>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2016-06-06T01:30:47.000Z","updated":"2016-06-06T01:30:47.000Z","path":"categories/index.html","_id":"cip3cch7p0000pia3i4solnwn","comments":1,"content":"","excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2016-06-06T01:31:51.000Z","updated":"2016-06-06T01:31:51.000Z","path":"tags/index.html","_id":"cip3cdusr0001pia3jxhssz4z","comments":1,"content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"ALAssetsLibrary","date":"2015-09-04T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n# ALAssetsLibrary\n一个资料库实例在与用户没有交互的情况下，能获取到相片和摄影资源\n\n* 在 iOS8及其以后，使用 Photos framework代替 Assets Libray framework。 Photos framework提供了更多的新功能和强大的性能。\n\n这个资料库包含了 来着iTunes或拍摄 的已保存相册。你可以使用资料库来检索所有资料分组 和 保存相片和影像到已经存在的相册中。\n\n## Accessing Assets\nauthorizationStatus 返回照片数据授权权限\n\n* ALAuthorizationStatusNotDetermined  未授权\n* ALAuthorizationStatusRestricted     访问受限\n* ALAuthorizationStatusDenied  拒绝访问\n* ALAuthorizationStatusAuthorized 授权访问\n\n## Managing Notifications\ndisableSharedPhotoStreamSupport 关闭分享照片流，无视分享照片流的更新通知消息\n\n## Finding Assets\nassetForURL:resultBlock:failureBlock: 使用一个文件的详细url(理解为访问路径)表示文件标示符来访问该文件\n\n* 注意该方法是异步的，当文件被访问时，会询问用户是否授权应用访问相册。 如果允许，resultBlock回调将执行。如果用户拒绝failureBlock回调将执行\n\n## Enumerating Assets\nenumerateGroupsWithTypes:usingBlock:failureBlock: 遍历资源分组下的所有资源\n\n* 注意该方法是异步的，关于遍历资源需要用户授权访问。特殊注意事项，如果访问失败原因为 **ALAssetsLibraryAccessGloballyDeniedError**是因为用户没有启用地理信息服务\n\n## Saving Assets\n- [ ] writeVideoAtPathToSavedPhotosAlbum:completionBlock:\n- [ ] videoAtPathIsCompatibleWithSavedPhotosAlbum:\n- [ ] writeImageToSavedPhotosAlbum:orientation:completionBlock:\n- [ ] writeImageDataToSavedPhotosAlbum:metadata:completionBlock:\n- [ ] writeImageToSavedPhotosAlbum:metadata:completionBlock:\n\n## Managing Asset Groups\n addAssetsGroupAlbumWithName:resultBlock:failureBlock: 新建资源分组到资源库中\n \n * name为新建资源组名字，**不可重名**。类型为ALAssetsGroupAlbum，可读写。同为异步方法，需要用户授权\n \ngroupForURL:resultBlock:failureBlock:使用资源分组url来访问该资源组\n \n * 同为异步方法\n\n## Constants\n具体的资源类型、回调定义，权限类型，通知信息，错误信息。请参见 ALAssetsLibrary Class Reference(iOS 8.3 Documentation)\n \n\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。\n","source":"_posts/2015-09-04-ALAssetsLibrary.md","raw":"---\nlayout: post\ntitle: 'ALAssetsLibrary'\ndate: '2015-09-04'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - iOS\n     \nauthor: '778477'\n---\n\n# ALAssetsLibrary\n一个资料库实例在与用户没有交互的情况下，能获取到相片和摄影资源\n\n* 在 iOS8及其以后，使用 Photos framework代替 Assets Libray framework。 Photos framework提供了更多的新功能和强大的性能。\n\n这个资料库包含了 来着iTunes或拍摄 的已保存相册。你可以使用资料库来检索所有资料分组 和 保存相片和影像到已经存在的相册中。\n\n## Accessing Assets\nauthorizationStatus 返回照片数据授权权限\n\n* ALAuthorizationStatusNotDetermined  未授权\n* ALAuthorizationStatusRestricted     访问受限\n* ALAuthorizationStatusDenied  拒绝访问\n* ALAuthorizationStatusAuthorized 授权访问\n\n## Managing Notifications\ndisableSharedPhotoStreamSupport 关闭分享照片流，无视分享照片流的更新通知消息\n\n## Finding Assets\nassetForURL:resultBlock:failureBlock: 使用一个文件的详细url(理解为访问路径)表示文件标示符来访问该文件\n\n* 注意该方法是异步的，当文件被访问时，会询问用户是否授权应用访问相册。 如果允许，resultBlock回调将执行。如果用户拒绝failureBlock回调将执行\n\n## Enumerating Assets\nenumerateGroupsWithTypes:usingBlock:failureBlock: 遍历资源分组下的所有资源\n\n* 注意该方法是异步的，关于遍历资源需要用户授权访问。特殊注意事项，如果访问失败原因为 **ALAssetsLibraryAccessGloballyDeniedError**是因为用户没有启用地理信息服务\n\n## Saving Assets\n- [ ] writeVideoAtPathToSavedPhotosAlbum:completionBlock:\n- [ ] videoAtPathIsCompatibleWithSavedPhotosAlbum:\n- [ ] writeImageToSavedPhotosAlbum:orientation:completionBlock:\n- [ ] writeImageDataToSavedPhotosAlbum:metadata:completionBlock:\n- [ ] writeImageToSavedPhotosAlbum:metadata:completionBlock:\n\n## Managing Asset Groups\n addAssetsGroupAlbumWithName:resultBlock:failureBlock: 新建资源分组到资源库中\n \n * name为新建资源组名字，**不可重名**。类型为ALAssetsGroupAlbum，可读写。同为异步方法，需要用户授权\n \ngroupForURL:resultBlock:failureBlock:使用资源分组url来访问该资源组\n \n * 同为异步方法\n\n## Constants\n具体的资源类型、回调定义，权限类型，通知信息，错误信息。请参见 ALAssetsLibrary Class Reference(iOS 8.3 Documentation)\n \n\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。\n","slug":"2015-09-04-ALAssetsLibrary","published":1,"updated":"2015-09-04T09:55:03.000Z","_id":"cip3cw76b0000y8a3v2bh7ong","comments":1,"photos":[],"link":"","content":"<h1 id=\"ALAssetsLibrary\"><a href=\"#ALAssetsLibrary\" class=\"headerlink\" title=\"ALAssetsLibrary\"></a>ALAssetsLibrary</h1><p>一个资料库实例在与用户没有交互的情况下，能获取到相片和摄影资源</p>\n<ul>\n<li>在 iOS8及其以后，使用 Photos framework代替 Assets Libray framework。 Photos framework提供了更多的新功能和强大的性能。</li>\n</ul>\n<p>这个资料库包含了 来着iTunes或拍摄 的已保存相册。你可以使用资料库来检索所有资料分组 和 保存相片和影像到已经存在的相册中。</p>\n<h2 id=\"Accessing-Assets\"><a href=\"#Accessing-Assets\" class=\"headerlink\" title=\"Accessing Assets\"></a>Accessing Assets</h2><p>authorizationStatus 返回照片数据授权权限</p>\n<ul>\n<li>ALAuthorizationStatusNotDetermined  未授权</li>\n<li>ALAuthorizationStatusRestricted     访问受限</li>\n<li>ALAuthorizationStatusDenied  拒绝访问</li>\n<li>ALAuthorizationStatusAuthorized 授权访问</li>\n</ul>\n<h2 id=\"Managing-Notifications\"><a href=\"#Managing-Notifications\" class=\"headerlink\" title=\"Managing Notifications\"></a>Managing Notifications</h2><p>disableSharedPhotoStreamSupport 关闭分享照片流，无视分享照片流的更新通知消息</p>\n<h2 id=\"Finding-Assets\"><a href=\"#Finding-Assets\" class=\"headerlink\" title=\"Finding Assets\"></a>Finding Assets</h2><p>assetForURL:resultBlock:failureBlock: 使用一个文件的详细url(理解为访问路径)表示文件标示符来访问该文件</p>\n<ul>\n<li>注意该方法是异步的，当文件被访问时，会询问用户是否授权应用访问相册。 如果允许，resultBlock回调将执行。如果用户拒绝failureBlock回调将执行</li>\n</ul>\n<h2 id=\"Enumerating-Assets\"><a href=\"#Enumerating-Assets\" class=\"headerlink\" title=\"Enumerating Assets\"></a>Enumerating Assets</h2><p>enumerateGroupsWithTypes:usingBlock:failureBlock: 遍历资源分组下的所有资源</p>\n<ul>\n<li>注意该方法是异步的，关于遍历资源需要用户授权访问。特殊注意事项，如果访问失败原因为 <strong>ALAssetsLibraryAccessGloballyDeniedError</strong>是因为用户没有启用地理信息服务</li>\n</ul>\n<h2 id=\"Saving-Assets\"><a href=\"#Saving-Assets\" class=\"headerlink\" title=\"Saving Assets\"></a>Saving Assets</h2><ul>\n<li>[ ] writeVideoAtPathToSavedPhotosAlbum:completionBlock:</li>\n<li>[ ] videoAtPathIsCompatibleWithSavedPhotosAlbum:</li>\n<li>[ ] writeImageToSavedPhotosAlbum:orientation:completionBlock:</li>\n<li>[ ] writeImageDataToSavedPhotosAlbum:metadata:completionBlock:</li>\n<li>[ ] writeImageToSavedPhotosAlbum:metadata:completionBlock:</li>\n</ul>\n<h2 id=\"Managing-Asset-Groups\"><a href=\"#Managing-Asset-Groups\" class=\"headerlink\" title=\"Managing Asset Groups\"></a>Managing Asset Groups</h2><p> addAssetsGroupAlbumWithName:resultBlock:failureBlock: 新建资源分组到资源库中</p>\n<ul>\n<li>name为新建资源组名字，<strong>不可重名</strong>。类型为ALAssetsGroupAlbum，可读写。同为异步方法，需要用户授权</li>\n</ul>\n<p>groupForURL:resultBlock:failureBlock:使用资源分组url来访问该资源组</p>\n<ul>\n<li>同为异步方法</li>\n</ul>\n<h2 id=\"Constants\"><a href=\"#Constants\" class=\"headerlink\" title=\"Constants\"></a>Constants</h2><p>具体的资源类型、回调定义，权限类型，通知信息，错误信息。请参见 ALAssetsLibrary Class Reference(iOS 8.3 Documentation)</p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"ALAssetsLibrary\"><a href=\"#ALAssetsLibrary\" class=\"headerlink\" title=\"ALAssetsLibrary\"></a>ALAssetsLibrary</h1><p>一个资料库实例在与用户没有交互的情况下，能获取到相片和摄影资源</p>\n<ul>\n<li>在 iOS8及其以后，使用 Photos framework代替 Assets Libray framework。 Photos framework提供了更多的新功能和强大的性能。</li>\n</ul>\n<p>这个资料库包含了 来着iTunes或拍摄 的已保存相册。你可以使用资料库来检索所有资料分组 和 保存相片和影像到已经存在的相册中。</p>\n<h2 id=\"Accessing-Assets\"><a href=\"#Accessing-Assets\" class=\"headerlink\" title=\"Accessing Assets\"></a>Accessing Assets</h2><p>authorizationStatus 返回照片数据授权权限</p>\n<ul>\n<li>ALAuthorizationStatusNotDetermined  未授权</li>\n<li>ALAuthorizationStatusRestricted     访问受限</li>\n<li>ALAuthorizationStatusDenied  拒绝访问</li>\n<li>ALAuthorizationStatusAuthorized 授权访问</li>\n</ul>\n<h2 id=\"Managing-Notifications\"><a href=\"#Managing-Notifications\" class=\"headerlink\" title=\"Managing Notifications\"></a>Managing Notifications</h2><p>disableSharedPhotoStreamSupport 关闭分享照片流，无视分享照片流的更新通知消息</p>\n<h2 id=\"Finding-Assets\"><a href=\"#Finding-Assets\" class=\"headerlink\" title=\"Finding Assets\"></a>Finding Assets</h2><p>assetForURL:resultBlock:failureBlock: 使用一个文件的详细url(理解为访问路径)表示文件标示符来访问该文件</p>\n<ul>\n<li>注意该方法是异步的，当文件被访问时，会询问用户是否授权应用访问相册。 如果允许，resultBlock回调将执行。如果用户拒绝failureBlock回调将执行</li>\n</ul>\n<h2 id=\"Enumerating-Assets\"><a href=\"#Enumerating-Assets\" class=\"headerlink\" title=\"Enumerating Assets\"></a>Enumerating Assets</h2><p>enumerateGroupsWithTypes:usingBlock:failureBlock: 遍历资源分组下的所有资源</p>\n<ul>\n<li>注意该方法是异步的，关于遍历资源需要用户授权访问。特殊注意事项，如果访问失败原因为 <strong>ALAssetsLibraryAccessGloballyDeniedError</strong>是因为用户没有启用地理信息服务</li>\n</ul>\n<h2 id=\"Saving-Assets\"><a href=\"#Saving-Assets\" class=\"headerlink\" title=\"Saving Assets\"></a>Saving Assets</h2><ul>\n<li>[ ] writeVideoAtPathToSavedPhotosAlbum:completionBlock:</li>\n<li>[ ] videoAtPathIsCompatibleWithSavedPhotosAlbum:</li>\n<li>[ ] writeImageToSavedPhotosAlbum:orientation:completionBlock:</li>\n<li>[ ] writeImageDataToSavedPhotosAlbum:metadata:completionBlock:</li>\n<li>[ ] writeImageToSavedPhotosAlbum:metadata:completionBlock:</li>\n</ul>\n<h2 id=\"Managing-Asset-Groups\"><a href=\"#Managing-Asset-Groups\" class=\"headerlink\" title=\"Managing Asset Groups\"></a>Managing Asset Groups</h2><p> addAssetsGroupAlbumWithName:resultBlock:failureBlock: 新建资源分组到资源库中</p>\n<ul>\n<li>name为新建资源组名字，<strong>不可重名</strong>。类型为ALAssetsGroupAlbum，可读写。同为异步方法，需要用户授权</li>\n</ul>\n<p>groupForURL:resultBlock:failureBlock:使用资源分组url来访问该资源组</p>\n<ul>\n<li>同为异步方法</li>\n</ul>\n<h2 id=\"Constants\"><a href=\"#Constants\" class=\"headerlink\" title=\"Constants\"></a>Constants</h2><p>具体的资源类型、回调定义，权限类型，通知信息，错误信息。请参见 ALAssetsLibrary Class Reference(iOS 8.3 Documentation)</p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n"},{"layout":"post","title":"hdu 3839","date":"2015-08-29T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\n[Ancient Messages](http://acm.hdu.edu.cn/showproblem.php?pid=3839)\n\n\n题目大意：给出以下6种象形文字，编程识别出来。\n![figureC1](http://acm.hdu.edu.cn/data/images/3839-1.jpg)\n\n输入：有多组测试样例，每组测试样例使用0（白色像素） 和 1（黑色像素）来描述一张图片。出于**节约空间**的目的，使用1位16进制数 表示 4位二进制数。图片最大size为（50* 200）。二进制解码之后实际大小为（200* 200）\n\n给出的测试样例符合以下条件：\n\n * 图片中只会出现 这6种象形文字\n * 图片中至少有一个象形文字存在\n * 每一个黑色像素都是一个象形文字的一部分（可以理解为文字笔画是标准的）\n * 黑色像素是拼接成了文字笔画\n * 文字之间不会有重叠 和 接触\n * 两颗黑色像素如果是对角接触，也可以认为这两个像素是同一个文字的一部分。(这个条件我貌似没在意，遍历只在乎 上左下右 四个方向)\n * 文字可能会比较潦草，但还是6个象形文字的符号结构\n\n输出： **字母顺序** 输出图片中的所有象形文字\n\n思考：题目乍一看毫无头绪，但是观察这6种符号，就能发现一个明显的特征，每一种符号都有各自的“封闭区域”。\n\nAnKh有1个“封闭区域”，Wedjat有3个“封闭区域”，Djed有5个“封闭区域”，Scarab有4个“封闭区域”，Was有0个“封闭区域”，Akeht有2个“封闭区域”。\n\n我们可以对不同的“封闭区域”进行染色标记，再沿着黑色像素遍历，看能接触到多少种不同颜色的“封闭区域”。 如果有1种的话，那么所遍历的黑色像素 描绘的就是 Was符号了，以此类推\n\n\n```\n//\n//  main.cpp\n//  hdu 3839\n//\n//  Created by miaoyou.gmy on 15/8/29.\n//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.\n//\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\nconst int H = 205;\nconst int W = 205;\nint maze[H][W],h,w,colorCount;\nbool colorVis[H],vis[H][W];\nconst int dir[4][2] = { {0,1},{1,0},{-1,0},{0,-1} };\nconst char hieroglyphMap[] = {'W','A','K','J','S','D'};\n\nbool judge(const int x, const int y){\n    return (x>-1&&x<h&&y>-1&&y<w&&!vis[x][y]);\n}\n\nvoid dfs(int x,int y,int color){\n    maze[x][y] = color;\n    for(int i = 0; i < 4; i++){\n        int xx = x+dir[i][0];\n        int yy = y+dir[i][1];\n        if(judge(xx,yy) && !maze[xx][yy]){\n            vis[xx][yy] = true;\n            dfs(xx,yy,color);\n        }\n    }\n}\n\nvoid countDiffentColor(int x,int y){\n    for(int i = 0; i < 4; i++){\n        int xx = x + dir[i][0];\n        int yy = y + dir[i][1];\n        if(judge(xx, yy)){\n            if(maze[xx][yy] != 1){\n                if(!colorVis[maze[xx][yy]]) colorCount++;\n                colorVis[maze[xx][yy]] = true;\n            }\n            else{\n                vis[xx][yy] = true;\n                countDiffentColor(xx, yy);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, const char * argv[]) {\n    int caseNumber = 1;\n    while(~scanf(\"%d%d\",&h,&w)){\n        if(0 == h && 0 == w) break;\n        memset(maze, 0, sizeof(int) * H * W);\n        char strs[51];\n        for(int i = 0; i < h; i++){\n            scanf(\"%s\",strs);\n            for(int j = 0; j < w; j++){\n                int tmp = 0;\n                if(strs[j]>='0' && strs[j]<='9') tmp = strs[j] - '0';\n                else tmp = 10+strs[j]-'a';\n                \n                for(int k = 0; k < 4 ; k++){\n                    maze[i+1][4*j+k+1] = ((tmp>>(3-k))&1);\n                }\n            }\n        }\n        \n        h+=2, w*=4,w+=2;\n        int color = 2;\n        memset(vis, false, sizeof(bool) * H * W);\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(!maze[i][j]){\n                    dfs(i,j,color);\n                    color++;\n                }\n            }\n        }\n        vector<char> ans;\n        memset(vis, false, sizeof(bool) * H * W);\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(maze[i][j] == 1 && !vis[i][j]){\n                    colorCount = 0;\n                    memset(colorVis, false, sizeof(bool) * H);\n                    countDiffentColor(i,j);\n                    ans.push_back(hieroglyphMap[colorCount - 1]);\n                }\n            }\n        }\n        sort(ans.begin(), ans.end());\n        string str(ans.begin(),ans.end());\n        cout<<\"Case \"<<caseNumber++<<\": \"<<str<<endl;\n    }\n    return 0;\n}\n\n```\n\n![hdu-3839-accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-3839-accepted.png)\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。\n","source":"_posts/2015-08-29-hdu-3839.md","raw":"---\nlayout: post\ntitle: 'hdu 3839'\ndate: '2015-08-29'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - ACM\n     \nauthor: '778477'\n---\n\n\n[Ancient Messages](http://acm.hdu.edu.cn/showproblem.php?pid=3839)\n\n\n题目大意：给出以下6种象形文字，编程识别出来。\n![figureC1](http://acm.hdu.edu.cn/data/images/3839-1.jpg)\n\n输入：有多组测试样例，每组测试样例使用0（白色像素） 和 1（黑色像素）来描述一张图片。出于**节约空间**的目的，使用1位16进制数 表示 4位二进制数。图片最大size为（50* 200）。二进制解码之后实际大小为（200* 200）\n\n给出的测试样例符合以下条件：\n\n * 图片中只会出现 这6种象形文字\n * 图片中至少有一个象形文字存在\n * 每一个黑色像素都是一个象形文字的一部分（可以理解为文字笔画是标准的）\n * 黑色像素是拼接成了文字笔画\n * 文字之间不会有重叠 和 接触\n * 两颗黑色像素如果是对角接触，也可以认为这两个像素是同一个文字的一部分。(这个条件我貌似没在意，遍历只在乎 上左下右 四个方向)\n * 文字可能会比较潦草，但还是6个象形文字的符号结构\n\n输出： **字母顺序** 输出图片中的所有象形文字\n\n思考：题目乍一看毫无头绪，但是观察这6种符号，就能发现一个明显的特征，每一种符号都有各自的“封闭区域”。\n\nAnKh有1个“封闭区域”，Wedjat有3个“封闭区域”，Djed有5个“封闭区域”，Scarab有4个“封闭区域”，Was有0个“封闭区域”，Akeht有2个“封闭区域”。\n\n我们可以对不同的“封闭区域”进行染色标记，再沿着黑色像素遍历，看能接触到多少种不同颜色的“封闭区域”。 如果有1种的话，那么所遍历的黑色像素 描绘的就是 Was符号了，以此类推\n\n\n```\n//\n//  main.cpp\n//  hdu 3839\n//\n//  Created by miaoyou.gmy on 15/8/29.\n//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.\n//\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\nconst int H = 205;\nconst int W = 205;\nint maze[H][W],h,w,colorCount;\nbool colorVis[H],vis[H][W];\nconst int dir[4][2] = { {0,1},{1,0},{-1,0},{0,-1} };\nconst char hieroglyphMap[] = {'W','A','K','J','S','D'};\n\nbool judge(const int x, const int y){\n    return (x>-1&&x<h&&y>-1&&y<w&&!vis[x][y]);\n}\n\nvoid dfs(int x,int y,int color){\n    maze[x][y] = color;\n    for(int i = 0; i < 4; i++){\n        int xx = x+dir[i][0];\n        int yy = y+dir[i][1];\n        if(judge(xx,yy) && !maze[xx][yy]){\n            vis[xx][yy] = true;\n            dfs(xx,yy,color);\n        }\n    }\n}\n\nvoid countDiffentColor(int x,int y){\n    for(int i = 0; i < 4; i++){\n        int xx = x + dir[i][0];\n        int yy = y + dir[i][1];\n        if(judge(xx, yy)){\n            if(maze[xx][yy] != 1){\n                if(!colorVis[maze[xx][yy]]) colorCount++;\n                colorVis[maze[xx][yy]] = true;\n            }\n            else{\n                vis[xx][yy] = true;\n                countDiffentColor(xx, yy);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, const char * argv[]) {\n    int caseNumber = 1;\n    while(~scanf(\"%d%d\",&h,&w)){\n        if(0 == h && 0 == w) break;\n        memset(maze, 0, sizeof(int) * H * W);\n        char strs[51];\n        for(int i = 0; i < h; i++){\n            scanf(\"%s\",strs);\n            for(int j = 0; j < w; j++){\n                int tmp = 0;\n                if(strs[j]>='0' && strs[j]<='9') tmp = strs[j] - '0';\n                else tmp = 10+strs[j]-'a';\n                \n                for(int k = 0; k < 4 ; k++){\n                    maze[i+1][4*j+k+1] = ((tmp>>(3-k))&1);\n                }\n            }\n        }\n        \n        h+=2, w*=4,w+=2;\n        int color = 2;\n        memset(vis, false, sizeof(bool) * H * W);\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(!maze[i][j]){\n                    dfs(i,j,color);\n                    color++;\n                }\n            }\n        }\n        vector<char> ans;\n        memset(vis, false, sizeof(bool) * H * W);\n        for(int i = 0; i < h; i++){\n            for(int j = 0; j < w; j++){\n                if(maze[i][j] == 1 && !vis[i][j]){\n                    colorCount = 0;\n                    memset(colorVis, false, sizeof(bool) * H);\n                    countDiffentColor(i,j);\n                    ans.push_back(hieroglyphMap[colorCount - 1]);\n                }\n            }\n        }\n        sort(ans.begin(), ans.end());\n        string str(ans.begin(),ans.end());\n        cout<<\"Case \"<<caseNumber++<<\": \"<<str<<endl;\n    }\n    return 0;\n}\n\n```\n\n![hdu-3839-accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-3839-accepted.png)\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。\n","slug":"2015-08-29-hdu-3839","published":1,"updated":"2016-06-06T01:46:23.000Z","_id":"cip3cw76d0001y8a3u1qdwh4j","comments":1,"photos":[],"link":"","content":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=3839\" target=\"_blank\" rel=\"external\">Ancient Messages</a></p>\n<p>题目大意：给出以下6种象形文字，编程识别出来。<br><img src=\"http://acm.hdu.edu.cn/data/images/3839-1.jpg\" alt=\"figureC1\"></p>\n<p>输入：有多组测试样例，每组测试样例使用0（白色像素） 和 1（黑色像素）来描述一张图片。出于<strong>节约空间</strong>的目的，使用1位16进制数 表示 4位二进制数。图片最大size为（50<em> 200）。二进制解码之后实际大小为（200</em> 200）</p>\n<p>给出的测试样例符合以下条件：</p>\n<ul>\n<li>图片中只会出现 这6种象形文字</li>\n<li>图片中至少有一个象形文字存在</li>\n<li>每一个黑色像素都是一个象形文字的一部分（可以理解为文字笔画是标准的）</li>\n<li>黑色像素是拼接成了文字笔画</li>\n<li>文字之间不会有重叠 和 接触</li>\n<li>两颗黑色像素如果是对角接触，也可以认为这两个像素是同一个文字的一部分。(这个条件我貌似没在意，遍历只在乎 上左下右 四个方向)</li>\n<li>文字可能会比较潦草，但还是6个象形文字的符号结构</li>\n</ul>\n<p>输出： <strong>字母顺序</strong> 输出图片中的所有象形文字</p>\n<p>思考：题目乍一看毫无头绪，但是观察这6种符号，就能发现一个明显的特征，每一种符号都有各自的“封闭区域”。</p>\n<p>AnKh有1个“封闭区域”，Wedjat有3个“封闭区域”，Djed有5个“封闭区域”，Scarab有4个“封闭区域”，Was有0个“封闭区域”，Akeht有2个“封闭区域”。</p>\n<p>我们可以对不同的“封闭区域”进行染色标记，再沿着黑色像素遍历，看能接触到多少种不同颜色的“封闭区域”。 如果有1种的话，那么所遍历的黑色像素 描绘的就是 Was符号了，以此类推</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  main.cpp</span><br><span class=\"line\">//  hdu 3839</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by miaoyou.gmy on 15/8/29.</span><br><span class=\"line\">//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int H = 205;</span><br><span class=\"line\">const int W = 205;</span><br><span class=\"line\">int maze[H][W],h,w,colorCount;</span><br><span class=\"line\">bool colorVis[H],vis[H][W];</span><br><span class=\"line\">const int dir[4][2] = &#123; &#123;0,1&#125;,&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,-1&#125; &#125;;</span><br><span class=\"line\">const char hieroglyphMap[] = &#123;&apos;W&apos;,&apos;A&apos;,&apos;K&apos;,&apos;J&apos;,&apos;S&apos;,&apos;D&apos;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool judge(const int x, const int y)&#123;</span><br><span class=\"line\">    return (x&gt;-1&amp;&amp;x&lt;h&amp;&amp;y&gt;-1&amp;&amp;y&lt;w&amp;&amp;!vis[x][y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs(int x,int y,int color)&#123;</span><br><span class=\"line\">    maze[x][y] = color;</span><br><span class=\"line\">    for(int i = 0; i &lt; 4; i++)&#123;</span><br><span class=\"line\">        int xx = x+dir[i][0];</span><br><span class=\"line\">        int yy = y+dir[i][1];</span><br><span class=\"line\">        if(judge(xx,yy) &amp;&amp; !maze[xx][yy])&#123;</span><br><span class=\"line\">            vis[xx][yy] = true;</span><br><span class=\"line\">            dfs(xx,yy,color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void countDiffentColor(int x,int y)&#123;</span><br><span class=\"line\">    for(int i = 0; i &lt; 4; i++)&#123;</span><br><span class=\"line\">        int xx = x + dir[i][0];</span><br><span class=\"line\">        int yy = y + dir[i][1];</span><br><span class=\"line\">        if(judge(xx, yy))&#123;</span><br><span class=\"line\">            if(maze[xx][yy] != 1)&#123;</span><br><span class=\"line\">                if(!colorVis[maze[xx][yy]]) colorCount++;</span><br><span class=\"line\">                colorVis[maze[xx][yy]] = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                vis[xx][yy] = true;</span><br><span class=\"line\">                countDiffentColor(xx, yy);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    int caseNumber = 1;</span><br><span class=\"line\">    while(~scanf(&quot;%d%d&quot;,&amp;h,&amp;w))&#123;</span><br><span class=\"line\">        if(0 == h &amp;&amp; 0 == w) break;</span><br><span class=\"line\">        memset(maze, 0, sizeof(int) * H * W);</span><br><span class=\"line\">        char strs[51];</span><br><span class=\"line\">        for(int i = 0; i &lt; h; i++)&#123;</span><br><span class=\"line\">            scanf(&quot;%s&quot;,strs);</span><br><span class=\"line\">            for(int j = 0; j &lt; w; j++)&#123;</span><br><span class=\"line\">                int tmp = 0;</span><br><span class=\"line\">                if(strs[j]&gt;=&apos;0&apos; &amp;&amp; strs[j]&lt;=&apos;9&apos;) tmp = strs[j] - &apos;0&apos;;</span><br><span class=\"line\">                else tmp = 10+strs[j]-&apos;a&apos;;</span><br><span class=\"line\">                </span><br><span class=\"line\">                for(int k = 0; k &lt; 4 ; k++)&#123;</span><br><span class=\"line\">                    maze[i+1][4*j+k+1] = ((tmp&gt;&gt;(3-k))&amp;1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        h+=2, w*=4,w+=2;</span><br><span class=\"line\">        int color = 2;</span><br><span class=\"line\">        memset(vis, false, sizeof(bool) * H * W);</span><br><span class=\"line\">        for(int i = 0; i &lt; h; i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; w; j++)&#123;</span><br><span class=\"line\">                if(!maze[i][j])&#123;</span><br><span class=\"line\">                    dfs(i,j,color);</span><br><span class=\"line\">                    color++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;char&gt; ans;</span><br><span class=\"line\">        memset(vis, false, sizeof(bool) * H * W);</span><br><span class=\"line\">        for(int i = 0; i &lt; h; i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; w; j++)&#123;</span><br><span class=\"line\">                if(maze[i][j] == 1 &amp;&amp; !vis[i][j])&#123;</span><br><span class=\"line\">                    colorCount = 0;</span><br><span class=\"line\">                    memset(colorVis, false, sizeof(bool) * H);</span><br><span class=\"line\">                    countDiffentColor(i,j);</span><br><span class=\"line\">                    ans.push_back(hieroglyphMap[colorCount - 1]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(ans.begin(), ans.end());</span><br><span class=\"line\">        string str(ans.begin(),ans.end());</span><br><span class=\"line\">        cout&lt;&lt;&quot;Case &quot;&lt;&lt;caseNumber++&lt;&lt;&quot;: &quot;&lt;&lt;str&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-3839-accepted.png\" alt=\"hdu-3839-accepted\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n","excerpt":"","more":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=3839\">Ancient Messages</a></p>\n<p>题目大意：给出以下6种象形文字，编程识别出来。<br><img src=\"http://acm.hdu.edu.cn/data/images/3839-1.jpg\" alt=\"figureC1\"></p>\n<p>输入：有多组测试样例，每组测试样例使用0（白色像素） 和 1（黑色像素）来描述一张图片。出于<strong>节约空间</strong>的目的，使用1位16进制数 表示 4位二进制数。图片最大size为（50<em> 200）。二进制解码之后实际大小为（200</em> 200）</p>\n<p>给出的测试样例符合以下条件：</p>\n<ul>\n<li>图片中只会出现 这6种象形文字</li>\n<li>图片中至少有一个象形文字存在</li>\n<li>每一个黑色像素都是一个象形文字的一部分（可以理解为文字笔画是标准的）</li>\n<li>黑色像素是拼接成了文字笔画</li>\n<li>文字之间不会有重叠 和 接触</li>\n<li>两颗黑色像素如果是对角接触，也可以认为这两个像素是同一个文字的一部分。(这个条件我貌似没在意，遍历只在乎 上左下右 四个方向)</li>\n<li>文字可能会比较潦草，但还是6个象形文字的符号结构</li>\n</ul>\n<p>输出： <strong>字母顺序</strong> 输出图片中的所有象形文字</p>\n<p>思考：题目乍一看毫无头绪，但是观察这6种符号，就能发现一个明显的特征，每一种符号都有各自的“封闭区域”。</p>\n<p>AnKh有1个“封闭区域”，Wedjat有3个“封闭区域”，Djed有5个“封闭区域”，Scarab有4个“封闭区域”，Was有0个“封闭区域”，Akeht有2个“封闭区域”。</p>\n<p>我们可以对不同的“封闭区域”进行染色标记，再沿着黑色像素遍历，看能接触到多少种不同颜色的“封闭区域”。 如果有1种的话，那么所遍历的黑色像素 描绘的就是 Was符号了，以此类推</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  main.cpp</span><br><span class=\"line\">//  hdu 3839</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by miaoyou.gmy on 15/8/29.</span><br><span class=\"line\">//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int H = 205;</span><br><span class=\"line\">const int W = 205;</span><br><span class=\"line\">int maze[H][W],h,w,colorCount;</span><br><span class=\"line\">bool colorVis[H],vis[H][W];</span><br><span class=\"line\">const int dir[4][2] = &#123; &#123;0,1&#125;,&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,-1&#125; &#125;;</span><br><span class=\"line\">const char hieroglyphMap[] = &#123;&apos;W&apos;,&apos;A&apos;,&apos;K&apos;,&apos;J&apos;,&apos;S&apos;,&apos;D&apos;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool judge(const int x, const int y)&#123;</span><br><span class=\"line\">    return (x&gt;-1&amp;&amp;x&lt;h&amp;&amp;y&gt;-1&amp;&amp;y&lt;w&amp;&amp;!vis[x][y]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void dfs(int x,int y,int color)&#123;</span><br><span class=\"line\">    maze[x][y] = color;</span><br><span class=\"line\">    for(int i = 0; i &lt; 4; i++)&#123;</span><br><span class=\"line\">        int xx = x+dir[i][0];</span><br><span class=\"line\">        int yy = y+dir[i][1];</span><br><span class=\"line\">        if(judge(xx,yy) &amp;&amp; !maze[xx][yy])&#123;</span><br><span class=\"line\">            vis[xx][yy] = true;</span><br><span class=\"line\">            dfs(xx,yy,color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void countDiffentColor(int x,int y)&#123;</span><br><span class=\"line\">    for(int i = 0; i &lt; 4; i++)&#123;</span><br><span class=\"line\">        int xx = x + dir[i][0];</span><br><span class=\"line\">        int yy = y + dir[i][1];</span><br><span class=\"line\">        if(judge(xx, yy))&#123;</span><br><span class=\"line\">            if(maze[xx][yy] != 1)&#123;</span><br><span class=\"line\">                if(!colorVis[maze[xx][yy]]) colorCount++;</span><br><span class=\"line\">                colorVis[maze[xx][yy]] = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                vis[xx][yy] = true;</span><br><span class=\"line\">                countDiffentColor(xx, yy);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">    int caseNumber = 1;</span><br><span class=\"line\">    while(~scanf(&quot;%d%d&quot;,&amp;h,&amp;w))&#123;</span><br><span class=\"line\">        if(0 == h &amp;&amp; 0 == w) break;</span><br><span class=\"line\">        memset(maze, 0, sizeof(int) * H * W);</span><br><span class=\"line\">        char strs[51];</span><br><span class=\"line\">        for(int i = 0; i &lt; h; i++)&#123;</span><br><span class=\"line\">            scanf(&quot;%s&quot;,strs);</span><br><span class=\"line\">            for(int j = 0; j &lt; w; j++)&#123;</span><br><span class=\"line\">                int tmp = 0;</span><br><span class=\"line\">                if(strs[j]&gt;=&apos;0&apos; &amp;&amp; strs[j]&lt;=&apos;9&apos;) tmp = strs[j] - &apos;0&apos;;</span><br><span class=\"line\">                else tmp = 10+strs[j]-&apos;a&apos;;</span><br><span class=\"line\">                </span><br><span class=\"line\">                for(int k = 0; k &lt; 4 ; k++)&#123;</span><br><span class=\"line\">                    maze[i+1][4*j+k+1] = ((tmp&gt;&gt;(3-k))&amp;1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        h+=2, w*=4,w+=2;</span><br><span class=\"line\">        int color = 2;</span><br><span class=\"line\">        memset(vis, false, sizeof(bool) * H * W);</span><br><span class=\"line\">        for(int i = 0; i &lt; h; i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; w; j++)&#123;</span><br><span class=\"line\">                if(!maze[i][j])&#123;</span><br><span class=\"line\">                    dfs(i,j,color);</span><br><span class=\"line\">                    color++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;char&gt; ans;</span><br><span class=\"line\">        memset(vis, false, sizeof(bool) * H * W);</span><br><span class=\"line\">        for(int i = 0; i &lt; h; i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; w; j++)&#123;</span><br><span class=\"line\">                if(maze[i][j] == 1 &amp;&amp; !vis[i][j])&#123;</span><br><span class=\"line\">                    colorCount = 0;</span><br><span class=\"line\">                    memset(colorVis, false, sizeof(bool) * H);</span><br><span class=\"line\">                    countDiffentColor(i,j);</span><br><span class=\"line\">                    ans.push_back(hieroglyphMap[colorCount - 1]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(ans.begin(), ans.end());</span><br><span class=\"line\">        string str(ans.begin(),ans.end());</span><br><span class=\"line\">        cout&lt;&lt;&quot;Case &quot;&lt;&lt;caseNumber++&lt;&lt;&quot;: &quot;&lt;&lt;str&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-3839-accepted.png\" alt=\"hdu-3839-accepted\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n"},{"layout":"post","title":"iOS 杂技","date":"2015-09-04T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n* [iOS代码工具箱](http://www.cnblogs.com/xdream86/p/3367401.html)\n* [语义版本控制 for CocoaPods](http://semver.org/lang/zh-CN/)\n* [软件项目版本号命名规则](http://www.cnblogs.com/sdjxcolin/archive/2007/07/02/803376.html)\n\n主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]\n Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]应根据下面的约定使用这些部分：\n\nMajor ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。\n\nMinor ：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。\n\nBuild ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。\n\nRevision ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。\n\n程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。\n\n* [ attribute详解](http://nshipster.com/__attribute__/)\n\nGNU C的一大特色（却不被初学者所知）就是__attribute__机制。__attribute__可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。\n\n编写工业级代码必不可少的装逼技能\n\n* [Http Request GET VS POST](http://www.diffen.com/difference/GET_(HTTP)_vs_POST_(HTTP))\n\n对比http请求中 GET Method 和 POST Method两者的区别\n\n* [RAC(Reactive-Cocoa)函数响应式编程](https://github.com/ReactiveCocoa/ReactiveCocoa)\n\n编程思想值得借鉴学习，可以在 Demo项目中试用一下\n\n* [How Not to Crash](http://inessential.com/hownottocrash)\n\n笔者实践经验总结how not to crash\n\n* [Animation in liquid state](https://github.com/yoavlt/LiquidFloatingActionButton)\n\n[metaballs-and-marching-squares](http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/)\n![demo](https://raw.githubusercontent.com/yoavlt/LiquidFloatingActionButton/master/Demo/top.gif)\n\n\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。","source":"_posts/2015-09-04-iOS 杂技.md","raw":"---\nlayout: post\ntitle: 'iOS 杂技'\ndate: '2015-09-04'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - iOS\n     \nauthor: '778477'\n---\n\n* [iOS代码工具箱](http://www.cnblogs.com/xdream86/p/3367401.html)\n* [语义版本控制 for CocoaPods](http://semver.org/lang/zh-CN/)\n* [软件项目版本号命名规则](http://www.cnblogs.com/sdjxcolin/archive/2007/07/02/803376.html)\n\n主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]\n Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]应根据下面的约定使用这些部分：\n\nMajor ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。\n\nMinor ：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。\n\nBuild ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。\n\nRevision ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。\n\n程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。\n\n* [ attribute详解](http://nshipster.com/__attribute__/)\n\nGNU C的一大特色（却不被初学者所知）就是__attribute__机制。__attribute__可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。\n\n编写工业级代码必不可少的装逼技能\n\n* [Http Request GET VS POST](http://www.diffen.com/difference/GET_(HTTP)_vs_POST_(HTTP))\n\n对比http请求中 GET Method 和 POST Method两者的区别\n\n* [RAC(Reactive-Cocoa)函数响应式编程](https://github.com/ReactiveCocoa/ReactiveCocoa)\n\n编程思想值得借鉴学习，可以在 Demo项目中试用一下\n\n* [How Not to Crash](http://inessential.com/hownottocrash)\n\n笔者实践经验总结how not to crash\n\n* [Animation in liquid state](https://github.com/yoavlt/LiquidFloatingActionButton)\n\n[metaballs-and-marching-squares](http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/)\n![demo](https://raw.githubusercontent.com/yoavlt/LiquidFloatingActionButton/master/Demo/top.gif)\n\n\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。","slug":"2015-09-04-iOS 杂技","published":1,"updated":"2015-10-01T09:18:15.000Z","_id":"cip3cw76g0003y8a3g3r6lo2q","comments":1,"photos":[],"link":"","content":"<ul>\n<li><a href=\"http://www.cnblogs.com/xdream86/p/3367401.html\" target=\"_blank\" rel=\"external\">iOS代码工具箱</a></li>\n<li><a href=\"http://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"external\">语义版本控制 for CocoaPods</a></li>\n<li><a href=\"http://www.cnblogs.com/sdjxcolin/archive/2007/07/02/803376.html\" target=\"_blank\" rel=\"external\">软件项目版本号命名规则</a></li>\n</ul>\n<p>主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]<br> Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]应根据下面的约定使用这些部分：</p>\n<p>Major ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。</p>\n<p>Minor ：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</p>\n<p>Build ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</p>\n<p>Revision ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。</p>\n<p>程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。</p>\n<ul>\n<li><a href=\"http://nshipster.com/__attribute__/\" target=\"_blank\" rel=\"external\"> attribute详解</a></li>\n</ul>\n<p>GNU C的一大特色（却不被初学者所知）就是<strong>attribute</strong>机制。<strong>attribute</strong>可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。</p>\n<p>编写工业级代码必不可少的装逼技能</p>\n<ul>\n<li><a href=\"http://www.diffen.com/difference/GET_(HTTP\" target=\"_blank\" rel=\"external\">Http Request GET VS POST</a>_vs<em>POST</em>(HTTP))</li>\n</ul>\n<p>对比http请求中 GET Method 和 POST Method两者的区别</p>\n<ul>\n<li><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"external\">RAC(Reactive-Cocoa)函数响应式编程</a></li>\n</ul>\n<p>编程思想值得借鉴学习，可以在 Demo项目中试用一下</p>\n<ul>\n<li><a href=\"http://inessential.com/hownottocrash\" target=\"_blank\" rel=\"external\">How Not to Crash</a></li>\n</ul>\n<p>笔者实践经验总结how not to crash</p>\n<ul>\n<li><a href=\"https://github.com/yoavlt/LiquidFloatingActionButton\" target=\"_blank\" rel=\"external\">Animation in liquid state</a></li>\n</ul>\n<p><a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\" target=\"_blank\" rel=\"external\">metaballs-and-marching-squares</a><br><img src=\"https://raw.githubusercontent.com/yoavlt/LiquidFloatingActionButton/master/Demo/top.gif\" alt=\"demo\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n","excerpt":"","more":"<ul>\n<li><a href=\"http://www.cnblogs.com/xdream86/p/3367401.html\">iOS代码工具箱</a></li>\n<li><a href=\"http://semver.org/lang/zh-CN/\">语义版本控制 for CocoaPods</a></li>\n<li><a href=\"http://www.cnblogs.com/sdjxcolin/archive/2007/07/02/803376.html\">软件项目版本号命名规则</a></li>\n</ul>\n<p>主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]<br> Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]应根据下面的约定使用这些部分：</p>\n<p>Major ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。</p>\n<p>Minor ：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</p>\n<p>Build ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</p>\n<p>Revision ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。</p>\n<p>程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。</p>\n<ul>\n<li><a href=\"http://nshipster.com/__attribute__/\"> attribute详解</a></li>\n</ul>\n<p>GNU C的一大特色（却不被初学者所知）就是<strong>attribute</strong>机制。<strong>attribute</strong>可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。</p>\n<p>编写工业级代码必不可少的装逼技能</p>\n<ul>\n<li><a href=\"http://www.diffen.com/difference/GET_(HTTP\">Http Request GET VS POST</a>_vs<em>POST</em>(HTTP))</li>\n</ul>\n<p>对比http请求中 GET Method 和 POST Method两者的区别</p>\n<ul>\n<li><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">RAC(Reactive-Cocoa)函数响应式编程</a></li>\n</ul>\n<p>编程思想值得借鉴学习，可以在 Demo项目中试用一下</p>\n<ul>\n<li><a href=\"http://inessential.com/hownottocrash\">How Not to Crash</a></li>\n</ul>\n<p>笔者实践经验总结how not to crash</p>\n<ul>\n<li><a href=\"https://github.com/yoavlt/LiquidFloatingActionButton\">Animation in liquid state</a></li>\n</ul>\n<p><a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">metaballs-and-marching-squares</a><br><img src=\"https://raw.githubusercontent.com/yoavlt/LiquidFloatingActionButton/master/Demo/top.gif\" alt=\"demo\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n"},{"layout":"post","title":"Regular Expression Matching","date":"2015-10-01T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\nhttps://leetcode.com/problems/regular-expression-matching/\n\n这个题目比较有意思，大意是实现正则表达式中的'*'和'.'这种两种操作符。\n\n我们来看看 这两种操作符是做什么的\n\n> '.' Matches any single character.\n\n> '*' Matches zero or more of the preceding element.\n\n意思是说，'.'这个操作符能匹配任意单个字符，'\\*' 这个操作符能匹配 **任意次** 在它前面的符号。恩，看起来'\\*'是压缩连续字符串的。\n\n我们再看看题目中的几个case，分析一下最后三个吧：\n\n>case 1 isMatch(\"aa\", \".*\") → true \n\n>case 2 isMatch(\"ab\", \".*\") → true \n\n>case 3 isMatch(\"aab\", \"c*a*b\") → true \n\ncase 1比较好理解，'.'匹配第一个'a'，'\\*'匹配了第二个'a'. 因为 '\\*'前面一个字符是'a'\n\ncase 2 这个case，我一开始一直理解不了，一度以为是题目搞错了。重新读题的时候，才发现题意说的很明白，是我误解了题意。\n\n**'\\*' Matches zero or more of the preceding element.**\n\n反复理解这句话，意思是指'\\*'能表示任意个在它前面的字符。也就是说，它前面如果是'.'这种操作符的话，\".\\*\"可以是\".\",\"..\",\"...\"。\n\n那么，之前case 1的理解也是错的，'\\*'操作符的优先级比较高，匹配时要优先考虑'\\*'的存在。\n\ncase 1应该是这么理解 先是'\\*'表示了一个在它前面的'.'，使得模式串变成了\"..\"，最后再去匹配。\n\ncase 2也能这么解释。 \n\ncase 3，第一个'\\*'的存在把前面的'c'表示了0次，第二个'\\*'的存在把前面的'a'表示了两次，把模式串变成了\"aab\"\n\n```C\nbool isMatch(char* s, char* p) {\n    if(*p == 0) return *s == 0;\n    /**\n     *  因为 '*'优先级较高,且影响前一个字符。所以优先考虑'*'存在的情况\n     *  如果 当前字符的下一个字符不是 '*'的话, 进行正常的匹配。 注意'.'的情况。\n     */\n    if(*(p+1) != '*'){\n        // 当前字符匹配成功的条件是 *s 存在 且 *s和*p相同\n        if(*s && ((*s == *p) || (*p == '.'))){\n            return isMatch(s+1,p+1);\n        }\n        // 当前字符匹配不通过，无须匹配后面的字符了。\n        return false;\n    }\n    else{\n        // 枚举 '*'操作符 表示n次当前字符,直到当前字符失效(失效的意思就是说 '*'影响当前字符的所有情况都我们枚举过了,不能考虑'*'的意义了,做下一步工作吧)\n        while(*s && ((*s==*p) || (*p == '.'))){\n            if(isMatch(s, p+2)) return true;\n            s++;\n        }\n        // 放弃这个 '*'操作符的机会，也就是说'*'表示了前一次字符0次。\n        return isMatch(s, p+2);\n    }\n}\n```\n\n![Regular Expression Matching Accepted](https://raw.githubusercontent.com/778477/778477.github.io/89a4ae382fa08862778215d211fb5a0e766df6ba/img/Regular%20Expression%20Matching.png)\n","source":"_posts/2015-10-01-Regular-Expression-Matching.md","raw":"---\nlayout: post\ntitle: 'Regular Expression Matching'\ndate: '2015-10-01'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n\nhttps://leetcode.com/problems/regular-expression-matching/\n\n这个题目比较有意思，大意是实现正则表达式中的'*'和'.'这种两种操作符。\n\n我们来看看 这两种操作符是做什么的\n\n> '.' Matches any single character.\n\n> '*' Matches zero or more of the preceding element.\n\n意思是说，'.'这个操作符能匹配任意单个字符，'\\*' 这个操作符能匹配 **任意次** 在它前面的符号。恩，看起来'\\*'是压缩连续字符串的。\n\n我们再看看题目中的几个case，分析一下最后三个吧：\n\n>case 1 isMatch(\"aa\", \".*\") → true \n\n>case 2 isMatch(\"ab\", \".*\") → true \n\n>case 3 isMatch(\"aab\", \"c*a*b\") → true \n\ncase 1比较好理解，'.'匹配第一个'a'，'\\*'匹配了第二个'a'. 因为 '\\*'前面一个字符是'a'\n\ncase 2 这个case，我一开始一直理解不了，一度以为是题目搞错了。重新读题的时候，才发现题意说的很明白，是我误解了题意。\n\n**'\\*' Matches zero or more of the preceding element.**\n\n反复理解这句话，意思是指'\\*'能表示任意个在它前面的字符。也就是说，它前面如果是'.'这种操作符的话，\".\\*\"可以是\".\",\"..\",\"...\"。\n\n那么，之前case 1的理解也是错的，'\\*'操作符的优先级比较高，匹配时要优先考虑'\\*'的存在。\n\ncase 1应该是这么理解 先是'\\*'表示了一个在它前面的'.'，使得模式串变成了\"..\"，最后再去匹配。\n\ncase 2也能这么解释。 \n\ncase 3，第一个'\\*'的存在把前面的'c'表示了0次，第二个'\\*'的存在把前面的'a'表示了两次，把模式串变成了\"aab\"\n\n```C\nbool isMatch(char* s, char* p) {\n    if(*p == 0) return *s == 0;\n    /**\n     *  因为 '*'优先级较高,且影响前一个字符。所以优先考虑'*'存在的情况\n     *  如果 当前字符的下一个字符不是 '*'的话, 进行正常的匹配。 注意'.'的情况。\n     */\n    if(*(p+1) != '*'){\n        // 当前字符匹配成功的条件是 *s 存在 且 *s和*p相同\n        if(*s && ((*s == *p) || (*p == '.'))){\n            return isMatch(s+1,p+1);\n        }\n        // 当前字符匹配不通过，无须匹配后面的字符了。\n        return false;\n    }\n    else{\n        // 枚举 '*'操作符 表示n次当前字符,直到当前字符失效(失效的意思就是说 '*'影响当前字符的所有情况都我们枚举过了,不能考虑'*'的意义了,做下一步工作吧)\n        while(*s && ((*s==*p) || (*p == '.'))){\n            if(isMatch(s, p+2)) return true;\n            s++;\n        }\n        // 放弃这个 '*'操作符的机会，也就是说'*'表示了前一次字符0次。\n        return isMatch(s, p+2);\n    }\n}\n```\n\n![Regular Expression Matching Accepted](https://raw.githubusercontent.com/778477/778477.github.io/89a4ae382fa08862778215d211fb5a0e766df6ba/img/Regular%20Expression%20Matching.png)\n","slug":"2015-10-01-Regular-Expression-Matching","published":1,"updated":"2015-10-01T08:18:32.000Z","_id":"cip3cw76j0004y8a3cicqdqfm","comments":1,"photos":[],"link":"","content":"<p><a href=\"https://leetcode.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"external\">https://leetcode.com/problems/regular-expression-matching/</a></p>\n<p>这个题目比较有意思，大意是实现正则表达式中的’*’和’.’这种两种操作符。</p>\n<p>我们来看看 这两种操作符是做什么的</p>\n<blockquote>\n<p>‘.’ Matches any single character.</p>\n<p>‘*’ Matches zero or more of the preceding element.</p>\n</blockquote>\n<p>意思是说，’.’这个操作符能匹配任意单个字符，’*‘ 这个操作符能匹配 <strong>任意次</strong> 在它前面的符号。恩，看起来’*‘是压缩连续字符串的。</p>\n<p>我们再看看题目中的几个case，分析一下最后三个吧：</p>\n<blockquote>\n<p>case 1 isMatch(“aa”, “.*”) → true </p>\n<p>case 2 isMatch(“ab”, “.*”) → true </p>\n<p>case 3 isMatch(“aab”, “c<em>a</em>b”) → true </p>\n</blockquote>\n<p>case 1比较好理解，’.’匹配第一个’a’，’*‘匹配了第二个’a’. 因为 ‘*‘前面一个字符是’a’</p>\n<p>case 2 这个case，我一开始一直理解不了，一度以为是题目搞错了。重新读题的时候，才发现题意说的很明白，是我误解了题意。</p>\n<p><strong>‘*‘ Matches zero or more of the preceding element.</strong></p>\n<p>反复理解这句话，意思是指’*‘能表示任意个在它前面的字符。也就是说，它前面如果是’.’这种操作符的话，”.*“可以是”.”,”..”,”…”。</p>\n<p>那么，之前case 1的理解也是错的，’*‘操作符的优先级比较高，匹配时要优先考虑’*‘的存在。</p>\n<p>case 1应该是这么理解 先是’*‘表示了一个在它前面的’.’，使得模式串变成了”..”，最后再去匹配。</p>\n<p>case 2也能这么解释。 </p>\n<p>case 3，第一个’*‘的存在把前面的’c’表示了0次，第二个’*‘的存在把前面的’a’表示了两次，把模式串变成了”aab”</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMatch</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">char</span>* p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> *s == <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     *  因为 '*'优先级较高,且影响前一个字符。所以优先考虑'*'存在的情况</span><br><span class=\"line\">     *  如果 当前字符的下一个字符不是 '*'的话, 进行正常的匹配。 注意'.'的情况。</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*(p+<span class=\"number\">1</span>) != <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前字符匹配成功的条件是 *s 存在 且 *s和*p相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*s &amp;&amp; ((*s == *p) || (*p == <span class=\"string\">'.'</span>)))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isMatch(s+<span class=\"number\">1</span>,p+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前字符匹配不通过，无须匹配后面的字符了。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 枚举 '*'操作符 表示n次当前字符,直到当前字符失效(失效的意思就是说 '*'影响当前字符的所有情况都我们枚举过了,不能考虑'*'的意义了,做下一步工作吧)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(*s &amp;&amp; ((*s==*p) || (*p == <span class=\"string\">'.'</span>)))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isMatch(s, p+<span class=\"number\">2</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 放弃这个 '*'操作符的机会，也就是说'*'表示了前一次字符0次。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMatch(s, p+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/89a4ae382fa08862778215d211fb5a0e766df6ba/img/Regular%20Expression%20Matching.png\" alt=\"Regular Expression Matching Accepted\"></p>\n","excerpt":"","more":"<p><a href=\"https://leetcode.com/problems/regular-expression-matching/\">https://leetcode.com/problems/regular-expression-matching/</a></p>\n<p>这个题目比较有意思，大意是实现正则表达式中的’*’和’.’这种两种操作符。</p>\n<p>我们来看看 这两种操作符是做什么的</p>\n<blockquote>\n<p>‘.’ Matches any single character.</p>\n<p>‘*’ Matches zero or more of the preceding element.</p>\n</blockquote>\n<p>意思是说，’.’这个操作符能匹配任意单个字符，’*‘ 这个操作符能匹配 <strong>任意次</strong> 在它前面的符号。恩，看起来’*‘是压缩连续字符串的。</p>\n<p>我们再看看题目中的几个case，分析一下最后三个吧：</p>\n<blockquote>\n<p>case 1 isMatch(“aa”, “.*”) → true </p>\n<p>case 2 isMatch(“ab”, “.*”) → true </p>\n<p>case 3 isMatch(“aab”, “c<em>a</em>b”) → true </p>\n</blockquote>\n<p>case 1比较好理解，’.’匹配第一个’a’，’*‘匹配了第二个’a’. 因为 ‘*‘前面一个字符是’a’</p>\n<p>case 2 这个case，我一开始一直理解不了，一度以为是题目搞错了。重新读题的时候，才发现题意说的很明白，是我误解了题意。</p>\n<p><strong>‘*‘ Matches zero or more of the preceding element.</strong></p>\n<p>反复理解这句话，意思是指’*‘能表示任意个在它前面的字符。也就是说，它前面如果是’.’这种操作符的话，”.*“可以是”.”,”..”,”…”。</p>\n<p>那么，之前case 1的理解也是错的，’*‘操作符的优先级比较高，匹配时要优先考虑’*‘的存在。</p>\n<p>case 1应该是这么理解 先是’*‘表示了一个在它前面的’.’，使得模式串变成了”..”，最后再去匹配。</p>\n<p>case 2也能这么解释。 </p>\n<p>case 3，第一个’*‘的存在把前面的’c’表示了0次，第二个’*‘的存在把前面的’a’表示了两次，把模式串变成了”aab”</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMatch</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">char</span>* p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> *s == <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     *  因为 '*'优先级较高,且影响前一个字符。所以优先考虑'*'存在的情况</span><br><span class=\"line\">     *  如果 当前字符的下一个字符不是 '*'的话, 进行正常的匹配。 注意'.'的情况。</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(*(p+<span class=\"number\">1</span>) != <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前字符匹配成功的条件是 *s 存在 且 *s和*p相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*s &amp;&amp; ((*s == *p) || (*p == <span class=\"string\">'.'</span>)))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isMatch(s+<span class=\"number\">1</span>,p+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前字符匹配不通过，无须匹配后面的字符了。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 枚举 '*'操作符 表示n次当前字符,直到当前字符失效(失效的意思就是说 '*'影响当前字符的所有情况都我们枚举过了,不能考虑'*'的意义了,做下一步工作吧)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(*s &amp;&amp; ((*s==*p) || (*p == <span class=\"string\">'.'</span>)))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isMatch(s, p+<span class=\"number\">2</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 放弃这个 '*'操作符的机会，也就是说'*'表示了前一次字符0次。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMatch(s, p+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/89a4ae382fa08862778215d211fb5a0e766df6ba/img/Regular%20Expression%20Matching.png\" alt=\"Regular Expression Matching Accepted\"></p>\n"},{"layout":"post","title":"Different iOS SDK Version Compile","date":"2015-10-08T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n**前言**\n- - -\n我们在开发feature的时候依赖 iOS9 SDK中的新framework，注意这个framework只有iOS9才有。但是我们有两套打包环境\n\n* Xcode6 - iOS8\n* Xcode7 - iOS9\n\n如果不做任何处理的话，在第一套打包环境下会出现 'XX.h' file not found.\n\n我们希望编写的代码能够兼容这两套打包环境. \n\nGoogle 区分iOS系统版本 得到以下结果：\n\n[iPhone开发技巧之环境篇（7）--- 区分不同版本的iPhone](http://www.yifeiyang.net/iphone-development-techniques-of-environmental-chapter-7-distinguish-between-different-versions-of-the-iphone/)\n\n[区分ios设备，os版本，sdk版本](http://justsee.iteye.com/blog/1621533)\n\n我们只关心文章最后的段落:iPhone OS SDK版本，我们希望在 iOS9下 编译我们的feature代码，在iOS9之前的系统版本不编译，不执行。\n\n```\n#if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_2_2\n    #if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_3_1\n        // iPhone OS SDK 4.0 以后版本的处理\n    #else\n        // iPhone OS SDK 3.0 ~ 4.0 版本的处理\n    #endif\n#else\n    // iPhone OS SDK 3.0 之前版本的处理\n#endif\n```\n\n但是，这还是有一个坑。 我们来看一下 具体的宏定义在 ```AvailabilityInternal.h```中。\n\n```\n #ifdef __IPHONE_OS_VERSION_MIN_REQUIRED\n    /* make sure a default max version is set */\n    #ifndef __IPHONE_OS_VERSION_MAX_ALLOWED\n        #define __IPHONE_OS_VERSION_MAX_ALLOWED     __IPHONE_9_0\n    #endif\n    /* make sure a valid min is set */\n    #if __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_2_0\n        #undef __IPHONE_OS_VERSION_MIN_REQUIRED\n        #define __IPHONE_OS_VERSION_MIN_REQUIRED    __IPHONE_2_0 \n    #endif\n```\n \n我查看的是iOS 9.0的定义，里面定义 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` 为 ```__IPHONE_9_0```(90000)\n \n相信每个iOS SDK发布，都会增加 一个宏来表示版本号\n \n```\n#define __IPHONE_2_0     20000\n#define __IPHONE_2_1     20100\n#define __IPHONE_2_2     20200\n#define __IPHONE_3_0     30000\n#define __IPHONE_3_1     30100\n#define __IPHONE_3_2     30200\n#define __IPHONE_4_0     40000\n#define __IPHONE_4_1     40100\n#define __IPHONE_4_2     40200\n#define __IPHONE_4_3     40300\n#define __IPHONE_5_0     50000\n#define __IPHONE_5_1     50100\n#define __IPHONE_6_0     60000\n#define __IPHONE_6_1     60100\n#define __IPHONE_7_0     70000\n#define __IPHONE_7_1     70100\n#define __IPHONE_8_0     80000\n#define __IPHONE_8_1     80100\n#define __IPHONE_8_2     80200\n#define __IPHONE_8_3     80300\n#define __IPHONE_8_4     80400\n#define __IPHONE_9_0     90000\n/* __IPHONE_NA is not defined to a value but is uses as a token by macros to indicate that the API is unavailable */\n```\n\n问题来了：如果兼容代码中使用的 宏定义为 ```__IPHONE_8_4```，而我编译的iOS SDK使用的是 iOS8.3的话，```__IPHONE_8_4```其实是没定义的。\n\n```\n#if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_8_4\n```\n这个比较语句其实取 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` = ```__IPHONE_8_3``` = 80300 和 ```__IPHONE_8_4```所表示的数字做比较，是没有作用的。正确做法 **是直接使用数字**\n\n```\n#if __IPHONE_OS_VERSION_MAX_ALLOWED > 80400\n```\n\n","source":"_posts/2015-10-08-Different-iOS-SDK-Version-Compile.md","raw":"---\nlayout: post\ntitle: 'Different iOS SDK Version Compile'\ndate: '2015-10-08'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - iOS\n     \nauthor: '778477'\n---\n\n**前言**\n- - -\n我们在开发feature的时候依赖 iOS9 SDK中的新framework，注意这个framework只有iOS9才有。但是我们有两套打包环境\n\n* Xcode6 - iOS8\n* Xcode7 - iOS9\n\n如果不做任何处理的话，在第一套打包环境下会出现 'XX.h' file not found.\n\n我们希望编写的代码能够兼容这两套打包环境. \n\nGoogle 区分iOS系统版本 得到以下结果：\n\n[iPhone开发技巧之环境篇（7）--- 区分不同版本的iPhone](http://www.yifeiyang.net/iphone-development-techniques-of-environmental-chapter-7-distinguish-between-different-versions-of-the-iphone/)\n\n[区分ios设备，os版本，sdk版本](http://justsee.iteye.com/blog/1621533)\n\n我们只关心文章最后的段落:iPhone OS SDK版本，我们希望在 iOS9下 编译我们的feature代码，在iOS9之前的系统版本不编译，不执行。\n\n```\n#if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_2_2\n    #if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_3_1\n        // iPhone OS SDK 4.0 以后版本的处理\n    #else\n        // iPhone OS SDK 3.0 ~ 4.0 版本的处理\n    #endif\n#else\n    // iPhone OS SDK 3.0 之前版本的处理\n#endif\n```\n\n但是，这还是有一个坑。 我们来看一下 具体的宏定义在 ```AvailabilityInternal.h```中。\n\n```\n #ifdef __IPHONE_OS_VERSION_MIN_REQUIRED\n    /* make sure a default max version is set */\n    #ifndef __IPHONE_OS_VERSION_MAX_ALLOWED\n        #define __IPHONE_OS_VERSION_MAX_ALLOWED     __IPHONE_9_0\n    #endif\n    /* make sure a valid min is set */\n    #if __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_2_0\n        #undef __IPHONE_OS_VERSION_MIN_REQUIRED\n        #define __IPHONE_OS_VERSION_MIN_REQUIRED    __IPHONE_2_0 \n    #endif\n```\n \n我查看的是iOS 9.0的定义，里面定义 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` 为 ```__IPHONE_9_0```(90000)\n \n相信每个iOS SDK发布，都会增加 一个宏来表示版本号\n \n```\n#define __IPHONE_2_0     20000\n#define __IPHONE_2_1     20100\n#define __IPHONE_2_2     20200\n#define __IPHONE_3_0     30000\n#define __IPHONE_3_1     30100\n#define __IPHONE_3_2     30200\n#define __IPHONE_4_0     40000\n#define __IPHONE_4_1     40100\n#define __IPHONE_4_2     40200\n#define __IPHONE_4_3     40300\n#define __IPHONE_5_0     50000\n#define __IPHONE_5_1     50100\n#define __IPHONE_6_0     60000\n#define __IPHONE_6_1     60100\n#define __IPHONE_7_0     70000\n#define __IPHONE_7_1     70100\n#define __IPHONE_8_0     80000\n#define __IPHONE_8_1     80100\n#define __IPHONE_8_2     80200\n#define __IPHONE_8_3     80300\n#define __IPHONE_8_4     80400\n#define __IPHONE_9_0     90000\n/* __IPHONE_NA is not defined to a value but is uses as a token by macros to indicate that the API is unavailable */\n```\n\n问题来了：如果兼容代码中使用的 宏定义为 ```__IPHONE_8_4```，而我编译的iOS SDK使用的是 iOS8.3的话，```__IPHONE_8_4```其实是没定义的。\n\n```\n#if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_8_4\n```\n这个比较语句其实取 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` = ```__IPHONE_8_3``` = 80300 和 ```__IPHONE_8_4```所表示的数字做比较，是没有作用的。正确做法 **是直接使用数字**\n\n```\n#if __IPHONE_OS_VERSION_MAX_ALLOWED > 80400\n```\n\n","slug":"2015-10-08-Different-iOS-SDK-Version-Compile","published":1,"updated":"2015-10-08T12:50:17.000Z","_id":"cip3cw76k0006y8a3nn0pgfr2","comments":1,"photos":[],"link":"","content":"<p><strong>前言</strong></p>\n<hr>\n<p>我们在开发feature的时候依赖 iOS9 SDK中的新framework，注意这个framework只有iOS9才有。但是我们有两套打包环境</p>\n<ul>\n<li>Xcode6 - iOS8</li>\n<li>Xcode7 - iOS9</li>\n</ul>\n<p>如果不做任何处理的话，在第一套打包环境下会出现 ‘XX.h’ file not found.</p>\n<p>我们希望编写的代码能够兼容这两套打包环境. </p>\n<p>Google 区分iOS系统版本 得到以下结果：</p>\n<p><a href=\"http://www.yifeiyang.net/iphone-development-techniques-of-environmental-chapter-7-distinguish-between-different-versions-of-the-iphone/\" target=\"_blank\" rel=\"external\">iPhone开发技巧之环境篇（7）— 区分不同版本的iPhone</a></p>\n<p><a href=\"http://justsee.iteye.com/blog/1621533\" target=\"_blank\" rel=\"external\">区分ios设备，os版本，sdk版本</a></p>\n<p>我们只关心文章最后的段落:iPhone OS SDK版本，我们希望在 iOS9下 编译我们的feature代码，在iOS9之前的系统版本不编译，不执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; __IPHONE_2_2</span><br><span class=\"line\">    #if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; __IPHONE_3_1</span><br><span class=\"line\">        // iPhone OS SDK 4.0 以后版本的处理</span><br><span class=\"line\">    #else</span><br><span class=\"line\">        // iPhone OS SDK 3.0 ~ 4.0 版本的处理</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">#else</span><br><span class=\"line\">    // iPhone OS SDK 3.0 之前版本的处理</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>但是，这还是有一个坑。 我们来看一下 具体的宏定义在 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p> #ifdef __IPHONE_OS_VERSION_MIN_REQUIRED<br>    /<em> make sure a default max version is set </em>/</p>\n<pre><code>#ifndef __IPHONE_OS_VERSION_MAX_ALLOWED\n    #define __IPHONE_OS_VERSION_MAX_ALLOWED     __IPHONE_9_0\n#endif\n/* make sure a valid min is set */\n#if __IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_2_0\n    #undef __IPHONE_OS_VERSION_MIN_REQUIRED\n    #define __IPHONE_OS_VERSION_MIN_REQUIRED    __IPHONE_2_0 \n#endif\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">我查看的是iOS 9.0的定义，里面定义 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` 为 ```__IPHONE_9_0```(90000)</span><br><span class=\"line\"> </span><br><span class=\"line\">相信每个iOS SDK发布，都会增加 一个宏来表示版本号</span><br></pre></td></tr></table></figure>\n<p>#define __IPHONE_2_0     20000</p>\n<p>#define __IPHONE_2_1     20100</p>\n<p>#define __IPHONE_2_2     20200</p>\n<p>#define __IPHONE_3_0     30000</p>\n<p>#define __IPHONE_3_1     30100</p>\n<p>#define __IPHONE_3_2     30200</p>\n<p>#define __IPHONE_4_0     40000</p>\n<p>#define __IPHONE_4_1     40100</p>\n<p>#define __IPHONE_4_2     40200</p>\n<p>#define __IPHONE_4_3     40300</p>\n<p>#define __IPHONE_5_0     50000</p>\n<p>#define __IPHONE_5_1     50100</p>\n<p>#define __IPHONE_6_0     60000</p>\n<p>#define __IPHONE_6_1     60100</p>\n<p>#define __IPHONE_7_0     70000</p>\n<p>#define __IPHONE_7_1     70100</p>\n<p>#define __IPHONE_8_0     80000</p>\n<p>#define __IPHONE_8_1     80100</p>\n<p>#define __IPHONE_8_2     80200</p>\n<p>#define __IPHONE_8_3     80300</p>\n<p>#define __IPHONE_8_4     80400</p>\n<p>#define <strong>IPHONE_9_0     90000<br>/* </strong>IPHONE_NA is not defined to a value but is uses as a token by macros to indicate that the API is unavailable */<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">问题来了：如果兼容代码中使用的 宏定义为 ```__IPHONE_8_4```，而我编译的iOS SDK使用的是 iOS8.3的话，```__IPHONE_8_4```其实是没定义的。</span><br></pre></td></tr></table></figure></p>\n<p>#if <strong>IPHONE_OS_VERSION_MAX_ALLOWED &gt; </strong>IPHONE_8_4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个比较语句其实取 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` = ```__IPHONE_8_3``` = 80300 和 ```__IPHONE_8_4```所表示的数字做比较，是没有作用的。正确做法 **是直接使用数字**</span><br></pre></td></tr></table></figure></p>\n<p>#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; 80400<br>```</p>\n","excerpt":"","more":"<p><strong>前言</strong></p>\n<hr>\n<p>我们在开发feature的时候依赖 iOS9 SDK中的新framework，注意这个framework只有iOS9才有。但是我们有两套打包环境</p>\n<ul>\n<li>Xcode6 - iOS8</li>\n<li>Xcode7 - iOS9</li>\n</ul>\n<p>如果不做任何处理的话，在第一套打包环境下会出现 ‘XX.h’ file not found.</p>\n<p>我们希望编写的代码能够兼容这两套打包环境. </p>\n<p>Google 区分iOS系统版本 得到以下结果：</p>\n<p><a href=\"http://www.yifeiyang.net/iphone-development-techniques-of-environmental-chapter-7-distinguish-between-different-versions-of-the-iphone/\">iPhone开发技巧之环境篇（7）— 区分不同版本的iPhone</a></p>\n<p><a href=\"http://justsee.iteye.com/blog/1621533\">区分ios设备，os版本，sdk版本</a></p>\n<p>我们只关心文章最后的段落:iPhone OS SDK版本，我们希望在 iOS9下 编译我们的feature代码，在iOS9之前的系统版本不编译，不执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; __IPHONE_2_2</span><br><span class=\"line\">    #if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; __IPHONE_3_1</span><br><span class=\"line\">        // iPhone OS SDK 4.0 以后版本的处理</span><br><span class=\"line\">    #else</span><br><span class=\"line\">        // iPhone OS SDK 3.0 ~ 4.0 版本的处理</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">#else</span><br><span class=\"line\">    // iPhone OS SDK 3.0 之前版本的处理</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>但是，这还是有一个坑。 我们来看一下 具体的宏定义在 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p> #ifdef __IPHONE_OS_VERSION_MIN_REQUIRED<br>    /<em> make sure a default max version is set </em>/</p>\n<pre><code>#ifndef __IPHONE_OS_VERSION_MAX_ALLOWED\n    #define __IPHONE_OS_VERSION_MAX_ALLOWED     __IPHONE_9_0\n#endif\n/* make sure a valid min is set */\n#if __IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_2_0\n    #undef __IPHONE_OS_VERSION_MIN_REQUIRED\n    #define __IPHONE_OS_VERSION_MIN_REQUIRED    __IPHONE_2_0 \n#endif\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">我查看的是iOS 9.0的定义，里面定义 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` 为 ```__IPHONE_9_0```(90000)</span><br><span class=\"line\"> </span><br><span class=\"line\">相信每个iOS SDK发布，都会增加 一个宏来表示版本号</span><br></pre></td></tr></table></figure>\n<p>#define __IPHONE_2_0     20000</p>\n<p>#define __IPHONE_2_1     20100</p>\n<p>#define __IPHONE_2_2     20200</p>\n<p>#define __IPHONE_3_0     30000</p>\n<p>#define __IPHONE_3_1     30100</p>\n<p>#define __IPHONE_3_2     30200</p>\n<p>#define __IPHONE_4_0     40000</p>\n<p>#define __IPHONE_4_1     40100</p>\n<p>#define __IPHONE_4_2     40200</p>\n<p>#define __IPHONE_4_3     40300</p>\n<p>#define __IPHONE_5_0     50000</p>\n<p>#define __IPHONE_5_1     50100</p>\n<p>#define __IPHONE_6_0     60000</p>\n<p>#define __IPHONE_6_1     60100</p>\n<p>#define __IPHONE_7_0     70000</p>\n<p>#define __IPHONE_7_1     70100</p>\n<p>#define __IPHONE_8_0     80000</p>\n<p>#define __IPHONE_8_1     80100</p>\n<p>#define __IPHONE_8_2     80200</p>\n<p>#define __IPHONE_8_3     80300</p>\n<p>#define __IPHONE_8_4     80400</p>\n<p>#define <strong>IPHONE_9_0     90000<br>/* </strong>IPHONE_NA is not defined to a value but is uses as a token by macros to indicate that the API is unavailable */<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">问题来了：如果兼容代码中使用的 宏定义为 ```__IPHONE_8_4```，而我编译的iOS SDK使用的是 iOS8.3的话，```__IPHONE_8_4```其实是没定义的。</span><br></pre></td></tr></table></figure></p>\n<p>#if <strong>IPHONE_OS_VERSION_MAX_ALLOWED &gt; </strong>IPHONE_8_4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个比较语句其实取 ```__IPHONE_OS_VERSION_MAX_ALLOWED``` = ```__IPHONE_8_3``` = 80300 和 ```__IPHONE_8_4```所表示的数字做比较，是没有作用的。正确做法 **是直接使用数字**</span><br></pre></td></tr></table></figure></p>\n<p>#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; 80400<br>```</p>\n"},{"layout":"post","title":"Reveal","date":"2015-10-08T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n使用Reveal进行视图分析\n---\n\nReveal比Xcode自带的Debug View Hierarchy要给力一些。好吧，这句话我收回-。- Xcode7中的视图调试貌似改进了很多，还支持debug。言归正传，说一下如何使用 **Reveal** 吧\n\n\n官方有三种使用方法：\n\n 1. **Static Linking**\n\t* Linking Reveal's static library into your iOS application is the quickest and easiest way to enable Reveal introspection.\n\n 2. **Dynamic Loading**\n\t* Dynamic loading allows third party libraries to be loaded into an iOS application on demand, at runtime. In this scenario the library is not linked in to the executable, but is instead included in the app bundle and can be loaded on demand. This approach allows developers to maintain full control over when the Reveal library is loaded, and when the service is started and stopped within their application.\n 3. **CocoaPods**\n\t* CocoaPods is a dependency management system for iOS and OSX projects. It automates the configuration of workspaces to manage 3rd party library dependencies in Xcode projects.\n\t\n\t\n我们不希望使用一个三方工具，还要修改代码。所以我们重点关注第二个Dynamic Loading。\n\n下面是我直译版本：\n\n在不修改工程项目的情况加载 Reveal\n---\n**这个方法只是适用于项目运行在模拟器上**\n\n加载Reveal不需要修改工程项目是一个极好的办法。方便让你分析iOS App，不用去考虑修改工程所带来的隐患了。\n\n 1. 使用Xcode打开你的项目，选择 View(视图)->Navigators(导航)->Show Breakpoint Navigator(断点导航栏)\n 2. 在底部栏的左边有一个加号，点击添加符号断点(Symbolic Breakpoint) ![add-symbolic-breakpoint](https://raw.githubusercontent.com/778477/778477.github.io/master/img/add-symbolic-breakpoint-menu.jpg)\n 3. 右键编辑断点 输入`UIApplicationMain` 到Symbol输入框中\n 4. 点击`add action`按钮，确认action设置为`Debugger Command`\n 5. 复制下面的语句到输入框中 ``` expr (Class)NSClassFromString(@\"IBARevealLoader\") == nil ? (void *)dlopen(\"/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib\", 0x2) : ((void*)0)```\n\t* 需要确认你的Reveal安装路径是否一致\n 6. 检查`Automatically continue after evaluating actions.`选项是否勾选![setup-breakpoint-popup](https://raw.githubusercontent.com/778477/778477.github.io/master/img/setup-breakpoint-popup.jpg)\n 7. 右键点击这个最新创建的断点选择`Move Breakpoint To`-> `User `![move-breakpoint-to-user](https://raw.githubusercontent.com/778477/778477.github.io/master/img/move-breakpoint-to-user.jpg)\n 8. 在Xcode编译并运行你的应用在iOS模拟器上。如果一切步骤设置ok的话，你在 Reveal 上切换选择你的App就可以愉快的开始\n\n> http://support.revealapp.com/\n\n","source":"_posts/2015-10-20-Reveal.md","raw":"---\nlayout: post\ntitle: 'Reveal'\ndate: '2015-10-08'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - iOS\n     \nauthor: '778477'\n---\n\n使用Reveal进行视图分析\n---\n\nReveal比Xcode自带的Debug View Hierarchy要给力一些。好吧，这句话我收回-。- Xcode7中的视图调试貌似改进了很多，还支持debug。言归正传，说一下如何使用 **Reveal** 吧\n\n\n官方有三种使用方法：\n\n 1. **Static Linking**\n\t* Linking Reveal's static library into your iOS application is the quickest and easiest way to enable Reveal introspection.\n\n 2. **Dynamic Loading**\n\t* Dynamic loading allows third party libraries to be loaded into an iOS application on demand, at runtime. In this scenario the library is not linked in to the executable, but is instead included in the app bundle and can be loaded on demand. This approach allows developers to maintain full control over when the Reveal library is loaded, and when the service is started and stopped within their application.\n 3. **CocoaPods**\n\t* CocoaPods is a dependency management system for iOS and OSX projects. It automates the configuration of workspaces to manage 3rd party library dependencies in Xcode projects.\n\t\n\t\n我们不希望使用一个三方工具，还要修改代码。所以我们重点关注第二个Dynamic Loading。\n\n下面是我直译版本：\n\n在不修改工程项目的情况加载 Reveal\n---\n**这个方法只是适用于项目运行在模拟器上**\n\n加载Reveal不需要修改工程项目是一个极好的办法。方便让你分析iOS App，不用去考虑修改工程所带来的隐患了。\n\n 1. 使用Xcode打开你的项目，选择 View(视图)->Navigators(导航)->Show Breakpoint Navigator(断点导航栏)\n 2. 在底部栏的左边有一个加号，点击添加符号断点(Symbolic Breakpoint) ![add-symbolic-breakpoint](https://raw.githubusercontent.com/778477/778477.github.io/master/img/add-symbolic-breakpoint-menu.jpg)\n 3. 右键编辑断点 输入`UIApplicationMain` 到Symbol输入框中\n 4. 点击`add action`按钮，确认action设置为`Debugger Command`\n 5. 复制下面的语句到输入框中 ``` expr (Class)NSClassFromString(@\"IBARevealLoader\") == nil ? (void *)dlopen(\"/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib\", 0x2) : ((void*)0)```\n\t* 需要确认你的Reveal安装路径是否一致\n 6. 检查`Automatically continue after evaluating actions.`选项是否勾选![setup-breakpoint-popup](https://raw.githubusercontent.com/778477/778477.github.io/master/img/setup-breakpoint-popup.jpg)\n 7. 右键点击这个最新创建的断点选择`Move Breakpoint To`-> `User `![move-breakpoint-to-user](https://raw.githubusercontent.com/778477/778477.github.io/master/img/move-breakpoint-to-user.jpg)\n 8. 在Xcode编译并运行你的应用在iOS模拟器上。如果一切步骤设置ok的话，你在 Reveal 上切换选择你的App就可以愉快的开始\n\n> http://support.revealapp.com/\n\n","slug":"2015-10-20-Reveal","published":1,"updated":"2015-10-20T11:46:38.000Z","_id":"cip3cw76m0008y8a3jk4em9jh","comments":1,"photos":[],"link":"","content":"<h2 id=\"使用Reveal进行视图分析\"><a href=\"#使用Reveal进行视图分析\" class=\"headerlink\" title=\"使用Reveal进行视图分析\"></a>使用Reveal进行视图分析</h2><p>Reveal比Xcode自带的Debug View Hierarchy要给力一些。好吧，这句话我收回-。- Xcode7中的视图调试貌似改进了很多，还支持debug。言归正传，说一下如何使用 <strong>Reveal</strong> 吧</p>\n<p>官方有三种使用方法：</p>\n<ol>\n<li><p><strong>Static Linking</strong></p>\n<ul>\n<li>Linking Reveal’s static library into your iOS application is the quickest and easiest way to enable Reveal introspection.</li>\n</ul>\n</li>\n<li><p><strong>Dynamic Loading</strong></p>\n<ul>\n<li>Dynamic loading allows third party libraries to be loaded into an iOS application on demand, at runtime. In this scenario the library is not linked in to the executable, but is instead included in the app bundle and can be loaded on demand. This approach allows developers to maintain full control over when the Reveal library is loaded, and when the service is started and stopped within their application.</li>\n</ul>\n</li>\n<li><strong>CocoaPods</strong><ul>\n<li>CocoaPods is a dependency management system for iOS and OSX projects. It automates the configuration of workspaces to manage 3rd party library dependencies in Xcode projects.</li>\n</ul>\n</li>\n</ol>\n<p>我们不希望使用一个三方工具，还要修改代码。所以我们重点关注第二个Dynamic Loading。</p>\n<p>下面是我直译版本：</p>\n<h2 id=\"在不修改工程项目的情况加载-Reveal\"><a href=\"#在不修改工程项目的情况加载-Reveal\" class=\"headerlink\" title=\"在不修改工程项目的情况加载 Reveal\"></a>在不修改工程项目的情况加载 Reveal</h2><p><strong>这个方法只是适用于项目运行在模拟器上</strong></p>\n<p>加载Reveal不需要修改工程项目是一个极好的办法。方便让你分析iOS App，不用去考虑修改工程所带来的隐患了。</p>\n<ol>\n<li>使用Xcode打开你的项目，选择 View(视图)-&gt;Navigators(导航)-&gt;Show Breakpoint Navigator(断点导航栏)</li>\n<li>在底部栏的左边有一个加号，点击添加符号断点(Symbolic Breakpoint) <img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/add-symbolic-breakpoint-menu.jpg\" alt=\"add-symbolic-breakpoint\"></li>\n<li>右键编辑断点 输入<code>UIApplicationMain</code> 到Symbol输入框中</li>\n<li>点击<code>add action</code>按钮，确认action设置为<code>Debugger Command</code></li>\n<li>复制下面的语句到输入框中 <code>expr (Class)NSClassFromString(@&quot;IBARevealLoader&quot;) == nil ? (void *)dlopen(&quot;/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib&quot;, 0x2) : ((void*)0)</code><ul>\n<li>需要确认你的Reveal安装路径是否一致</li>\n</ul>\n</li>\n<li>检查<code>Automatically continue after evaluating actions.</code>选项是否勾选<img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/setup-breakpoint-popup.jpg\" alt=\"setup-breakpoint-popup\"></li>\n<li>右键点击这个最新创建的断点选择<code>Move Breakpoint To</code>-&gt; <code>User</code><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/move-breakpoint-to-user.jpg\" alt=\"move-breakpoint-to-user\"></li>\n<li>在Xcode编译并运行你的应用在iOS模拟器上。如果一切步骤设置ok的话，你在 Reveal 上切换选择你的App就可以愉快的开始</li>\n</ol>\n<blockquote>\n<p><a href=\"http://support.revealapp.com/\" target=\"_blank\" rel=\"external\">http://support.revealapp.com/</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"使用Reveal进行视图分析\"><a href=\"#使用Reveal进行视图分析\" class=\"headerlink\" title=\"使用Reveal进行视图分析\"></a>使用Reveal进行视图分析</h2><p>Reveal比Xcode自带的Debug View Hierarchy要给力一些。好吧，这句话我收回-。- Xcode7中的视图调试貌似改进了很多，还支持debug。言归正传，说一下如何使用 <strong>Reveal</strong> 吧</p>\n<p>官方有三种使用方法：</p>\n<ol>\n<li><p><strong>Static Linking</strong></p>\n<ul>\n<li>Linking Reveal’s static library into your iOS application is the quickest and easiest way to enable Reveal introspection.</li>\n</ul>\n</li>\n<li><p><strong>Dynamic Loading</strong></p>\n<ul>\n<li>Dynamic loading allows third party libraries to be loaded into an iOS application on demand, at runtime. In this scenario the library is not linked in to the executable, but is instead included in the app bundle and can be loaded on demand. This approach allows developers to maintain full control over when the Reveal library is loaded, and when the service is started and stopped within their application.</li>\n</ul>\n</li>\n<li><strong>CocoaPods</strong><ul>\n<li>CocoaPods is a dependency management system for iOS and OSX projects. It automates the configuration of workspaces to manage 3rd party library dependencies in Xcode projects.</li>\n</ul>\n</li>\n</ol>\n<p>我们不希望使用一个三方工具，还要修改代码。所以我们重点关注第二个Dynamic Loading。</p>\n<p>下面是我直译版本：</p>\n<h2 id=\"在不修改工程项目的情况加载-Reveal\"><a href=\"#在不修改工程项目的情况加载-Reveal\" class=\"headerlink\" title=\"在不修改工程项目的情况加载 Reveal\"></a>在不修改工程项目的情况加载 Reveal</h2><p><strong>这个方法只是适用于项目运行在模拟器上</strong></p>\n<p>加载Reveal不需要修改工程项目是一个极好的办法。方便让你分析iOS App，不用去考虑修改工程所带来的隐患了。</p>\n<ol>\n<li>使用Xcode打开你的项目，选择 View(视图)-&gt;Navigators(导航)-&gt;Show Breakpoint Navigator(断点导航栏)</li>\n<li>在底部栏的左边有一个加号，点击添加符号断点(Symbolic Breakpoint) <img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/add-symbolic-breakpoint-menu.jpg\" alt=\"add-symbolic-breakpoint\"></li>\n<li>右键编辑断点 输入<code>UIApplicationMain</code> 到Symbol输入框中</li>\n<li>点击<code>add action</code>按钮，确认action设置为<code>Debugger Command</code></li>\n<li>复制下面的语句到输入框中 <code>expr (Class)NSClassFromString(@&quot;IBARevealLoader&quot;) == nil ? (void *)dlopen(&quot;/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib&quot;, 0x2) : ((void*)0)</code><ul>\n<li>需要确认你的Reveal安装路径是否一致</li>\n</ul>\n</li>\n<li>检查<code>Automatically continue after evaluating actions.</code>选项是否勾选<img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/setup-breakpoint-popup.jpg\" alt=\"setup-breakpoint-popup\"></li>\n<li>右键点击这个最新创建的断点选择<code>Move Breakpoint To</code>-&gt; <code>User</code><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/move-breakpoint-to-user.jpg\" alt=\"move-breakpoint-to-user\"></li>\n<li>在Xcode编译并运行你的应用在iOS模拟器上。如果一切步骤设置ok的话，你在 Reveal 上切换选择你的App就可以愉快的开始</li>\n</ol>\n<blockquote>\n<p><a href=\"http://support.revealapp.com/\">http://support.revealapp.com/</a></p>\n</blockquote>\n"},{"layout":"post","title":"hdu 4527","date":"2015-08-30T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\n[小明系列故事——玩转十滴水](http://acm.hdu.edu.cn/showproblem.php?pid=4527)\n\n题目大意：游戏是在一个6*6的方格内进行的，每个格子上有一滴水或者没有水滴。水滴分为四个等级1~4。初始时你有十滴水，通过把水加入格子内的水滴，会让水滴升1级。你也可以把水放到空格子内，这样会在这个格子里面产生一个1级的水滴。当水滴等级大于4时则会爆裂为四个小水滴，并向四个方向飞溅。每个飞溅的小水滴碰到其他水滴后会融入其中，使其升一级或者爆裂，以此类推。飞溅的小水滴互不干扰，运动速度相等(1秒可以移动一个格子的距离)。水滴爆裂后就消失掉了。\n\n![4527-1](http://acm.hdu.edu.cn/data/images/4527-1.jpg)\n\n\n输入：\n题目包含多组测试用例；\n对于每组数据，首先是6行，每行有6个整数数字，每个数字的范围为0~4；当数字为0时，表示空格子，当数字为1~4时，表示1~4级的水滴；\n然后第七行是一个整数m，表示有m个操作；接下来是m行，每行有两个整数x, y ，表示在(x,y)放入一滴水。\n特别说明：每次都是在全部的水滴静止后才进行下一次操作，也就是说只有在方格内没有任何飞溅的小水滴时才能放入一滴水。\n\n[Technical Specification]\n\n1 <= m <= 10\n\n1 <= x, y <= 6\n\n\n\n输出：\n对于每组测试数据，请输出m个操作之后6*6方格内水滴的样子，每组数据的输出后面跟着一个空行。\n\n\n思考：水滴的爆裂 和 水滴的飞溅一定同时进行，以保证每一个运动时刻游戏状态都是正确的！\n\n\n```\n//\n//  main.cpp\n//  hdu 4527\n//\n//  Created by miaoyou.gmy on 15/8/30.\n//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.\n//\n\n#include <iostream>\n#include <string.h>\n#include <queue>\nusing namespace std;\n\nstruct node{\n    int x,y,d;\n    node(int _x = 0,int _y = 0,int _d = 0):x(_x),y(_y),d(_d){}\n};\n\nconst int N(6);\nint maze[N][N];\nqueue<node> Q;\nconst int dir[4][2] = { {0,1},{1,0},{-1,0},{0,-1} };\n\nbool judge(const int x,const int y){\n    return (x>-1&&x<N&&y>-1&&y<N);\n}\n\nvoid output(){\n    for(int i=0;i<N;i++){\n        for(int j=0;j<N;j++){\n            if(j == 0) printf(\"%d\",maze[i][j]);\n            else printf(\" %d\",maze[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\n\nvoid deal(const int x,const int y){\n    maze[x][y] = 0;\n    for(int i=0;i<4;i++){\n        int xx = x+dir[i][0];\n        int yy = y+dir[i][1];\n        if(judge(xx, yy)){\n            Q.push(node(xx,yy,i));\n        }\n    }\n}\n\nvoid found(){\n    for(int i=0;i<N;i++){\n        for(int j=0;j<N;j++){\n            if(maze[i][j] > 4) deal(i, j);\n        }\n    }\n}\n\nvoid bfs(){\n    while (!Q.empty()) {\n        size_t size = Q.size();\n        while(size--){\n            node now = Q.front();\n            Q.pop();\n            \n            if(maze[now.x][now.y] > 0) maze[now.x][now.y]+=1;\n            else{\n                int afterx = now.x+dir[now.d][0];\n                int aftery = now.y+dir[now.d][1];\n                if(judge(afterx, aftery)){\n                    Q.push(node(afterx,aftery,now.d));\n                }\n            }\n        }\n        found();\n    }\n}\n\n\nint main(int argc, const char * argv[]) {\n//    freopen(\"in.txt\", \"r\", stdin);\n    int a,m,x,y;\n    while(~scanf(\"%d\",&a)){\n        maze[0][0] = a;\n        for(int i=1;i<N;i++){\n            scanf(\"%d\",&maze[0][i]);\n        }\n        \n        for(int i=1;i<N;i++){\n            for(int j=0;j<N;j++){\n                scanf(\"%d\",&maze[i][j]);\n            }\n        }\n        \n        scanf(\"%d\",&m);\n        while(m--){\n            scanf(\"%d%d\",&x,&y);\n            --x,--y;\n            if(maze[x][y] < 4) maze[x][y]+=1;\n            else{\n                deal(x,y);\n                bfs();\n            }\n        }\n        output();\n    }\n    return 0;\n}\n\n```\n\n![hdu-4527-accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-4527-accepted.png)\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。\n","source":"_posts/2015-08-30-hdu-4527.md","raw":"---\nlayout: post\ntitle: 'hdu 4527'\ndate: '2015-08-30'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - ACM\n     \nauthor: '778477'\n---\n\n\n[小明系列故事——玩转十滴水](http://acm.hdu.edu.cn/showproblem.php?pid=4527)\n\n题目大意：游戏是在一个6*6的方格内进行的，每个格子上有一滴水或者没有水滴。水滴分为四个等级1~4。初始时你有十滴水，通过把水加入格子内的水滴，会让水滴升1级。你也可以把水放到空格子内，这样会在这个格子里面产生一个1级的水滴。当水滴等级大于4时则会爆裂为四个小水滴，并向四个方向飞溅。每个飞溅的小水滴碰到其他水滴后会融入其中，使其升一级或者爆裂，以此类推。飞溅的小水滴互不干扰，运动速度相等(1秒可以移动一个格子的距离)。水滴爆裂后就消失掉了。\n\n![4527-1](http://acm.hdu.edu.cn/data/images/4527-1.jpg)\n\n\n输入：\n题目包含多组测试用例；\n对于每组数据，首先是6行，每行有6个整数数字，每个数字的范围为0~4；当数字为0时，表示空格子，当数字为1~4时，表示1~4级的水滴；\n然后第七行是一个整数m，表示有m个操作；接下来是m行，每行有两个整数x, y ，表示在(x,y)放入一滴水。\n特别说明：每次都是在全部的水滴静止后才进行下一次操作，也就是说只有在方格内没有任何飞溅的小水滴时才能放入一滴水。\n\n[Technical Specification]\n\n1 <= m <= 10\n\n1 <= x, y <= 6\n\n\n\n输出：\n对于每组测试数据，请输出m个操作之后6*6方格内水滴的样子，每组数据的输出后面跟着一个空行。\n\n\n思考：水滴的爆裂 和 水滴的飞溅一定同时进行，以保证每一个运动时刻游戏状态都是正确的！\n\n\n```\n//\n//  main.cpp\n//  hdu 4527\n//\n//  Created by miaoyou.gmy on 15/8/30.\n//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.\n//\n\n#include <iostream>\n#include <string.h>\n#include <queue>\nusing namespace std;\n\nstruct node{\n    int x,y,d;\n    node(int _x = 0,int _y = 0,int _d = 0):x(_x),y(_y),d(_d){}\n};\n\nconst int N(6);\nint maze[N][N];\nqueue<node> Q;\nconst int dir[4][2] = { {0,1},{1,0},{-1,0},{0,-1} };\n\nbool judge(const int x,const int y){\n    return (x>-1&&x<N&&y>-1&&y<N);\n}\n\nvoid output(){\n    for(int i=0;i<N;i++){\n        for(int j=0;j<N;j++){\n            if(j == 0) printf(\"%d\",maze[i][j]);\n            else printf(\" %d\",maze[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\n\nvoid deal(const int x,const int y){\n    maze[x][y] = 0;\n    for(int i=0;i<4;i++){\n        int xx = x+dir[i][0];\n        int yy = y+dir[i][1];\n        if(judge(xx, yy)){\n            Q.push(node(xx,yy,i));\n        }\n    }\n}\n\nvoid found(){\n    for(int i=0;i<N;i++){\n        for(int j=0;j<N;j++){\n            if(maze[i][j] > 4) deal(i, j);\n        }\n    }\n}\n\nvoid bfs(){\n    while (!Q.empty()) {\n        size_t size = Q.size();\n        while(size--){\n            node now = Q.front();\n            Q.pop();\n            \n            if(maze[now.x][now.y] > 0) maze[now.x][now.y]+=1;\n            else{\n                int afterx = now.x+dir[now.d][0];\n                int aftery = now.y+dir[now.d][1];\n                if(judge(afterx, aftery)){\n                    Q.push(node(afterx,aftery,now.d));\n                }\n            }\n        }\n        found();\n    }\n}\n\n\nint main(int argc, const char * argv[]) {\n//    freopen(\"in.txt\", \"r\", stdin);\n    int a,m,x,y;\n    while(~scanf(\"%d\",&a)){\n        maze[0][0] = a;\n        for(int i=1;i<N;i++){\n            scanf(\"%d\",&maze[0][i]);\n        }\n        \n        for(int i=1;i<N;i++){\n            for(int j=0;j<N;j++){\n                scanf(\"%d\",&maze[i][j]);\n            }\n        }\n        \n        scanf(\"%d\",&m);\n        while(m--){\n            scanf(\"%d%d\",&x,&y);\n            --x,--y;\n            if(maze[x][y] < 4) maze[x][y]+=1;\n            else{\n                deal(x,y);\n                bfs();\n            }\n        }\n        output();\n    }\n    return 0;\n}\n\n```\n\n![hdu-4527-accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-4527-accepted.png)\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。\n","slug":"2015-08-30-hdu-4527","published":1,"updated":"2015-10-01T08:18:41.000Z","_id":"cip3cw76o0009y8a35e6xj7ui","comments":1,"photos":[],"link":"","content":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4527\" target=\"_blank\" rel=\"external\">小明系列故事——玩转十滴水</a></p>\n<p>题目大意：游戏是在一个6*6的方格内进行的，每个格子上有一滴水或者没有水滴。水滴分为四个等级1~4。初始时你有十滴水，通过把水加入格子内的水滴，会让水滴升1级。你也可以把水放到空格子内，这样会在这个格子里面产生一个1级的水滴。当水滴等级大于4时则会爆裂为四个小水滴，并向四个方向飞溅。每个飞溅的小水滴碰到其他水滴后会融入其中，使其升一级或者爆裂，以此类推。飞溅的小水滴互不干扰，运动速度相等(1秒可以移动一个格子的距离)。水滴爆裂后就消失掉了。</p>\n<p><img src=\"http://acm.hdu.edu.cn/data/images/4527-1.jpg\" alt=\"4527-1\"></p>\n<p>输入：<br>题目包含多组测试用例；<br>对于每组数据，首先是6行，每行有6个整数数字，每个数字的范围为0~4；当数字为0时，表示空格子，当数字为1~4时，表示1~4级的水滴；<br>然后第七行是一个整数m，表示有m个操作；接下来是m行，每行有两个整数x, y ，表示在(x,y)放入一滴水。<br>特别说明：每次都是在全部的水滴静止后才进行下一次操作，也就是说只有在方格内没有任何飞溅的小水滴时才能放入一滴水。</p>\n<p>[Technical Specification]</p>\n<p>1 &lt;= m &lt;= 10</p>\n<p>1 &lt;= x, y &lt;= 6</p>\n<p>输出：<br>对于每组测试数据，请输出m个操作之后6*6方格内水滴的样子，每组数据的输出后面跟着一个空行。</p>\n<p>思考：水滴的爆裂 和 水滴的飞溅一定同时进行，以保证每一个运动时刻游戏状态都是正确的！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  main.cpp</span><br><span class=\"line\">//  hdu 4527</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by miaoyou.gmy on 15/8/30.</span><br><span class=\"line\">//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int x,y,d;</span><br><span class=\"line\">    node(int _x = 0,int _y = 0,int _d = 0):x(_x),y(_y),d(_d)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N(6);</span><br><span class=\"line\">int maze[N][N];</span><br><span class=\"line\">queue&lt;node&gt; Q;</span><br><span class=\"line\">const int dir[4][2] = &#123; &#123;0,1&#125;,&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,-1&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool judge(const int x,const int y)&#123;</span><br><span class=\"line\">    return (x&gt;-1&amp;&amp;x&lt;N&amp;&amp;y&gt;-1&amp;&amp;y&lt;N);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void output()&#123;</span><br><span class=\"line\">    for(int i=0;i&lt;N;i++)&#123;</span><br><span class=\"line\">        for(int j=0;j&lt;N;j++)&#123;</span><br><span class=\"line\">            if(j == 0) printf(&quot;%d&quot;,maze[i][j]);</span><br><span class=\"line\">            else printf(&quot; %d&quot;,maze[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void deal(const int x,const int y)&#123;</span><br><span class=\"line\">    maze[x][y] = 0;</span><br><span class=\"line\">    for(int i=0;i&lt;4;i++)&#123;</span><br><span class=\"line\">        int xx = x+dir[i][0];</span><br><span class=\"line\">        int yy = y+dir[i][1];</span><br><span class=\"line\">        if(judge(xx, yy))&#123;</span><br><span class=\"line\">            Q.push(node(xx,yy,i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void found()&#123;</span><br><span class=\"line\">    for(int i=0;i&lt;N;i++)&#123;</span><br><span class=\"line\">        for(int j=0;j&lt;N;j++)&#123;</span><br><span class=\"line\">            if(maze[i][j] &gt; 4) deal(i, j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void bfs()&#123;</span><br><span class=\"line\">    while (!Q.empty()) &#123;</span><br><span class=\"line\">        size_t size = Q.size();</span><br><span class=\"line\">        while(size--)&#123;</span><br><span class=\"line\">            node now = Q.front();</span><br><span class=\"line\">            Q.pop();</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(maze[now.x][now.y] &gt; 0) maze[now.x][now.y]+=1;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                int afterx = now.x+dir[now.d][0];</span><br><span class=\"line\">                int aftery = now.y+dir[now.d][1];</span><br><span class=\"line\">                if(judge(afterx, aftery))&#123;</span><br><span class=\"line\">                    Q.push(node(afterx,aftery,now.d));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        found();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">//    freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class=\"line\">    int a,m,x,y;</span><br><span class=\"line\">    while(~scanf(&quot;%d&quot;,&amp;a))&#123;</span><br><span class=\"line\">        maze[0][0] = a;</span><br><span class=\"line\">        for(int i=1;i&lt;N;i++)&#123;</span><br><span class=\"line\">            scanf(&quot;%d&quot;,&amp;maze[0][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i=1;i&lt;N;i++)&#123;</span><br><span class=\"line\">            for(int j=0;j&lt;N;j++)&#123;</span><br><span class=\"line\">                scanf(&quot;%d&quot;,&amp;maze[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;m);</span><br><span class=\"line\">        while(m--)&#123;</span><br><span class=\"line\">            scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class=\"line\">            --x,--y;</span><br><span class=\"line\">            if(maze[x][y] &lt; 4) maze[x][y]+=1;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                deal(x,y);</span><br><span class=\"line\">                bfs();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-4527-accepted.png\" alt=\"hdu-4527-accepted\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n","excerpt":"","more":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4527\">小明系列故事——玩转十滴水</a></p>\n<p>题目大意：游戏是在一个6*6的方格内进行的，每个格子上有一滴水或者没有水滴。水滴分为四个等级1~4。初始时你有十滴水，通过把水加入格子内的水滴，会让水滴升1级。你也可以把水放到空格子内，这样会在这个格子里面产生一个1级的水滴。当水滴等级大于4时则会爆裂为四个小水滴，并向四个方向飞溅。每个飞溅的小水滴碰到其他水滴后会融入其中，使其升一级或者爆裂，以此类推。飞溅的小水滴互不干扰，运动速度相等(1秒可以移动一个格子的距离)。水滴爆裂后就消失掉了。</p>\n<p><img src=\"http://acm.hdu.edu.cn/data/images/4527-1.jpg\" alt=\"4527-1\"></p>\n<p>输入：<br>题目包含多组测试用例；<br>对于每组数据，首先是6行，每行有6个整数数字，每个数字的范围为0~4；当数字为0时，表示空格子，当数字为1~4时，表示1~4级的水滴；<br>然后第七行是一个整数m，表示有m个操作；接下来是m行，每行有两个整数x, y ，表示在(x,y)放入一滴水。<br>特别说明：每次都是在全部的水滴静止后才进行下一次操作，也就是说只有在方格内没有任何飞溅的小水滴时才能放入一滴水。</p>\n<p>[Technical Specification]</p>\n<p>1 &lt;= m &lt;= 10</p>\n<p>1 &lt;= x, y &lt;= 6</p>\n<p>输出：<br>对于每组测试数据，请输出m个操作之后6*6方格内水滴的样子，每组数据的输出后面跟着一个空行。</p>\n<p>思考：水滴的爆裂 和 水滴的飞溅一定同时进行，以保证每一个运动时刻游戏状态都是正确的！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  main.cpp</span><br><span class=\"line\">//  hdu 4527</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by miaoyou.gmy on 15/8/30.</span><br><span class=\"line\">//  Copyright (c) 2015年 miaoyou.gmy. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int x,y,d;</span><br><span class=\"line\">    node(int _x = 0,int _y = 0,int _d = 0):x(_x),y(_y),d(_d)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N(6);</span><br><span class=\"line\">int maze[N][N];</span><br><span class=\"line\">queue&lt;node&gt; Q;</span><br><span class=\"line\">const int dir[4][2] = &#123; &#123;0,1&#125;,&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,-1&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool judge(const int x,const int y)&#123;</span><br><span class=\"line\">    return (x&gt;-1&amp;&amp;x&lt;N&amp;&amp;y&gt;-1&amp;&amp;y&lt;N);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void output()&#123;</span><br><span class=\"line\">    for(int i=0;i&lt;N;i++)&#123;</span><br><span class=\"line\">        for(int j=0;j&lt;N;j++)&#123;</span><br><span class=\"line\">            if(j == 0) printf(&quot;%d&quot;,maze[i][j]);</span><br><span class=\"line\">            else printf(&quot; %d&quot;,maze[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void deal(const int x,const int y)&#123;</span><br><span class=\"line\">    maze[x][y] = 0;</span><br><span class=\"line\">    for(int i=0;i&lt;4;i++)&#123;</span><br><span class=\"line\">        int xx = x+dir[i][0];</span><br><span class=\"line\">        int yy = y+dir[i][1];</span><br><span class=\"line\">        if(judge(xx, yy))&#123;</span><br><span class=\"line\">            Q.push(node(xx,yy,i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void found()&#123;</span><br><span class=\"line\">    for(int i=0;i&lt;N;i++)&#123;</span><br><span class=\"line\">        for(int j=0;j&lt;N;j++)&#123;</span><br><span class=\"line\">            if(maze[i][j] &gt; 4) deal(i, j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void bfs()&#123;</span><br><span class=\"line\">    while (!Q.empty()) &#123;</span><br><span class=\"line\">        size_t size = Q.size();</span><br><span class=\"line\">        while(size--)&#123;</span><br><span class=\"line\">            node now = Q.front();</span><br><span class=\"line\">            Q.pop();</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(maze[now.x][now.y] &gt; 0) maze[now.x][now.y]+=1;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                int afterx = now.x+dir[now.d][0];</span><br><span class=\"line\">                int aftery = now.y+dir[now.d][1];</span><br><span class=\"line\">                if(judge(afterx, aftery))&#123;</span><br><span class=\"line\">                    Q.push(node(afterx,aftery,now.d));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        found();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char * argv[]) &#123;</span><br><span class=\"line\">//    freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class=\"line\">    int a,m,x,y;</span><br><span class=\"line\">    while(~scanf(&quot;%d&quot;,&amp;a))&#123;</span><br><span class=\"line\">        maze[0][0] = a;</span><br><span class=\"line\">        for(int i=1;i&lt;N;i++)&#123;</span><br><span class=\"line\">            scanf(&quot;%d&quot;,&amp;maze[0][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i=1;i&lt;N;i++)&#123;</span><br><span class=\"line\">            for(int j=0;j&lt;N;j++)&#123;</span><br><span class=\"line\">                scanf(&quot;%d&quot;,&amp;maze[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;m);</span><br><span class=\"line\">        while(m--)&#123;</span><br><span class=\"line\">            scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class=\"line\">            --x,--y;</span><br><span class=\"line\">            if(maze[x][y] &lt; 4) maze[x][y]+=1;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                deal(x,y);</span><br><span class=\"line\">                bfs();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/hdu-4527-accepted.png\" alt=\"hdu-4527-accepted\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n"},{"layout":"post","title":"Vaild Number","date":"2015-10-23T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n[Vaild Number](https://leetcode.com/submissions/detail/43806015/)\n\n判断给定的一个字符串是否是数字。\n\nNote: 题目对于数字的合法定义没有给出具体限定，你应该根据判断返回结果来调整自己的程序。 (这个超坑的，我差不多错误提交了8次。有些后台TestCase的合理性是有待讨论的[吐槽传送门](https://leetcode.com/discuss/3303/the-worst-problem-i-have-ever-met-in-this-oj))\n\n\n言归正传。这类题目，我们一般称为 模拟题。是因为该题目没有对应具体算法和数据结构，我们只能按照题目描述的分支情况，模拟实现。其实，这个题目我在杭电OJ上做过了。。。\n\n[Is It a Number](http://acm.hdu.edu.cn/showproblem.php?pid=1409)\n\n![accetped](https://raw.githubusercontent.com/778477/778477.github.io/master/img/hud-1409-accepted.png)\n\n当时我就是当模拟题做的，现在看来这种解法不太优雅。 看了一下 Discuss，发现大多数人使用 DFA(有限状态自动机)。城！会！玩！\n\n按照这个思路，我们来动手实践一下。 首先是状态的划分，因为 鉴别是否是数字，字符集{'0'-'9','+','-','.','E'}。根据数字的定义，状态是有限的。 所以我们大体划分出这么集中状态：\n\n\t1. UnkownState 起始状态，没有任何字符输入。能接受的下一步字符为 数字|正负号|小数点\n\t2. NumberState 输入数字状态，能接受的下一步字符为 数字|小数点|科学计数法(E,e)\n\t3. OnlyNumberState 数字接着输入小数点状态，能接受下一步字符为 数字|科学计数法(E,e)\n\t4. OperatorState 输入运算法状态，能接受下一步字符为 数字|小数点\n\t5. DecimalPointState 输入小数点状态，能接受下一步字符为 数字\n\t6. ScientificState 输入科学计数法状态，能接受下一步字符为 数字|正负号\n\t7. NoscientificState 科学计数法接着输入正负号状态，能接受下一步字符为 数字\n\t8. IllegalState 非法输入状态 \n\t9. EndState 终态 能接受下一步字符 为数字\n\n\n这里的状态命名比较随意。 状态之间的转移是关键。最后，我们认为 2，3，9状态为合法状态。停留在其他状态的输入情况，不能认为是数字。\n\n```\n#include <stdio.h>\n#include <string.h>\n\ntypedef enum State{\n    UnkownState  = 0,       \n    NumberState = 1,         \n    OnlyNumberState = 2,\t \n    OperatorState = 3,      \n    DecimalPointState = 4,  \n    ScientificState = 5,    \n    NoscientificState = 6, \n    IllegalState = 7,\n    EndState,\n}State;\n\nint isNumber(char* s) {\n    State state = UnkownState;\n    while (*s == ' ')  s++;\n    char *p = (s+strlen(s)-1);\n    while (*p == ' ')  --p;\n    *(p+1) = 0;\n\n\n    while (*s) {\n        switch (state) {\n            case UnkownState:{\n                state = IllegalState;\n                if(*s == '+' || *s == '-') state = OperatorState;\n                if(*s >= '0' && *s <= '9') state = NumberState;\n                if(*s == '.') state = DecimalPointState;\n                break;\n            }\n            case NumberState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = NumberState;\n                if(*s == '.') state = OnlyNumberState;\n                if(*s == 'e' || *s == 'E') state = ScientificState;\n                break;\n            }\n            case OnlyNumberState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = OnlyNumberState;\n                if(*s == 'e' || *s == 'E') state = ScientificState;\n                break;\n            }\n            case OperatorState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = NumberState;\n                if(*s == '.' ) state = DecimalPointState;\n                break;\n            }\n            case DecimalPointState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = OnlyNumberState;\n                break;\n            }\n            case ScientificState:{\n                state = IllegalState;\n                if(*s == '+' || *s == '-') state = NoscientificState;\n                if(*s >= '0' && *s <= '9') state = EndState;\n                break;\n            }\n            case NoscientificState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <='9') state = EndState;\n                break;\n            }\n            case EndState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <='9') state = EndState;\n                break;\n            }\n            case IllegalState:{\n                return 0;\n            }\n        }\n        s++;\n    }\n\n\n    return (state == NumberState || state == OnlyNumberState || state == EndState);\n\n}\n\nint main(){\n    char str[1024];\n    while(gets(str)){\n        printf(\"%s %s\\n\",str,isNumber(str) ? \"is a Number\":\"isn't a Number\");\n    }\n    return 0;\n}\n\n```\n\n![accepeted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/vaild-number-accepted.png)","source":"_posts/2015-10-23-Valid-Number.md","raw":"---\nlayout: post\ntitle: 'Vaild Number'\ndate: '2015-10-23'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n[Vaild Number](https://leetcode.com/submissions/detail/43806015/)\n\n判断给定的一个字符串是否是数字。\n\nNote: 题目对于数字的合法定义没有给出具体限定，你应该根据判断返回结果来调整自己的程序。 (这个超坑的，我差不多错误提交了8次。有些后台TestCase的合理性是有待讨论的[吐槽传送门](https://leetcode.com/discuss/3303/the-worst-problem-i-have-ever-met-in-this-oj))\n\n\n言归正传。这类题目，我们一般称为 模拟题。是因为该题目没有对应具体算法和数据结构，我们只能按照题目描述的分支情况，模拟实现。其实，这个题目我在杭电OJ上做过了。。。\n\n[Is It a Number](http://acm.hdu.edu.cn/showproblem.php?pid=1409)\n\n![accetped](https://raw.githubusercontent.com/778477/778477.github.io/master/img/hud-1409-accepted.png)\n\n当时我就是当模拟题做的，现在看来这种解法不太优雅。 看了一下 Discuss，发现大多数人使用 DFA(有限状态自动机)。城！会！玩！\n\n按照这个思路，我们来动手实践一下。 首先是状态的划分，因为 鉴别是否是数字，字符集{'0'-'9','+','-','.','E'}。根据数字的定义，状态是有限的。 所以我们大体划分出这么集中状态：\n\n\t1. UnkownState 起始状态，没有任何字符输入。能接受的下一步字符为 数字|正负号|小数点\n\t2. NumberState 输入数字状态，能接受的下一步字符为 数字|小数点|科学计数法(E,e)\n\t3. OnlyNumberState 数字接着输入小数点状态，能接受下一步字符为 数字|科学计数法(E,e)\n\t4. OperatorState 输入运算法状态，能接受下一步字符为 数字|小数点\n\t5. DecimalPointState 输入小数点状态，能接受下一步字符为 数字\n\t6. ScientificState 输入科学计数法状态，能接受下一步字符为 数字|正负号\n\t7. NoscientificState 科学计数法接着输入正负号状态，能接受下一步字符为 数字\n\t8. IllegalState 非法输入状态 \n\t9. EndState 终态 能接受下一步字符 为数字\n\n\n这里的状态命名比较随意。 状态之间的转移是关键。最后，我们认为 2，3，9状态为合法状态。停留在其他状态的输入情况，不能认为是数字。\n\n```\n#include <stdio.h>\n#include <string.h>\n\ntypedef enum State{\n    UnkownState  = 0,       \n    NumberState = 1,         \n    OnlyNumberState = 2,\t \n    OperatorState = 3,      \n    DecimalPointState = 4,  \n    ScientificState = 5,    \n    NoscientificState = 6, \n    IllegalState = 7,\n    EndState,\n}State;\n\nint isNumber(char* s) {\n    State state = UnkownState;\n    while (*s == ' ')  s++;\n    char *p = (s+strlen(s)-1);\n    while (*p == ' ')  --p;\n    *(p+1) = 0;\n\n\n    while (*s) {\n        switch (state) {\n            case UnkownState:{\n                state = IllegalState;\n                if(*s == '+' || *s == '-') state = OperatorState;\n                if(*s >= '0' && *s <= '9') state = NumberState;\n                if(*s == '.') state = DecimalPointState;\n                break;\n            }\n            case NumberState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = NumberState;\n                if(*s == '.') state = OnlyNumberState;\n                if(*s == 'e' || *s == 'E') state = ScientificState;\n                break;\n            }\n            case OnlyNumberState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = OnlyNumberState;\n                if(*s == 'e' || *s == 'E') state = ScientificState;\n                break;\n            }\n            case OperatorState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = NumberState;\n                if(*s == '.' ) state = DecimalPointState;\n                break;\n            }\n            case DecimalPointState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <= '9') state = OnlyNumberState;\n                break;\n            }\n            case ScientificState:{\n                state = IllegalState;\n                if(*s == '+' || *s == '-') state = NoscientificState;\n                if(*s >= '0' && *s <= '9') state = EndState;\n                break;\n            }\n            case NoscientificState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <='9') state = EndState;\n                break;\n            }\n            case EndState:{\n                state = IllegalState;\n                if(*s >= '0' && *s <='9') state = EndState;\n                break;\n            }\n            case IllegalState:{\n                return 0;\n            }\n        }\n        s++;\n    }\n\n\n    return (state == NumberState || state == OnlyNumberState || state == EndState);\n\n}\n\nint main(){\n    char str[1024];\n    while(gets(str)){\n        printf(\"%s %s\\n\",str,isNumber(str) ? \"is a Number\":\"isn't a Number\");\n    }\n    return 0;\n}\n\n```\n\n![accepeted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/vaild-number-accepted.png)","slug":"2015-10-23-Valid-Number","published":1,"updated":"2015-10-23T04:38:31.000Z","_id":"cip3cw76q000cy8a3fnghlvdl","comments":1,"photos":[],"link":"","content":"<p><a href=\"https://leetcode.com/submissions/detail/43806015/\" target=\"_blank\" rel=\"external\">Vaild Number</a></p>\n<p>判断给定的一个字符串是否是数字。</p>\n<p>Note: 题目对于数字的合法定义没有给出具体限定，你应该根据判断返回结果来调整自己的程序。 (这个超坑的，我差不多错误提交了8次。有些后台TestCase的合理性是有待讨论的<a href=\"https://leetcode.com/discuss/3303/the-worst-problem-i-have-ever-met-in-this-oj\" target=\"_blank\" rel=\"external\">吐槽传送门</a>)</p>\n<p>言归正传。这类题目，我们一般称为 模拟题。是因为该题目没有对应具体算法和数据结构，我们只能按照题目描述的分支情况，模拟实现。其实，这个题目我在杭电OJ上做过了。。。</p>\n<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1409\" target=\"_blank\" rel=\"external\">Is It a Number</a></p>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/hud-1409-accepted.png\" alt=\"accetped\"></p>\n<p>当时我就是当模拟题做的，现在看来这种解法不太优雅。 看了一下 Discuss，发现大多数人使用 DFA(有限状态自动机)。城！会！玩！</p>\n<p>按照这个思路，我们来动手实践一下。 首先是状态的划分，因为 鉴别是否是数字，字符集{‘0’-‘9’,’+’,’-‘,’.’,’E’}。根据数字的定义，状态是有限的。 所以我们大体划分出这么集中状态：</p>\n<pre><code>1. UnkownState 起始状态，没有任何字符输入。能接受的下一步字符为 数字|正负号|小数点\n2. NumberState 输入数字状态，能接受的下一步字符为 数字|小数点|科学计数法(E,e)\n3. OnlyNumberState 数字接着输入小数点状态，能接受下一步字符为 数字|科学计数法(E,e)\n4. OperatorState 输入运算法状态，能接受下一步字符为 数字|小数点\n5. DecimalPointState 输入小数点状态，能接受下一步字符为 数字\n6. ScientificState 输入科学计数法状态，能接受下一步字符为 数字|正负号\n7. NoscientificState 科学计数法接着输入正负号状态，能接受下一步字符为 数字\n8. IllegalState 非法输入状态 \n9. EndState 终态 能接受下一步字符 为数字\n</code></pre><p>这里的状态命名比较随意。 状态之间的转移是关键。最后，我们认为 2，3，9状态为合法状态。停留在其他状态的输入情况，不能认为是数字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef enum State&#123;</span><br><span class=\"line\">    UnkownState  = 0,       </span><br><span class=\"line\">    NumberState = 1,         </span><br><span class=\"line\">    OnlyNumberState = 2,\t </span><br><span class=\"line\">    OperatorState = 3,      </span><br><span class=\"line\">    DecimalPointState = 4,  </span><br><span class=\"line\">    ScientificState = 5,    </span><br><span class=\"line\">    NoscientificState = 6, </span><br><span class=\"line\">    IllegalState = 7,</span><br><span class=\"line\">    EndState,</span><br><span class=\"line\">&#125;State;</span><br><span class=\"line\"></span><br><span class=\"line\">int isNumber(char* s) &#123;</span><br><span class=\"line\">    State state = UnkownState;</span><br><span class=\"line\">    while (*s == &apos; &apos;)  s++;</span><br><span class=\"line\">    char *p = (s+strlen(s)-1);</span><br><span class=\"line\">    while (*p == &apos; &apos;)  --p;</span><br><span class=\"line\">    *(p+1) = 0;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    while (*s) &#123;</span><br><span class=\"line\">        switch (state) &#123;</span><br><span class=\"line\">            case UnkownState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s == &apos;+&apos; || *s == &apos;-&apos;) state = OperatorState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = NumberState;</span><br><span class=\"line\">                if(*s == &apos;.&apos;) state = DecimalPointState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case NumberState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = NumberState;</span><br><span class=\"line\">                if(*s == &apos;.&apos;) state = OnlyNumberState;</span><br><span class=\"line\">                if(*s == &apos;e&apos; || *s == &apos;E&apos;) state = ScientificState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case OnlyNumberState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = OnlyNumberState;</span><br><span class=\"line\">                if(*s == &apos;e&apos; || *s == &apos;E&apos;) state = ScientificState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case OperatorState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = NumberState;</span><br><span class=\"line\">                if(*s == &apos;.&apos; ) state = DecimalPointState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case DecimalPointState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = OnlyNumberState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case ScientificState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s == &apos;+&apos; || *s == &apos;-&apos;) state = NoscientificState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = EndState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case NoscientificState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;=&apos;9&apos;) state = EndState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case EndState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;=&apos;9&apos;) state = EndState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case IllegalState:&#123;</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return (state == NumberState || state == OnlyNumberState || state == EndState);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    char str[1024];</span><br><span class=\"line\">    while(gets(str))&#123;</span><br><span class=\"line\">        printf(&quot;%s %s\\n&quot;,str,isNumber(str) ? &quot;is a Number&quot;:&quot;isn&apos;t a Number&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/vaild-number-accepted.png\" alt=\"accepeted\"></p>\n","excerpt":"","more":"<p><a href=\"https://leetcode.com/submissions/detail/43806015/\">Vaild Number</a></p>\n<p>判断给定的一个字符串是否是数字。</p>\n<p>Note: 题目对于数字的合法定义没有给出具体限定，你应该根据判断返回结果来调整自己的程序。 (这个超坑的，我差不多错误提交了8次。有些后台TestCase的合理性是有待讨论的<a href=\"https://leetcode.com/discuss/3303/the-worst-problem-i-have-ever-met-in-this-oj\">吐槽传送门</a>)</p>\n<p>言归正传。这类题目，我们一般称为 模拟题。是因为该题目没有对应具体算法和数据结构，我们只能按照题目描述的分支情况，模拟实现。其实，这个题目我在杭电OJ上做过了。。。</p>\n<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1409\">Is It a Number</a></p>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/hud-1409-accepted.png\" alt=\"accetped\"></p>\n<p>当时我就是当模拟题做的，现在看来这种解法不太优雅。 看了一下 Discuss，发现大多数人使用 DFA(有限状态自动机)。城！会！玩！</p>\n<p>按照这个思路，我们来动手实践一下。 首先是状态的划分，因为 鉴别是否是数字，字符集{‘0’-‘9’,’+’,’-‘,’.’,’E’}。根据数字的定义，状态是有限的。 所以我们大体划分出这么集中状态：</p>\n<pre><code>1. UnkownState 起始状态，没有任何字符输入。能接受的下一步字符为 数字|正负号|小数点\n2. NumberState 输入数字状态，能接受的下一步字符为 数字|小数点|科学计数法(E,e)\n3. OnlyNumberState 数字接着输入小数点状态，能接受下一步字符为 数字|科学计数法(E,e)\n4. OperatorState 输入运算法状态，能接受下一步字符为 数字|小数点\n5. DecimalPointState 输入小数点状态，能接受下一步字符为 数字\n6. ScientificState 输入科学计数法状态，能接受下一步字符为 数字|正负号\n7. NoscientificState 科学计数法接着输入正负号状态，能接受下一步字符为 数字\n8. IllegalState 非法输入状态 \n9. EndState 终态 能接受下一步字符 为数字\n</code></pre><p>这里的状态命名比较随意。 状态之间的转移是关键。最后，我们认为 2，3，9状态为合法状态。停留在其他状态的输入情况，不能认为是数字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef enum State&#123;</span><br><span class=\"line\">    UnkownState  = 0,       </span><br><span class=\"line\">    NumberState = 1,         </span><br><span class=\"line\">    OnlyNumberState = 2,\t </span><br><span class=\"line\">    OperatorState = 3,      </span><br><span class=\"line\">    DecimalPointState = 4,  </span><br><span class=\"line\">    ScientificState = 5,    </span><br><span class=\"line\">    NoscientificState = 6, </span><br><span class=\"line\">    IllegalState = 7,</span><br><span class=\"line\">    EndState,</span><br><span class=\"line\">&#125;State;</span><br><span class=\"line\"></span><br><span class=\"line\">int isNumber(char* s) &#123;</span><br><span class=\"line\">    State state = UnkownState;</span><br><span class=\"line\">    while (*s == &apos; &apos;)  s++;</span><br><span class=\"line\">    char *p = (s+strlen(s)-1);</span><br><span class=\"line\">    while (*p == &apos; &apos;)  --p;</span><br><span class=\"line\">    *(p+1) = 0;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    while (*s) &#123;</span><br><span class=\"line\">        switch (state) &#123;</span><br><span class=\"line\">            case UnkownState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s == &apos;+&apos; || *s == &apos;-&apos;) state = OperatorState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = NumberState;</span><br><span class=\"line\">                if(*s == &apos;.&apos;) state = DecimalPointState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case NumberState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = NumberState;</span><br><span class=\"line\">                if(*s == &apos;.&apos;) state = OnlyNumberState;</span><br><span class=\"line\">                if(*s == &apos;e&apos; || *s == &apos;E&apos;) state = ScientificState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case OnlyNumberState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = OnlyNumberState;</span><br><span class=\"line\">                if(*s == &apos;e&apos; || *s == &apos;E&apos;) state = ScientificState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case OperatorState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = NumberState;</span><br><span class=\"line\">                if(*s == &apos;.&apos; ) state = DecimalPointState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case DecimalPointState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = OnlyNumberState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case ScientificState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s == &apos;+&apos; || *s == &apos;-&apos;) state = NoscientificState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;= &apos;9&apos;) state = EndState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case NoscientificState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;=&apos;9&apos;) state = EndState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case EndState:&#123;</span><br><span class=\"line\">                state = IllegalState;</span><br><span class=\"line\">                if(*s &gt;= &apos;0&apos; &amp;&amp; *s &lt;=&apos;9&apos;) state = EndState;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            case IllegalState:&#123;</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return (state == NumberState || state == OnlyNumberState || state == EndState);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    char str[1024];</span><br><span class=\"line\">    while(gets(str))&#123;</span><br><span class=\"line\">        printf(&quot;%s %s\\n&quot;,str,isNumber(str) ? &quot;is a Number&quot;:&quot;isn&apos;t a Number&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/vaild-number-accepted.png\" alt=\"accepeted\"></p>\n"},{"layout":"post","title":"为iOS建立 Travis CI","date":"2015-11-24T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n[为iOS建立 Travis CI](http://objccn.io/issue-6-5/)\n\n我给自己的GMYHotSpotView项目 关联了这个 持续集成的工具 .travis.yml文件编写如下\n\n```\nlanguage: objective-c\nscript: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView\n```\n\n\n[Building an Objective-C Project](https://docs.travis-ci.com/user/languages/objective-c/)\n\n我后面遇到的一个比较麻烦的问题是：\n\n```\nCheck dependencies\nCode Sign error: No code signing identities found: No valid signing identities.\n```\n\n最后修改.travis.yml文件，主要是新增了 ** CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO **\n\n```\n## http://lint.travis-ci.org/\nlanguage: objective-c\nxcode_workspace: GMYHotSpotView.xcworkspace\nxcode_scheme: GMYHotSpotView\nscript: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n```\n\n![CI](https://raw.githubusercontent.com/778477/778477.github.io/master/img/travis-ci1.png)\n\n\n指示灯是可以拿来使用的  [![Build Status](https://travis-ci.org/778477/GMYHotSpotView.svg?branch=master)](https://travis-ci.org/778477/GMYHotSpotView)\n\n\n~~GitHub上还有一个很完善的YAML配置 https://github.com/BoltsFramework/Bolts-iOS/blob/master/.travis.yml~~ **这个没啥卵用**\n\n\n\n> [构建iOS持续集成平台（三）——CI服务器与自动化部署 @infoQ](http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part3)\n\n\n> http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error\n\n> http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error","source":"_posts/2015-11-24-为iOS建立 Travis CI.md","raw":"---\nlayout: post\ntitle: '为iOS建立 Travis CI'\ndate: '2015-11-24'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - iOS\n     \nauthor: '778477'\n---\n\n[为iOS建立 Travis CI](http://objccn.io/issue-6-5/)\n\n我给自己的GMYHotSpotView项目 关联了这个 持续集成的工具 .travis.yml文件编写如下\n\n```\nlanguage: objective-c\nscript: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView\n```\n\n\n[Building an Objective-C Project](https://docs.travis-ci.com/user/languages/objective-c/)\n\n我后面遇到的一个比较麻烦的问题是：\n\n```\nCheck dependencies\nCode Sign error: No code signing identities found: No valid signing identities.\n```\n\n最后修改.travis.yml文件，主要是新增了 ** CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO **\n\n```\n## http://lint.travis-ci.org/\nlanguage: objective-c\nxcode_workspace: GMYHotSpotView.xcworkspace\nxcode_scheme: GMYHotSpotView\nscript: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO\n```\n\n![CI](https://raw.githubusercontent.com/778477/778477.github.io/master/img/travis-ci1.png)\n\n\n指示灯是可以拿来使用的  [![Build Status](https://travis-ci.org/778477/GMYHotSpotView.svg?branch=master)](https://travis-ci.org/778477/GMYHotSpotView)\n\n\n~~GitHub上还有一个很完善的YAML配置 https://github.com/BoltsFramework/Bolts-iOS/blob/master/.travis.yml~~ **这个没啥卵用**\n\n\n\n> [构建iOS持续集成平台（三）——CI服务器与自动化部署 @infoQ](http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part3)\n\n\n> http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error\n\n> http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error","slug":"2015-11-24-为iOS建立 Travis CI","published":1,"updated":"2015-11-27T03:18:01.000Z","_id":"cip3cw76s000ey8a3q6fy7txp","comments":1,"photos":[],"link":"","content":"<p><a href=\"http://objccn.io/issue-6-5/\" target=\"_blank\" rel=\"external\">为iOS建立 Travis CI</a></p>\n<p>我给自己的GMYHotSpotView项目 关联了这个 持续集成的工具 .travis.yml文件编写如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: objective-c</span><br><span class=\"line\">script: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://docs.travis-ci.com/user/languages/objective-c/\" target=\"_blank\" rel=\"external\">Building an Objective-C Project</a></p>\n<p>我后面遇到的一个比较麻烦的问题是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Check dependencies</span><br><span class=\"line\">Code Sign error: No code signing identities found: No valid signing identities.</span><br></pre></td></tr></table></figure>\n<p>最后修改.travis.yml文件，主要是新增了 <strong> CODE_SIGN_IDENTITY=”” CODE_SIGNING_REQUIRED=NO </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## http://lint.travis-ci.org/</span><br><span class=\"line\">language: objective-c</span><br><span class=\"line\">xcode_workspace: GMYHotSpotView.xcworkspace</span><br><span class=\"line\">xcode_scheme: GMYHotSpotView</span><br><span class=\"line\">script: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView CODE_SIGN_IDENTITY=&quot;&quot; CODE_SIGNING_REQUIRED=NO</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/travis-ci1.png\" alt=\"CI\"></p>\n<p>指示灯是可以拿来使用的  <a href=\"https://travis-ci.org/778477/GMYHotSpotView\" target=\"_blank\" rel=\"external\"><img src=\"https://travis-ci.org/778477/GMYHotSpotView.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p><del>GitHub上还有一个很完善的YAML配置 <a href=\"https://github.com/BoltsFramework/Bolts-iOS/blob/master/.travis.yml\" target=\"_blank\" rel=\"external\">https://github.com/BoltsFramework/Bolts-iOS/blob/master/.travis.yml</a></del> <strong>这个没啥卵用</strong></p>\n<blockquote>\n<p><a href=\"http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part3\" target=\"_blank\" rel=\"external\">构建iOS持续集成平台（三）——CI服务器与自动化部署 @infoQ</a></p>\n<p><a href=\"http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error</a></p>\n<p><a href=\"http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error</a></p>\n</blockquote>\n","excerpt":"","more":"<p><a href=\"http://objccn.io/issue-6-5/\">为iOS建立 Travis CI</a></p>\n<p>我给自己的GMYHotSpotView项目 关联了这个 持续集成的工具 .travis.yml文件编写如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: objective-c</span><br><span class=\"line\">script: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://docs.travis-ci.com/user/languages/objective-c/\">Building an Objective-C Project</a></p>\n<p>我后面遇到的一个比较麻烦的问题是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Check dependencies</span><br><span class=\"line\">Code Sign error: No code signing identities found: No valid signing identities.</span><br></pre></td></tr></table></figure>\n<p>最后修改.travis.yml文件，主要是新增了 <strong> CODE_SIGN_IDENTITY=”” CODE_SIGNING_REQUIRED=NO </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## http://lint.travis-ci.org/</span><br><span class=\"line\">language: objective-c</span><br><span class=\"line\">xcode_workspace: GMYHotSpotView.xcworkspace</span><br><span class=\"line\">xcode_scheme: GMYHotSpotView</span><br><span class=\"line\">script: xcodebuild -workspace GMYHotSpotView.xcworkspace -scheme GMYHotSpotView CODE_SIGN_IDENTITY=&quot;&quot; CODE_SIGNING_REQUIRED=NO</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/travis-ci1.png\" alt=\"CI\"></p>\n<p>指示灯是可以拿来使用的  <a href=\"https://travis-ci.org/778477/GMYHotSpotView\"><img src=\"https://travis-ci.org/778477/GMYHotSpotView.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p><del>GitHub上还有一个很完善的YAML配置 <a href=\"https://github.com/BoltsFramework/Bolts-iOS/blob/master/.travis.yml\">https://github.com/BoltsFramework/Bolts-iOS/blob/master/.travis.yml</a></del> <strong>这个没啥卵用</strong></p>\n<blockquote>\n<p><a href=\"http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part3\">构建iOS持续集成平台（三）——CI服务器与自动化部署 @infoQ</a></p>\n<p><a href=\"http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error\">http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error</a></p>\n<p><a href=\"http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error\">http://stackoverflow.com/questions/27671854/travis-ci-fails-to-build-with-a-code-signing-error</a></p>\n</blockquote>\n"},{"layout":"post","title":"Minimum Window Substring","date":"2015-11-27T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n[Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/)\n\n题目大意：\n给定一个字符串S 和 另一个字符串T，在S中找到一个最短长度的子串包含T中所有的字母。 时间期望是O(N)\n如：\n```S = \"ADOBECODEBANC\"```\n```T = \"ABC\"```\n最短子串是 ```\"BANC\"```\n\n提示：\n \n* 如果没有找到子串，则返回```\"\"```空串\n* 如果有多个满足条件的字串，题目保证最短子串只有唯一的一个\n\n思路：\n维护一个计数数组CountTable统计字符串T所出现的所有字母次数，再开始遍历字符串S，同时开始统计T所出现的字母在S所出现的次数。 如果遍历过程中统计的字母次数和T的长度相同，说明我们遍历的得到的这个子串就是一个 Window Substring，满足条件！记录这个subString，开始缩小这个Window Substring，直到条件不满足 继续遍历寻找下一个 Window Substring。\n\n\n```\nclass Solution {\npublic:\n    string minWindow(string s, string t) {\n        string ans = \"\";\n        if(t.length() > s.length()) return ans;\n        \n        vector<int> countTable(256,0);\n        \n        for_each(t.begin(), t.end(), [&](const char ch){\n            countTable[ch]++;\n        });\n        \n        vector<int> foundTable(256,0);\n        queue<unsigned long> Q;\n        unsigned long maxLen(s.length()),count(0);\n        for(size_t i = 0;i<s.length();i++){\n            if(countTable[s[i]] > 0){\n                foundTable[s[i]] ++;\n                Q.push(i);\n                if(foundTable[s[i]] <= countTable[s[i]]) count++;\n                if(count == t.length()){\n                    unsigned long idx;\n                    do {\n                        idx = Q.front();\n                        Q.pop();\n                        foundTable[s[idx]]--;\n                    } while (foundTable[s[idx]] >= countTable[s[idx]]);\n                    if(i-idx < maxLen) ans = s.substr(idx,i-idx+1),maxLen = ans.length();\n                    count --;\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n![Accepted](https://raw.githubusercontent.com/778477/778477.github.io/73252cd0a2f49ca59bc5caee15fb1261bfae7abb/img/Minimum%20Window%20Substring.png)","source":"_posts/2015-11-27-Minimum Window Substring.md","raw":"---\nlayout: post\ntitle: 'Minimum Window Substring'\ndate: '2015-11-27'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n[Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/)\n\n题目大意：\n给定一个字符串S 和 另一个字符串T，在S中找到一个最短长度的子串包含T中所有的字母。 时间期望是O(N)\n如：\n```S = \"ADOBECODEBANC\"```\n```T = \"ABC\"```\n最短子串是 ```\"BANC\"```\n\n提示：\n \n* 如果没有找到子串，则返回```\"\"```空串\n* 如果有多个满足条件的字串，题目保证最短子串只有唯一的一个\n\n思路：\n维护一个计数数组CountTable统计字符串T所出现的所有字母次数，再开始遍历字符串S，同时开始统计T所出现的字母在S所出现的次数。 如果遍历过程中统计的字母次数和T的长度相同，说明我们遍历的得到的这个子串就是一个 Window Substring，满足条件！记录这个subString，开始缩小这个Window Substring，直到条件不满足 继续遍历寻找下一个 Window Substring。\n\n\n```\nclass Solution {\npublic:\n    string minWindow(string s, string t) {\n        string ans = \"\";\n        if(t.length() > s.length()) return ans;\n        \n        vector<int> countTable(256,0);\n        \n        for_each(t.begin(), t.end(), [&](const char ch){\n            countTable[ch]++;\n        });\n        \n        vector<int> foundTable(256,0);\n        queue<unsigned long> Q;\n        unsigned long maxLen(s.length()),count(0);\n        for(size_t i = 0;i<s.length();i++){\n            if(countTable[s[i]] > 0){\n                foundTable[s[i]] ++;\n                Q.push(i);\n                if(foundTable[s[i]] <= countTable[s[i]]) count++;\n                if(count == t.length()){\n                    unsigned long idx;\n                    do {\n                        idx = Q.front();\n                        Q.pop();\n                        foundTable[s[idx]]--;\n                    } while (foundTable[s[idx]] >= countTable[s[idx]]);\n                    if(i-idx < maxLen) ans = s.substr(idx,i-idx+1),maxLen = ans.length();\n                    count --;\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n![Accepted](https://raw.githubusercontent.com/778477/778477.github.io/73252cd0a2f49ca59bc5caee15fb1261bfae7abb/img/Minimum%20Window%20Substring.png)","slug":"2015-11-27-Minimum Window Substring","published":1,"updated":"2015-11-28T06:08:27.000Z","_id":"cip3cw76t000gy8a3d3qmt7ra","comments":1,"photos":[],"link":"","content":"<p><a href=\"https://leetcode.com/problems/minimum-window-substring/\" target=\"_blank\" rel=\"external\">Minimum Window Substring</a></p>\n<p>题目大意：<br>给定一个字符串S 和 另一个字符串T，在S中找到一个最短长度的子串包含T中所有的字母。 时间期望是O(N)<br>如：<br><figure class=\"highlight plain\"><figcaption><span>= \"ADOBECODEBANC\"```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```T = &quot;ABC&quot;</span><br></pre></td></tr></table></figure></p>\n<p>最短子串是 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">提示：</span><br><span class=\"line\"> </span><br><span class=\"line\">* 如果没有找到子串，则返回```&quot;&quot;```空串</span><br><span class=\"line\">* 如果有多个满足条件的字串，题目保证最短子串只有唯一的一个</span><br><span class=\"line\"></span><br><span class=\"line\">思路：</span><br><span class=\"line\">维护一个计数数组CountTable统计字符串T所出现的所有字母次数，再开始遍历字符串S，同时开始统计T所出现的字母在S所出现的次数。 如果遍历过程中统计的字母次数和T的长度相同，说明我们遍历的得到的这个子串就是一个 Window Substring，满足条件！记录这个subString，开始缩小这个Window Substring，直到条件不满足 继续遍历寻找下一个 Window Substring。</span><br></pre></td></tr></table></figure></p>\n<p>class Solution {<br>public:<br>    string minWindow(string s, string t) {<br>        string ans = “”;<br>        if(t.length() &gt; s.length()) return ans;</p>\n<pre><code>    vector&lt;int&gt; countTable(256,0);\n\n    for_each(t.begin(), t.end(), [&amp;](const char ch){\n        countTable[ch]++;\n    });\n\n    vector&lt;int&gt; foundTable(256,0);\n    queue&lt;unsigned long&gt; Q;\n    unsigned long maxLen(s.length()),count(0);\n    for(size_t i = 0;i&lt;s.length();i++){\n        if(countTable[s[i]] &gt; 0){\n            foundTable[s[i]] ++;\n            Q.push(i);\n            if(foundTable[s[i]] &lt;= countTable[s[i]]) count++;\n            if(count == t.length()){\n                unsigned long idx;\n                do {\n                    idx = Q.front();\n                    Q.pop();\n                    foundTable[s[idx]]--;\n                } while (foundTable[s[idx]] &gt;= countTable[s[idx]]);\n                if(i-idx &lt; maxLen) ans = s.substr(idx,i-idx+1),maxLen = ans.length();\n                count --;\n            }\n        }\n    }\n    return ans;\n}\n</code></pre><p>};<br>```</p>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/73252cd0a2f49ca59bc5caee15fb1261bfae7abb/img/Minimum%20Window%20Substring.png\" alt=\"Accepted\"></p>\n","excerpt":"","more":"<p><a href=\"https://leetcode.com/problems/minimum-window-substring/\">Minimum Window Substring</a></p>\n<p>题目大意：<br>给定一个字符串S 和 另一个字符串T，在S中找到一个最短长度的子串包含T中所有的字母。 时间期望是O(N)<br>如：<br><figure class=\"highlight plain\"><figcaption><span>= \"ADOBECODEBANC\"```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```T = &quot;ABC&quot;</span><br></pre></td></tr></table></figure></p>\n<p>最短子串是 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">提示：</span><br><span class=\"line\"> </span><br><span class=\"line\">* 如果没有找到子串，则返回```&quot;&quot;```空串</span><br><span class=\"line\">* 如果有多个满足条件的字串，题目保证最短子串只有唯一的一个</span><br><span class=\"line\"></span><br><span class=\"line\">思路：</span><br><span class=\"line\">维护一个计数数组CountTable统计字符串T所出现的所有字母次数，再开始遍历字符串S，同时开始统计T所出现的字母在S所出现的次数。 如果遍历过程中统计的字母次数和T的长度相同，说明我们遍历的得到的这个子串就是一个 Window Substring，满足条件！记录这个subString，开始缩小这个Window Substring，直到条件不满足 继续遍历寻找下一个 Window Substring。</span><br></pre></td></tr></table></figure></p>\n<p>class Solution {<br>public:<br>    string minWindow(string s, string t) {<br>        string ans = “”;<br>        if(t.length() &gt; s.length()) return ans;</p>\n<pre><code>    vector&lt;int&gt; countTable(256,0);\n\n    for_each(t.begin(), t.end(), [&amp;](const char ch){\n        countTable[ch]++;\n    });\n\n    vector&lt;int&gt; foundTable(256,0);\n    queue&lt;unsigned long&gt; Q;\n    unsigned long maxLen(s.length()),count(0);\n    for(size_t i = 0;i&lt;s.length();i++){\n        if(countTable[s[i]] &gt; 0){\n            foundTable[s[i]] ++;\n            Q.push(i);\n            if(foundTable[s[i]] &lt;= countTable[s[i]]) count++;\n            if(count == t.length()){\n                unsigned long idx;\n                do {\n                    idx = Q.front();\n                    Q.pop();\n                    foundTable[s[idx]]--;\n                } while (foundTable[s[idx]] &gt;= countTable[s[idx]]);\n                if(i-idx &lt; maxLen) ans = s.substr(idx,i-idx+1),maxLen = ans.length();\n                count --;\n            }\n        }\n    }\n    return ans;\n}\n</code></pre><p>};<br>```</p>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/73252cd0a2f49ca59bc5caee15fb1261bfae7abb/img/Minimum%20Window%20Substring.png\" alt=\"Accepted\"></p>\n"},{"layout":"post","title":"Make Your App Searchable","date":"2015-10-01T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"![1](https://48ce6c28e7bf5f42a1b7-2712e00ea34e3076747650c92426bbb5.ssl.cf1.rackcdn.com/2015-06-17-013455.jpeg)\n\n![2](http://searchengineland.com/figz/wp-content/seloads/2015/06/iOS-9-Apple-Search-Indexing-Methods-800x553-800x553.png)\n\n- [官方FAQ](https://developer.apple.com/library/prerelease/ios/technotes/tn2416/_index.html#//apple_ref/doc/uid/DTS40016269-CH1-SEARCH_API_FAQ-WHICH_IS_THE_RIGHT_API_FOR_ME_TO_USE_)\n\n\n**How Does Apple Rank Apps In Apple Search?**\n\n**Positive Ranking Factors**\n\n- **App Installation Status.** Is the app is installed on the device? (installed apps seem to get preference)\n- **Personalized App Engagement.** Does the individual engage with the screen in the app? This is based on time spent with result that Apple determines from session analytics.\n- **App Result Click-Through Rate.** Do users frequently click through the search result vs. picking another result or searching again?\n- **Keywords/ Title.** Do keywords from the “keywords” and “title” designations in the app markup match up with the user’s query?\n- **Aggregated Engagement.** How many users engage with the app screen?\n- **Structured Data on Web.** Is structured data correctly implemented?\n- **Canonical App IDs.** Is the same screen associated with one unique ID or URL across multiple indexing methods (NSUserActivity, CoreSpotlight, and Web Markup)?\n- **Strength/Popularity of Web URL.** How popular is the website associated with the app deep links? (Presumably, this is based on Applebot’s crawl.)\n\n**Negative Ranking Factors**\n\n- **Low Engagement.** Do very few users engage with the app screen? (engagement determined by session analytics)\n- **Over-Indexing.** Does the app have many screens in the index with low or no engagement?\n- **Returns.** Do users return to search results right after looking at the app?\n- **Keywords Spamming.** Are developers stuffing too many irrelevant keywords into the keyword field?\n- **Interstitials.** Is something covering the content in the app or preventing users from accessing it?\n- **Javascript (web only).** Is Javascript preventing Applebot from crawling your site to find new app deep links?\n- **Low Star Ratings, Low Review Volume, Poor Reviews.** Apple has not explicitly called these negative ranking factors for Apple Search, but they are negative ranking factors for the App Store, so we expect Apple to treat them similarly here.\n\nApple recommends pursuing multiple indexing methods to optimize app visibility, but the overlapping methods will inevitably create duplication across the various indexes. For example, private content could have both a NSUserActivity and CSSearchableItem indexed, and public content could have both a NSUserActivity and a Web Markup deep link indexed.\n\nThis is obviously not ideal for controlling Applebot’s efficiency, so Apple strongly recommends associating each NSUserActivity, CSSearchableItem, and Web Markup deep link with the same uniqueIdentifier and/or URL. This is Applebot’s version of a canonical, and it’s so important to Apple that they’ve even made it a ranking factor in the Apple Search algorithm.\n\n\n[CoreSpotlight Framework](https://developer.apple.com/library/prerelease/ios/documentation/CoreSpotlight/Reference/CoreSpotlight_Framework/)\n\n[How to use the new search API](http://applidium.com/en/news/ios9_search_api/)\n\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正\n>\n> 转载请注明原作者及以上信息\n\n","source":"_posts/2015-10-01-Make-Your-App-Searchable.md","raw":"---\nlayout: post\ntitle: 'Make Your App Searchable'\ndate: '2015-10-01'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - iOS\n     \nauthor: '778477'\n---\n![1](https://48ce6c28e7bf5f42a1b7-2712e00ea34e3076747650c92426bbb5.ssl.cf1.rackcdn.com/2015-06-17-013455.jpeg)\n\n![2](http://searchengineland.com/figz/wp-content/seloads/2015/06/iOS-9-Apple-Search-Indexing-Methods-800x553-800x553.png)\n\n- [官方FAQ](https://developer.apple.com/library/prerelease/ios/technotes/tn2416/_index.html#//apple_ref/doc/uid/DTS40016269-CH1-SEARCH_API_FAQ-WHICH_IS_THE_RIGHT_API_FOR_ME_TO_USE_)\n\n\n**How Does Apple Rank Apps In Apple Search?**\n\n**Positive Ranking Factors**\n\n- **App Installation Status.** Is the app is installed on the device? (installed apps seem to get preference)\n- **Personalized App Engagement.** Does the individual engage with the screen in the app? This is based on time spent with result that Apple determines from session analytics.\n- **App Result Click-Through Rate.** Do users frequently click through the search result vs. picking another result or searching again?\n- **Keywords/ Title.** Do keywords from the “keywords” and “title” designations in the app markup match up with the user’s query?\n- **Aggregated Engagement.** How many users engage with the app screen?\n- **Structured Data on Web.** Is structured data correctly implemented?\n- **Canonical App IDs.** Is the same screen associated with one unique ID or URL across multiple indexing methods (NSUserActivity, CoreSpotlight, and Web Markup)?\n- **Strength/Popularity of Web URL.** How popular is the website associated with the app deep links? (Presumably, this is based on Applebot’s crawl.)\n\n**Negative Ranking Factors**\n\n- **Low Engagement.** Do very few users engage with the app screen? (engagement determined by session analytics)\n- **Over-Indexing.** Does the app have many screens in the index with low or no engagement?\n- **Returns.** Do users return to search results right after looking at the app?\n- **Keywords Spamming.** Are developers stuffing too many irrelevant keywords into the keyword field?\n- **Interstitials.** Is something covering the content in the app or preventing users from accessing it?\n- **Javascript (web only).** Is Javascript preventing Applebot from crawling your site to find new app deep links?\n- **Low Star Ratings, Low Review Volume, Poor Reviews.** Apple has not explicitly called these negative ranking factors for Apple Search, but they are negative ranking factors for the App Store, so we expect Apple to treat them similarly here.\n\nApple recommends pursuing multiple indexing methods to optimize app visibility, but the overlapping methods will inevitably create duplication across the various indexes. For example, private content could have both a NSUserActivity and CSSearchableItem indexed, and public content could have both a NSUserActivity and a Web Markup deep link indexed.\n\nThis is obviously not ideal for controlling Applebot’s efficiency, so Apple strongly recommends associating each NSUserActivity, CSSearchableItem, and Web Markup deep link with the same uniqueIdentifier and/or URL. This is Applebot’s version of a canonical, and it’s so important to Apple that they’ve even made it a ranking factor in the Apple Search algorithm.\n\n\n[CoreSpotlight Framework](https://developer.apple.com/library/prerelease/ios/documentation/CoreSpotlight/Reference/CoreSpotlight_Framework/)\n\n[How to use the new search API](http://applidium.com/en/news/ios9_search_api/)\n\n\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正\n>\n> 转载请注明原作者及以上信息\n\n","slug":"2015-10-01-Make-Your-App-Searchable","published":1,"updated":"2015-10-01T11:51:52.000Z","_id":"cip3cw76u000hy8a35543b43s","comments":1,"photos":[],"link":"","content":"<p><img src=\"https://48ce6c28e7bf5f42a1b7-2712e00ea34e3076747650c92426bbb5.ssl.cf1.rackcdn.com/2015-06-17-013455.jpeg\" alt=\"1\"></p>\n<p><img src=\"http://searchengineland.com/figz/wp-content/seloads/2015/06/iOS-9-Apple-Search-Indexing-Methods-800x553-800x553.png\" alt=\"2\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/prerelease/ios/technotes/tn2416/_index.html#//apple_ref/doc/uid/DTS40016269-CH1-SEARCH_API_FAQ-WHICH_IS_THE_RIGHT_API_FOR_ME_TO_USE_\" target=\"_blank\" rel=\"external\">官方FAQ</a></li>\n</ul>\n<p><strong>How Does Apple Rank Apps In Apple Search?</strong></p>\n<p><strong>Positive Ranking Factors</strong></p>\n<ul>\n<li><strong>App Installation Status.</strong> Is the app is installed on the device? (installed apps seem to get preference)</li>\n<li><strong>Personalized App Engagement.</strong> Does the individual engage with the screen in the app? This is based on time spent with result that Apple determines from session analytics.</li>\n<li><strong>App Result Click-Through Rate.</strong> Do users frequently click through the search result vs. picking another result or searching again?</li>\n<li><strong>Keywords/ Title.</strong> Do keywords from the “keywords” and “title” designations in the app markup match up with the user’s query?</li>\n<li><strong>Aggregated Engagement.</strong> How many users engage with the app screen?</li>\n<li><strong>Structured Data on Web.</strong> Is structured data correctly implemented?</li>\n<li><strong>Canonical App IDs.</strong> Is the same screen associated with one unique ID or URL across multiple indexing methods (NSUserActivity, CoreSpotlight, and Web Markup)?</li>\n<li><strong>Strength/Popularity of Web URL.</strong> How popular is the website associated with the app deep links? (Presumably, this is based on Applebot’s crawl.)</li>\n</ul>\n<p><strong>Negative Ranking Factors</strong></p>\n<ul>\n<li><strong>Low Engagement.</strong> Do very few users engage with the app screen? (engagement determined by session analytics)</li>\n<li><strong>Over-Indexing.</strong> Does the app have many screens in the index with low or no engagement?</li>\n<li><strong>Returns.</strong> Do users return to search results right after looking at the app?</li>\n<li><strong>Keywords Spamming.</strong> Are developers stuffing too many irrelevant keywords into the keyword field?</li>\n<li><strong>Interstitials.</strong> Is something covering the content in the app or preventing users from accessing it?</li>\n<li><strong>Javascript (web only).</strong> Is Javascript preventing Applebot from crawling your site to find new app deep links?</li>\n<li><strong>Low Star Ratings, Low Review Volume, Poor Reviews.</strong> Apple has not explicitly called these negative ranking factors for Apple Search, but they are negative ranking factors for the App Store, so we expect Apple to treat them similarly here.</li>\n</ul>\n<p>Apple recommends pursuing multiple indexing methods to optimize app visibility, but the overlapping methods will inevitably create duplication across the various indexes. For example, private content could have both a NSUserActivity and CSSearchableItem indexed, and public content could have both a NSUserActivity and a Web Markup deep link indexed.</p>\n<p>This is obviously not ideal for controlling Applebot’s efficiency, so Apple strongly recommends associating each NSUserActivity, CSSearchableItem, and Web Markup deep link with the same uniqueIdentifier and/or URL. This is Applebot’s version of a canonical, and it’s so important to Apple that they’ve even made it a ranking factor in the Apple Search algorithm.</p>\n<p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/CoreSpotlight/Reference/CoreSpotlight_Framework/\" target=\"_blank\" rel=\"external\">CoreSpotlight Framework</a></p>\n<p><a href=\"http://applidium.com/en/news/ios9_search_api/\" target=\"_blank\" rel=\"external\">How to use the new search API</a></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正</p>\n<p>转载请注明原作者及以上信息</p>\n</blockquote>\n","excerpt":"","more":"<p><img src=\"https://48ce6c28e7bf5f42a1b7-2712e00ea34e3076747650c92426bbb5.ssl.cf1.rackcdn.com/2015-06-17-013455.jpeg\" alt=\"1\"></p>\n<p><img src=\"http://searchengineland.com/figz/wp-content/seloads/2015/06/iOS-9-Apple-Search-Indexing-Methods-800x553-800x553.png\" alt=\"2\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/prerelease/ios/technotes/tn2416/_index.html#//apple_ref/doc/uid/DTS40016269-CH1-SEARCH_API_FAQ-WHICH_IS_THE_RIGHT_API_FOR_ME_TO_USE_\">官方FAQ</a></li>\n</ul>\n<p><strong>How Does Apple Rank Apps In Apple Search?</strong></p>\n<p><strong>Positive Ranking Factors</strong></p>\n<ul>\n<li><strong>App Installation Status.</strong> Is the app is installed on the device? (installed apps seem to get preference)</li>\n<li><strong>Personalized App Engagement.</strong> Does the individual engage with the screen in the app? This is based on time spent with result that Apple determines from session analytics.</li>\n<li><strong>App Result Click-Through Rate.</strong> Do users frequently click through the search result vs. picking another result or searching again?</li>\n<li><strong>Keywords/ Title.</strong> Do keywords from the “keywords” and “title” designations in the app markup match up with the user’s query?</li>\n<li><strong>Aggregated Engagement.</strong> How many users engage with the app screen?</li>\n<li><strong>Structured Data on Web.</strong> Is structured data correctly implemented?</li>\n<li><strong>Canonical App IDs.</strong> Is the same screen associated with one unique ID or URL across multiple indexing methods (NSUserActivity, CoreSpotlight, and Web Markup)?</li>\n<li><strong>Strength/Popularity of Web URL.</strong> How popular is the website associated with the app deep links? (Presumably, this is based on Applebot’s crawl.)</li>\n</ul>\n<p><strong>Negative Ranking Factors</strong></p>\n<ul>\n<li><strong>Low Engagement.</strong> Do very few users engage with the app screen? (engagement determined by session analytics)</li>\n<li><strong>Over-Indexing.</strong> Does the app have many screens in the index with low or no engagement?</li>\n<li><strong>Returns.</strong> Do users return to search results right after looking at the app?</li>\n<li><strong>Keywords Spamming.</strong> Are developers stuffing too many irrelevant keywords into the keyword field?</li>\n<li><strong>Interstitials.</strong> Is something covering the content in the app or preventing users from accessing it?</li>\n<li><strong>Javascript (web only).</strong> Is Javascript preventing Applebot from crawling your site to find new app deep links?</li>\n<li><strong>Low Star Ratings, Low Review Volume, Poor Reviews.</strong> Apple has not explicitly called these negative ranking factors for Apple Search, but they are negative ranking factors for the App Store, so we expect Apple to treat them similarly here.</li>\n</ul>\n<p>Apple recommends pursuing multiple indexing methods to optimize app visibility, but the overlapping methods will inevitably create duplication across the various indexes. For example, private content could have both a NSUserActivity and CSSearchableItem indexed, and public content could have both a NSUserActivity and a Web Markup deep link indexed.</p>\n<p>This is obviously not ideal for controlling Applebot’s efficiency, so Apple strongly recommends associating each NSUserActivity, CSSearchableItem, and Web Markup deep link with the same uniqueIdentifier and/or URL. This is Applebot’s version of a canonical, and it’s so important to Apple that they’ve even made it a ranking factor in the Apple Search algorithm.</p>\n<p><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/CoreSpotlight/Reference/CoreSpotlight_Framework/\">CoreSpotlight Framework</a></p>\n<p><a href=\"http://applidium.com/en/news/ios9_search_api/\">How to use the new search API</a></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正</p>\n<p>转载请注明原作者及以上信息</p>\n</blockquote>\n"},{"layout":"post","title":"Lighter View Controller","date":"2015-12-16T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\n[Lighter-View-Controller 轻量级视图控制器](https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/)\n\n\n视图控制器们(View Controllers)通常是最大的文件在我们的iOS工程中。而且 他们常常有很多不必要的代码。导致视图控制器往往是无法在其他项目中复用的。我们下面讲述的技巧可以让控制器们 更加轻量，有复用性，让不合理的代码出现在合理的位置\n\n[example project on GitHub](https://github.com/objcio/issue-1-lighter-view-controllers)\n\n\n### 分离出数据协议和其他接口协议\n* 一个很有用的技巧就是将视图控制器中的 ```UITableViewDataSource``` 这部分代码分离出来。独立写一个类来维护，如果你都是这么处理的话，那么你这些类是可以以后在其他项目中复用的。\n* 这样做还有一个好处就是，我们可以独立测试这个类。\n\n举个例子：在示例项目中，```PhotosViewController``` 有这样几个方法\n\n```\n# pragma mark Pragma \n\n- (Photo*)photoAtIndexPath:(NSIndexPath*)indexPath {\n    return photos[(NSUInteger)indexPath.row];\n}\n\n- (NSInteger)tableView:(UITableView*)tableView \n numberOfRowsInSection:(NSInteger)section {\n    return photos.count;\n}\n\n- (UITableViewCell*)tableView:(UITableView*)tableView \n        cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n    PhotoCell* cell = [tableView dequeueReusableCellWithIdentifier:PhotoCellIdentifier \n                                                      forIndexPath:indexPath];\n    Photo* photo = [self photoAtIndexPath:indexPath];\n    cell.label.text = photo.name;\n    return cell;\n}\n```\n\n让我们试着把这些代码放到 我们自己的类上。我们用闭包来填充数据(或许协议更合适，这个取决于你)\n\n```\n@implementation ArrayDataSource\n\n- (id)itemAtIndexPath:(NSIndexPath*)indexPath {\n    return items[(NSUInteger)indexPath.row];\n}\n\n- (NSInteger)tableView:(UITableView*)tableView \n numberOfRowsInSection:(NSInteger)section {\n    return items.count;\n}\n\n- (UITableViewCell*)tableView:(UITableView*)tableView \n        cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n    id cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier\n                                              forIndexPath:indexPath];\n    id item = [self itemAtIndexPath:indexPath];\n    configureCellBlock(cell,item);\n    return cell;\n}\n\n@end\n```\n\n这三个方法不再存在我们的视图控制器了，我们可以创建实例来承接table view的数据协议委托\n\n```\nvoid (^configureCell)(PhotoCell*, Photo*) = ^(PhotoCell* cell, Photo* photo) {\n   cell.label.text = photo.name;\n};\nphotosArrayDataSource = [[ArrayDataSource alloc] initWithItems:photos\n                                                cellIdentifier:PhotoCellIdentifier\n                                            configureCellBlock:configureCell];\nself.tableView.dataSource = photosArrayDataSource;\n```\n\n\n\n而且，这种办法扩展其他接口协议也很方便。比如 另外的一个list数据协议是 ```UICollectionViewDataSource``` 由于一些需求实现，你们决定将 ```UITableView``` 替换为 ```UICollectionView```。实际上你的视图控制器不需要任何改动，你可以让你的类都支持这两个数据协议。\n\n\n\n### 逻辑处理放在Model\n 这里还是一个例子，这些代码在view controller里，功能是返回一个列表，上面的数据是用户的活跃度\n \n \n```\n- (void)loadPriorities {\n  NSDate* now = [NSDate date];\n  NSString* formatString = @\"startDate <= %@ AND endDate >= %@\";\n  NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];\n  NSSet* priorities = [self.user.priorities filteredSetUsingPredicate:predicate];\n  self.priorities = [priorities allObjects];\n}\n```\n\n\n当这些代码被放置到 User类的扩展中时，view controller就看起来比较清爽了。\n\n```\n- (void)loadPriorities {\n  self.priorities = [self.user currentPriorities];\n}\n```\n\n```User+Extensions.m:```\n\n```\n- (NSArray*)currentPriorities {\n  NSDate* now = [NSDate date];\n  NSString* formatString = @\"startDate <= %@ AND endDate >= %@\";\n  NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];\n  return [[self.priorities filteredSetUsingPredicate:predicate] allObjects];\n}\n```\n\n当然在实际项目中，有些代码不是那么轻松可以转移到Model当中的。所以我们要创建 \"数据仓库\"(Store Class)\n\n### 创建仓库类\n\n我们有些代码是从文件中加载数据并处理数据的，这些代码大概是这样的：\n\n```\n- (void)readArchive {\n    NSBundle* bundle = [NSBundle bundleForClass:[self class]];\n    NSURL *archiveURL = [bundle URLForResource:@\"photodata\"\n                                 withExtension:@\"bin\"];\n    NSAssert(archiveURL != nil, @\"Unable to find archive in bundle.\");\n    NSData *data = [NSData dataWithContentsOfURL:archiveURL\n                                         options:0\n                                           error:NULL];\n    NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];\n    _users = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@\"users\"];\n    _photos = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@\"photos\"];\n    [unarchiver finishDecoding];\n}\n```\n\n其实 View Controller 没有必要关心数据是如何处理的，我们创建 数据仓库来处理这些。使这些代码分离出来，这样我们就可以复用这个仓库类了。\n独立测试并且View Controller的代码量又减少了一些。这些数据仓库负责数据处理，持久化和数据库交互。我们也可以叫这些\"仓库\"为服务层或资料库\n\n### 将网络服务逻辑转移到Model\n\n这是一个类似的优化逻辑：不要把网络交互放在View Controller。把这些逻辑独立放置在其他类中，可以调用方法并设置回调处理。\n这样做的好处是你可以格外处理所有你的数据和错误在这个类上。而不会让View Controller变的臃肿\n\n### 结论\n\n我们看到有很多技巧可以让View Controller更加精简。我们努力让这些技巧在实际开发中更加实用。\n我们只有一个目的：写出可维护的代码。知道这些模式之后，我们有更加深刻的认识来讨论如何将笨重的View Controller精简优化。\n\n\n\n### 扩展阅读\n* [Cocoa Core Competencies: Controller Object](https://developer.apple.com/library/mac/documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html)\n* [Writing high quality view controllers](http://subjective-objective-c.blogspot.de/2011/08/writing-high-quality-view-controller.html)\n* [Programmers Stack Exchange: Model View Controller Store](https://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store)\n* [Programmers Stack Exchange: How to avoid big and clumsy UITableViewControllers on iOS\n](https://programmers.stackexchange.com/questions/177668/how-to-avoid-big-and-clumsy-uitableviewcontroller-on-ios)\n\n\n\n","source":"_posts/2015-12-16-Lighter View Controller.md","raw":"---\nlayout: post\ntitle: 'Lighter View Controller'\ndate: '2015-12-16'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - iOS\n     \nauthor: '778477'\n---\n\n\n[Lighter-View-Controller 轻量级视图控制器](https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/)\n\n\n视图控制器们(View Controllers)通常是最大的文件在我们的iOS工程中。而且 他们常常有很多不必要的代码。导致视图控制器往往是无法在其他项目中复用的。我们下面讲述的技巧可以让控制器们 更加轻量，有复用性，让不合理的代码出现在合理的位置\n\n[example project on GitHub](https://github.com/objcio/issue-1-lighter-view-controllers)\n\n\n### 分离出数据协议和其他接口协议\n* 一个很有用的技巧就是将视图控制器中的 ```UITableViewDataSource``` 这部分代码分离出来。独立写一个类来维护，如果你都是这么处理的话，那么你这些类是可以以后在其他项目中复用的。\n* 这样做还有一个好处就是，我们可以独立测试这个类。\n\n举个例子：在示例项目中，```PhotosViewController``` 有这样几个方法\n\n```\n# pragma mark Pragma \n\n- (Photo*)photoAtIndexPath:(NSIndexPath*)indexPath {\n    return photos[(NSUInteger)indexPath.row];\n}\n\n- (NSInteger)tableView:(UITableView*)tableView \n numberOfRowsInSection:(NSInteger)section {\n    return photos.count;\n}\n\n- (UITableViewCell*)tableView:(UITableView*)tableView \n        cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n    PhotoCell* cell = [tableView dequeueReusableCellWithIdentifier:PhotoCellIdentifier \n                                                      forIndexPath:indexPath];\n    Photo* photo = [self photoAtIndexPath:indexPath];\n    cell.label.text = photo.name;\n    return cell;\n}\n```\n\n让我们试着把这些代码放到 我们自己的类上。我们用闭包来填充数据(或许协议更合适，这个取决于你)\n\n```\n@implementation ArrayDataSource\n\n- (id)itemAtIndexPath:(NSIndexPath*)indexPath {\n    return items[(NSUInteger)indexPath.row];\n}\n\n- (NSInteger)tableView:(UITableView*)tableView \n numberOfRowsInSection:(NSInteger)section {\n    return items.count;\n}\n\n- (UITableViewCell*)tableView:(UITableView*)tableView \n        cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n    id cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier\n                                              forIndexPath:indexPath];\n    id item = [self itemAtIndexPath:indexPath];\n    configureCellBlock(cell,item);\n    return cell;\n}\n\n@end\n```\n\n这三个方法不再存在我们的视图控制器了，我们可以创建实例来承接table view的数据协议委托\n\n```\nvoid (^configureCell)(PhotoCell*, Photo*) = ^(PhotoCell* cell, Photo* photo) {\n   cell.label.text = photo.name;\n};\nphotosArrayDataSource = [[ArrayDataSource alloc] initWithItems:photos\n                                                cellIdentifier:PhotoCellIdentifier\n                                            configureCellBlock:configureCell];\nself.tableView.dataSource = photosArrayDataSource;\n```\n\n\n\n而且，这种办法扩展其他接口协议也很方便。比如 另外的一个list数据协议是 ```UICollectionViewDataSource``` 由于一些需求实现，你们决定将 ```UITableView``` 替换为 ```UICollectionView```。实际上你的视图控制器不需要任何改动，你可以让你的类都支持这两个数据协议。\n\n\n\n### 逻辑处理放在Model\n 这里还是一个例子，这些代码在view controller里，功能是返回一个列表，上面的数据是用户的活跃度\n \n \n```\n- (void)loadPriorities {\n  NSDate* now = [NSDate date];\n  NSString* formatString = @\"startDate <= %@ AND endDate >= %@\";\n  NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];\n  NSSet* priorities = [self.user.priorities filteredSetUsingPredicate:predicate];\n  self.priorities = [priorities allObjects];\n}\n```\n\n\n当这些代码被放置到 User类的扩展中时，view controller就看起来比较清爽了。\n\n```\n- (void)loadPriorities {\n  self.priorities = [self.user currentPriorities];\n}\n```\n\n```User+Extensions.m:```\n\n```\n- (NSArray*)currentPriorities {\n  NSDate* now = [NSDate date];\n  NSString* formatString = @\"startDate <= %@ AND endDate >= %@\";\n  NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];\n  return [[self.priorities filteredSetUsingPredicate:predicate] allObjects];\n}\n```\n\n当然在实际项目中，有些代码不是那么轻松可以转移到Model当中的。所以我们要创建 \"数据仓库\"(Store Class)\n\n### 创建仓库类\n\n我们有些代码是从文件中加载数据并处理数据的，这些代码大概是这样的：\n\n```\n- (void)readArchive {\n    NSBundle* bundle = [NSBundle bundleForClass:[self class]];\n    NSURL *archiveURL = [bundle URLForResource:@\"photodata\"\n                                 withExtension:@\"bin\"];\n    NSAssert(archiveURL != nil, @\"Unable to find archive in bundle.\");\n    NSData *data = [NSData dataWithContentsOfURL:archiveURL\n                                         options:0\n                                           error:NULL];\n    NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];\n    _users = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@\"users\"];\n    _photos = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@\"photos\"];\n    [unarchiver finishDecoding];\n}\n```\n\n其实 View Controller 没有必要关心数据是如何处理的，我们创建 数据仓库来处理这些。使这些代码分离出来，这样我们就可以复用这个仓库类了。\n独立测试并且View Controller的代码量又减少了一些。这些数据仓库负责数据处理，持久化和数据库交互。我们也可以叫这些\"仓库\"为服务层或资料库\n\n### 将网络服务逻辑转移到Model\n\n这是一个类似的优化逻辑：不要把网络交互放在View Controller。把这些逻辑独立放置在其他类中，可以调用方法并设置回调处理。\n这样做的好处是你可以格外处理所有你的数据和错误在这个类上。而不会让View Controller变的臃肿\n\n### 结论\n\n我们看到有很多技巧可以让View Controller更加精简。我们努力让这些技巧在实际开发中更加实用。\n我们只有一个目的：写出可维护的代码。知道这些模式之后，我们有更加深刻的认识来讨论如何将笨重的View Controller精简优化。\n\n\n\n### 扩展阅读\n* [Cocoa Core Competencies: Controller Object](https://developer.apple.com/library/mac/documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html)\n* [Writing high quality view controllers](http://subjective-objective-c.blogspot.de/2011/08/writing-high-quality-view-controller.html)\n* [Programmers Stack Exchange: Model View Controller Store](https://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store)\n* [Programmers Stack Exchange: How to avoid big and clumsy UITableViewControllers on iOS\n](https://programmers.stackexchange.com/questions/177668/how-to-avoid-big-and-clumsy-uitableviewcontroller-on-ios)\n\n\n\n","slug":"2015-12-16-Lighter View Controller","published":1,"updated":"2015-12-16T13:13:04.000Z","_id":"cip3cw76v000iy8a36ogs7x37","comments":1,"photos":[],"link":"","content":"<p><a href=\"https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/\" target=\"_blank\" rel=\"external\">Lighter-View-Controller 轻量级视图控制器</a></p>\n<p>视图控制器们(View Controllers)通常是最大的文件在我们的iOS工程中。而且 他们常常有很多不必要的代码。导致视图控制器往往是无法在其他项目中复用的。我们下面讲述的技巧可以让控制器们 更加轻量，有复用性，让不合理的代码出现在合理的位置</p>\n<p><a href=\"https://github.com/objcio/issue-1-lighter-view-controllers\" target=\"_blank\" rel=\"external\">example project on GitHub</a></p>\n<h3 id=\"分离出数据协议和其他接口协议\"><a href=\"#分离出数据协议和其他接口协议\" class=\"headerlink\" title=\"分离出数据协议和其他接口协议\"></a>分离出数据协议和其他接口协议</h3><ul>\n<li>一个很有用的技巧就是将视图控制器中的 <figure class=\"highlight plain\"><figcaption><span>这部分代码分离出来。独立写一个类来维护，如果你都是这么处理的话，那么你这些类是可以以后在其他项目中复用的。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 这样做还有一个好处就是，我们可以独立测试这个类。</span><br><span class=\"line\"></span><br><span class=\"line\">举个例子：在示例项目中，```PhotosViewController``` 有这样几个方法</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"pragma-mark-Pragma\"><a href=\"#pragma-mark-Pragma\" class=\"headerlink\" title=\"pragma mark Pragma\"></a>pragma mark Pragma</h1><ul>\n<li><p>(Photo<em>)photoAtIndexPath:(NSIndexPath</em>)indexPath {<br>  return photos[(NSUInteger)indexPath.row];<br>}</p>\n</li>\n<li><p>(NSInteger)tableView:(UITableView*)tableView<br>numberOfRowsInSection:(NSInteger)section {<br>  return photos.count;<br>}</p>\n</li>\n<li><p>(UITableViewCell<em>)tableView:(UITableView</em>)tableView </p>\n<pre><code>cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n</code></pre><p>  PhotoCell* cell = [tableView dequeueReusableCellWithIdentifier:PhotoCellIdentifier </p>\n<pre><code>forIndexPath:indexPath];\n</code></pre><p>  Photo* photo = [self photoAtIndexPath:indexPath];<br>  cell.label.text = photo.name;<br>  return cell;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">让我们试着把这些代码放到 我们自己的类上。我们用闭包来填充数据(或许协议更合适，这个取决于你)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>@implementation ArrayDataSource</p>\n<ul>\n<li><p>(id)itemAtIndexPath:(NSIndexPath*)indexPath {<br>  return items[(NSUInteger)indexPath.row];<br>}</p>\n</li>\n<li><p>(NSInteger)tableView:(UITableView*)tableView<br>numberOfRowsInSection:(NSInteger)section {<br>  return items.count;<br>}</p>\n</li>\n<li><p>(UITableViewCell<em>)tableView:(UITableView</em>)tableView </p>\n<pre><code>cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n</code></pre><p>  id cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier</p>\n<pre><code>forIndexPath:indexPath];\n</code></pre><p>  id item = [self itemAtIndexPath:indexPath];<br>  configureCellBlock(cell,item);<br>  return cell;<br>}</p>\n</li>\n</ul>\n<p>@end<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这三个方法不再存在我们的视图控制器了，我们可以创建实例来承接table view的数据协议委托</span><br></pre></td></tr></table></figure></p>\n<p>void (^configureCell)(PhotoCell<em>, Photo</em>) = ^(PhotoCell<em> cell, Photo</em> photo) {<br>   cell.label.text = photo.name;<br>};<br>photosArrayDataSource = [[ArrayDataSource alloc] initWithItems:photos<br>                                                cellIdentifier:PhotoCellIdentifier<br>                                            configureCellBlock:configureCell];<br>self.tableView.dataSource = photosArrayDataSource;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">而且，这种办法扩展其他接口协议也很方便。比如 另外的一个list数据协议是 ```UICollectionViewDataSource``` 由于一些需求实现，你们决定将 ```UITableView``` 替换为 ```UICollectionView```。实际上你的视图控制器不需要任何改动，你可以让你的类都支持这两个数据协议。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 逻辑处理放在Model</span><br><span class=\"line\"> 这里还是一个例子，这些代码在view controller里，功能是返回一个列表，上面的数据是用户的活跃度</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>(void)loadPriorities {<br>NSDate<em> now = [NSDate date];<br>NSString</em> formatString = @”startDate &lt;= %@ AND endDate &gt;= %@”;<br>NSPredicate<em> predicate = [NSPredicate predicateWithFormat:formatString, now, now];<br>NSSet</em> priorities = [self.user.priorities filteredSetUsingPredicate:predicate];<br>self.priorities = [priorities allObjects];<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">当这些代码被放置到 User类的扩展中时，view controller就看起来比较清爽了。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(void)loadPriorities {<br>self.priorities = [self.user currentPriorities];<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```User+Extensions.m:</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSArray*)currentPriorities &#123;</span><br><span class=\"line\">  NSDate* now = [NSDate date];</span><br><span class=\"line\">  NSString* formatString = @&quot;startDate &lt;= %@ AND endDate &gt;= %@&quot;;</span><br><span class=\"line\">  NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];</span><br><span class=\"line\">  return [[self.priorities filteredSetUsingPredicate:predicate] allObjects];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然在实际项目中，有些代码不是那么轻松可以转移到Model当中的。所以我们要创建 “数据仓库”(Store Class)</p>\n<h3 id=\"创建仓库类\"><a href=\"#创建仓库类\" class=\"headerlink\" title=\"创建仓库类\"></a>创建仓库类</h3><p>我们有些代码是从文件中加载数据并处理数据的，这些代码大概是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)readArchive &#123;</span><br><span class=\"line\">    NSBundle* bundle = [NSBundle bundleForClass:[self class]];</span><br><span class=\"line\">    NSURL *archiveURL = [bundle URLForResource:@&quot;photodata&quot;</span><br><span class=\"line\">                                 withExtension:@&quot;bin&quot;];</span><br><span class=\"line\">    NSAssert(archiveURL != nil, @&quot;Unable to find archive in bundle.&quot;);</span><br><span class=\"line\">    NSData *data = [NSData dataWithContentsOfURL:archiveURL</span><br><span class=\"line\">                                         options:0</span><br><span class=\"line\">                                           error:NULL];</span><br><span class=\"line\">    NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];</span><br><span class=\"line\">    _users = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;users&quot;];</span><br><span class=\"line\">    _photos = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;photos&quot;];</span><br><span class=\"line\">    [unarchiver finishDecoding];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实 View Controller 没有必要关心数据是如何处理的，我们创建 数据仓库来处理这些。使这些代码分离出来，这样我们就可以复用这个仓库类了。<br>独立测试并且View Controller的代码量又减少了一些。这些数据仓库负责数据处理，持久化和数据库交互。我们也可以叫这些”仓库”为服务层或资料库</p>\n<h3 id=\"将网络服务逻辑转移到Model\"><a href=\"#将网络服务逻辑转移到Model\" class=\"headerlink\" title=\"将网络服务逻辑转移到Model\"></a>将网络服务逻辑转移到Model</h3><p>这是一个类似的优化逻辑：不要把网络交互放在View Controller。把这些逻辑独立放置在其他类中，可以调用方法并设置回调处理。<br>这样做的好处是你可以格外处理所有你的数据和错误在这个类上。而不会让View Controller变的臃肿</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>我们看到有很多技巧可以让View Controller更加精简。我们努力让这些技巧在实际开发中更加实用。<br>我们只有一个目的：写出可维护的代码。知道这些模式之后，我们有更加深刻的认识来讨论如何将笨重的View Controller精简优化。</p>\n<h3 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h3><ul>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html\" target=\"_blank\" rel=\"external\">Cocoa Core Competencies: Controller Object</a></li>\n<li><a href=\"http://subjective-objective-c.blogspot.de/2011/08/writing-high-quality-view-controller.html\" target=\"_blank\" rel=\"external\">Writing high quality view controllers</a></li>\n<li><a href=\"https://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store\" target=\"_blank\" rel=\"external\">Programmers Stack Exchange: Model View Controller Store</a></li>\n<li><a href=\"https://programmers.stackexchange.com/questions/177668/how-to-avoid-big-and-clumsy-uitableviewcontroller-on-ios\" target=\"_blank\" rel=\"external\">Programmers Stack Exchange: How to avoid big and clumsy UITableViewControllers on iOS\n</a></li>\n</ul>\n","excerpt":"","more":"<p><a href=\"https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/\">Lighter-View-Controller 轻量级视图控制器</a></p>\n<p>视图控制器们(View Controllers)通常是最大的文件在我们的iOS工程中。而且 他们常常有很多不必要的代码。导致视图控制器往往是无法在其他项目中复用的。我们下面讲述的技巧可以让控制器们 更加轻量，有复用性，让不合理的代码出现在合理的位置</p>\n<p><a href=\"https://github.com/objcio/issue-1-lighter-view-controllers\">example project on GitHub</a></p>\n<h3 id=\"分离出数据协议和其他接口协议\"><a href=\"#分离出数据协议和其他接口协议\" class=\"headerlink\" title=\"分离出数据协议和其他接口协议\"></a>分离出数据协议和其他接口协议</h3><ul>\n<li>一个很有用的技巧就是将视图控制器中的 <figure class=\"highlight plain\"><figcaption><span>这部分代码分离出来。独立写一个类来维护，如果你都是这么处理的话，那么你这些类是可以以后在其他项目中复用的。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 这样做还有一个好处就是，我们可以独立测试这个类。</span><br><span class=\"line\"></span><br><span class=\"line\">举个例子：在示例项目中，```PhotosViewController``` 有这样几个方法</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"pragma-mark-Pragma\"><a href=\"#pragma-mark-Pragma\" class=\"headerlink\" title=\"pragma mark Pragma\"></a>pragma mark Pragma</h1><ul>\n<li><p>(Photo<em>)photoAtIndexPath:(NSIndexPath</em>)indexPath {<br>  return photos[(NSUInteger)indexPath.row];<br>}</p>\n</li>\n<li><p>(NSInteger)tableView:(UITableView*)tableView<br>numberOfRowsInSection:(NSInteger)section {<br>  return photos.count;<br>}</p>\n</li>\n<li><p>(UITableViewCell<em>)tableView:(UITableView</em>)tableView </p>\n<pre><code>cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n</code></pre><p>  PhotoCell* cell = [tableView dequeueReusableCellWithIdentifier:PhotoCellIdentifier </p>\n<pre><code>forIndexPath:indexPath];\n</code></pre><p>  Photo* photo = [self photoAtIndexPath:indexPath];<br>  cell.label.text = photo.name;<br>  return cell;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">让我们试着把这些代码放到 我们自己的类上。我们用闭包来填充数据(或许协议更合适，这个取决于你)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>@implementation ArrayDataSource</p>\n<ul>\n<li><p>(id)itemAtIndexPath:(NSIndexPath*)indexPath {<br>  return items[(NSUInteger)indexPath.row];<br>}</p>\n</li>\n<li><p>(NSInteger)tableView:(UITableView*)tableView<br>numberOfRowsInSection:(NSInteger)section {<br>  return items.count;<br>}</p>\n</li>\n<li><p>(UITableViewCell<em>)tableView:(UITableView</em>)tableView </p>\n<pre><code>cellForRowAtIndexPath:(NSIndexPath*)indexPath {\n</code></pre><p>  id cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier</p>\n<pre><code>forIndexPath:indexPath];\n</code></pre><p>  id item = [self itemAtIndexPath:indexPath];<br>  configureCellBlock(cell,item);<br>  return cell;<br>}</p>\n</li>\n</ul>\n<p>@end<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这三个方法不再存在我们的视图控制器了，我们可以创建实例来承接table view的数据协议委托</span><br></pre></td></tr></table></figure></p>\n<p>void (^configureCell)(PhotoCell<em>, Photo</em>) = ^(PhotoCell<em> cell, Photo</em> photo) {<br>   cell.label.text = photo.name;<br>};<br>photosArrayDataSource = [[ArrayDataSource alloc] initWithItems:photos<br>                                                cellIdentifier:PhotoCellIdentifier<br>                                            configureCellBlock:configureCell];<br>self.tableView.dataSource = photosArrayDataSource;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">而且，这种办法扩展其他接口协议也很方便。比如 另外的一个list数据协议是 ```UICollectionViewDataSource``` 由于一些需求实现，你们决定将 ```UITableView``` 替换为 ```UICollectionView```。实际上你的视图控制器不需要任何改动，你可以让你的类都支持这两个数据协议。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 逻辑处理放在Model</span><br><span class=\"line\"> 这里还是一个例子，这些代码在view controller里，功能是返回一个列表，上面的数据是用户的活跃度</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>(void)loadPriorities {<br>NSDate<em> now = [NSDate date];<br>NSString</em> formatString = @”startDate &lt;= %@ AND endDate &gt;= %@”;<br>NSPredicate<em> predicate = [NSPredicate predicateWithFormat:formatString, now, now];<br>NSSet</em> priorities = [self.user.priorities filteredSetUsingPredicate:predicate];<br>self.priorities = [priorities allObjects];<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">当这些代码被放置到 User类的扩展中时，view controller就看起来比较清爽了。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(void)loadPriorities {<br>self.priorities = [self.user currentPriorities];<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```User+Extensions.m:</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSArray*)currentPriorities &#123;</span><br><span class=\"line\">  NSDate* now = [NSDate date];</span><br><span class=\"line\">  NSString* formatString = @&quot;startDate &lt;= %@ AND endDate &gt;= %@&quot;;</span><br><span class=\"line\">  NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];</span><br><span class=\"line\">  return [[self.priorities filteredSetUsingPredicate:predicate] allObjects];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然在实际项目中，有些代码不是那么轻松可以转移到Model当中的。所以我们要创建 “数据仓库”(Store Class)</p>\n<h3 id=\"创建仓库类\"><a href=\"#创建仓库类\" class=\"headerlink\" title=\"创建仓库类\"></a>创建仓库类</h3><p>我们有些代码是从文件中加载数据并处理数据的，这些代码大概是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)readArchive &#123;</span><br><span class=\"line\">    NSBundle* bundle = [NSBundle bundleForClass:[self class]];</span><br><span class=\"line\">    NSURL *archiveURL = [bundle URLForResource:@&quot;photodata&quot;</span><br><span class=\"line\">                                 withExtension:@&quot;bin&quot;];</span><br><span class=\"line\">    NSAssert(archiveURL != nil, @&quot;Unable to find archive in bundle.&quot;);</span><br><span class=\"line\">    NSData *data = [NSData dataWithContentsOfURL:archiveURL</span><br><span class=\"line\">                                         options:0</span><br><span class=\"line\">                                           error:NULL];</span><br><span class=\"line\">    NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];</span><br><span class=\"line\">    _users = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;users&quot;];</span><br><span class=\"line\">    _photos = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@&quot;photos&quot;];</span><br><span class=\"line\">    [unarchiver finishDecoding];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实 View Controller 没有必要关心数据是如何处理的，我们创建 数据仓库来处理这些。使这些代码分离出来，这样我们就可以复用这个仓库类了。<br>独立测试并且View Controller的代码量又减少了一些。这些数据仓库负责数据处理，持久化和数据库交互。我们也可以叫这些”仓库”为服务层或资料库</p>\n<h3 id=\"将网络服务逻辑转移到Model\"><a href=\"#将网络服务逻辑转移到Model\" class=\"headerlink\" title=\"将网络服务逻辑转移到Model\"></a>将网络服务逻辑转移到Model</h3><p>这是一个类似的优化逻辑：不要把网络交互放在View Controller。把这些逻辑独立放置在其他类中，可以调用方法并设置回调处理。<br>这样做的好处是你可以格外处理所有你的数据和错误在这个类上。而不会让View Controller变的臃肿</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>我们看到有很多技巧可以让View Controller更加精简。我们努力让这些技巧在实际开发中更加实用。<br>我们只有一个目的：写出可维护的代码。知道这些模式之后，我们有更加深刻的认识来讨论如何将笨重的View Controller精简优化。</p>\n<h3 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h3><ul>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html\">Cocoa Core Competencies: Controller Object</a></li>\n<li><a href=\"http://subjective-objective-c.blogspot.de/2011/08/writing-high-quality-view-controller.html\">Writing high quality view controllers</a></li>\n<li><a href=\"https://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store\">Programmers Stack Exchange: Model View Controller Store</a></li>\n<li><a href=\"https://programmers.stackexchange.com/questions/177668/how-to-avoid-big-and-clumsy-uitableviewcontroller-on-ios\">Programmers Stack Exchange: How to avoid big and clumsy UITableViewControllers on iOS\n</a></li>\n</ul>\n"},{"layout":"post","title":"Permutation Sequence","date":"2015-09-06T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\n[Permutation Sequence](https://leetcode.com/problems/permutation-sequence/)\n\n题目大意：一个[1,2,3,...,n]n个数字的集合有 n！个唯一的排列组合。对这些排列组合排序我们能得到一个有序的数组，现在给你一个n和k求第k个顺序的排列。\n\nie，for n = 3，k = 4\n\n1. \"123\"\n2. \"132\"\n3. \"213\"\n4. \"231\"\n5. \"312\"\n6. \"321\"\n\n应该返回第4个排列情况\"231\"。\n\n**Note** 给定的n在[1,9]之间\n\n解题思路：一开始我使用C++ STL自带的next_permutation API,以为能水过去。结果超时了(Time Limit Exceeded) 看来不能偷懒。\n\n我们来重新看一下题目，n个数字有n！种排列情况，求第k个排列组合(排序之后)。大致能理解为 给n个数字，组成第k小的数。 这么想的话，我们可以思考一下 如果有n个数，求组成第k小的数，我们第一位数字应该如何选择呢？\n\n还是这个(n = 3, k = 4)的case，我们手上有1，2，3这三个数字，我们要组成第4小的数，我们第一个数字应该选2，为什么选2需要解释一下：\n\n我们要组成第4小的数，手上有3个数，有3！= 6种排列情况(组成情况)。要先选一个最高位数， 我们看一下 剩下有2个数，有2种组成情况。显然最高位选1的话，最多也是一个第2小的数。选3的话，怎么组成也是第5小的数起跳。选2的话，组成的数区间是第4-第5。所以我们选择2作为 第4小的数的最高位。\n\n由此规律为：最高位数字是 (k-1)/(n-1)！\n同理 选择次最高位思路是一样的\n\n```\nclass Solution {\npublic:\n    string getPermutation(int n, int k) {\n        \n        string str = \"\";\n        if(k == factorial(n)){\n            for(int i=n;i>0;i--) str+=('0'+i);\n            return str;\n        }\n        \n        vector<int> numbers;\n        for(int i=1;i<=n;i++) numbers.push_back(i);\n        for(int i=1;i<n;i++){\n            int num = factorial(n-i);\n            int index = (k-1)/num;\n            str += ('0' + numbers[index]);\n            numbers.erase(numbers.begin() + index);\n            k = k-index*num;\n        }\n        str+= ('0' + numbers[0]);\n        return str;\n    }\nprivate:\n    int factorial(int n){\n        int ans = n;\n        while(--n) ans*=n;\n        return ans;\n    }\n};\n```\n\n![accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Permutation%20Sequence.png)\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。","source":"_posts/2015-09-06-Permutation- Sequence.md","raw":"---\nlayout: post\ntitle: 'Permutation Sequence'\ndate: '2015-09-06'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n\n[Permutation Sequence](https://leetcode.com/problems/permutation-sequence/)\n\n题目大意：一个[1,2,3,...,n]n个数字的集合有 n！个唯一的排列组合。对这些排列组合排序我们能得到一个有序的数组，现在给你一个n和k求第k个顺序的排列。\n\nie，for n = 3，k = 4\n\n1. \"123\"\n2. \"132\"\n3. \"213\"\n4. \"231\"\n5. \"312\"\n6. \"321\"\n\n应该返回第4个排列情况\"231\"。\n\n**Note** 给定的n在[1,9]之间\n\n解题思路：一开始我使用C++ STL自带的next_permutation API,以为能水过去。结果超时了(Time Limit Exceeded) 看来不能偷懒。\n\n我们来重新看一下题目，n个数字有n！种排列情况，求第k个排列组合(排序之后)。大致能理解为 给n个数字，组成第k小的数。 这么想的话，我们可以思考一下 如果有n个数，求组成第k小的数，我们第一位数字应该如何选择呢？\n\n还是这个(n = 3, k = 4)的case，我们手上有1，2，3这三个数字，我们要组成第4小的数，我们第一个数字应该选2，为什么选2需要解释一下：\n\n我们要组成第4小的数，手上有3个数，有3！= 6种排列情况(组成情况)。要先选一个最高位数， 我们看一下 剩下有2个数，有2种组成情况。显然最高位选1的话，最多也是一个第2小的数。选3的话，怎么组成也是第5小的数起跳。选2的话，组成的数区间是第4-第5。所以我们选择2作为 第4小的数的最高位。\n\n由此规律为：最高位数字是 (k-1)/(n-1)！\n同理 选择次最高位思路是一样的\n\n```\nclass Solution {\npublic:\n    string getPermutation(int n, int k) {\n        \n        string str = \"\";\n        if(k == factorial(n)){\n            for(int i=n;i>0;i--) str+=('0'+i);\n            return str;\n        }\n        \n        vector<int> numbers;\n        for(int i=1;i<=n;i++) numbers.push_back(i);\n        for(int i=1;i<n;i++){\n            int num = factorial(n-i);\n            int index = (k-1)/num;\n            str += ('0' + numbers[index]);\n            numbers.erase(numbers.begin() + index);\n            k = k-index*num;\n        }\n        str+= ('0' + numbers[0]);\n        return str;\n    }\nprivate:\n    int factorial(int n){\n        int ans = n;\n        while(--n) ans*=n;\n        return ans;\n    }\n};\n```\n\n![accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Permutation%20Sequence.png)\n\n\n> 如有任何知识产权、版权问题或理论错误，还请指正。\n>\n> 转载请注明原作者及以上信息。","slug":"2015-09-06-Permutation- Sequence","published":1,"updated":"2015-10-01T08:18:22.000Z","_id":"cip3cw76x000ky8a3wbec78xk","comments":1,"photos":[],"link":"","content":"<p><a href=\"https://leetcode.com/problems/permutation-sequence/\" target=\"_blank\" rel=\"external\">Permutation Sequence</a></p>\n<p>题目大意：一个[1,2,3,…,n]n个数字的集合有 n！个唯一的排列组合。对这些排列组合排序我们能得到一个有序的数组，现在给你一个n和k求第k个顺序的排列。</p>\n<p>ie，for n = 3，k = 4</p>\n<ol>\n<li>“123”</li>\n<li>“132”</li>\n<li>“213”</li>\n<li>“231”</li>\n<li>“312”</li>\n<li>“321”</li>\n</ol>\n<p>应该返回第4个排列情况”231”。</p>\n<p><strong>Note</strong> 给定的n在[1,9]之间</p>\n<p>解题思路：一开始我使用C++ STL自带的next_permutation API,以为能水过去。结果超时了(Time Limit Exceeded) 看来不能偷懒。</p>\n<p>我们来重新看一下题目，n个数字有n！种排列情况，求第k个排列组合(排序之后)。大致能理解为 给n个数字，组成第k小的数。 这么想的话，我们可以思考一下 如果有n个数，求组成第k小的数，我们第一位数字应该如何选择呢？</p>\n<p>还是这个(n = 3, k = 4)的case，我们手上有1，2，3这三个数字，我们要组成第4小的数，我们第一个数字应该选2，为什么选2需要解释一下：</p>\n<p>我们要组成第4小的数，手上有3个数，有3！= 6种排列情况(组成情况)。要先选一个最高位数， 我们看一下 剩下有2个数，有2种组成情况。显然最高位选1的话，最多也是一个第2小的数。选3的话，怎么组成也是第5小的数起跳。选2的话，组成的数区间是第4-第5。所以我们选择2作为 第4小的数的最高位。</p>\n<p>由此规律为：最高位数字是 (k-1)/(n-1)！<br>同理 选择次最高位思路是一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string getPermutation(int n, int k) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        string str = &quot;&quot;;</span><br><span class=\"line\">        if(k == factorial(n))&#123;</span><br><span class=\"line\">            for(int i=n;i&gt;0;i--) str+=(&apos;0&apos;+i);</span><br><span class=\"line\">            return str;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        vector&lt;int&gt; numbers;</span><br><span class=\"line\">        for(int i=1;i&lt;=n;i++) numbers.push_back(i);</span><br><span class=\"line\">        for(int i=1;i&lt;n;i++)&#123;</span><br><span class=\"line\">            int num = factorial(n-i);</span><br><span class=\"line\">            int index = (k-1)/num;</span><br><span class=\"line\">            str += (&apos;0&apos; + numbers[index]);</span><br><span class=\"line\">            numbers.erase(numbers.begin() + index);</span><br><span class=\"line\">            k = k-index*num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        str+= (&apos;0&apos; + numbers[0]);</span><br><span class=\"line\">        return str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int factorial(int n)&#123;</span><br><span class=\"line\">        int ans = n;</span><br><span class=\"line\">        while(--n) ans*=n;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Permutation%20Sequence.png\" alt=\"accepted\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n","excerpt":"","more":"<p><a href=\"https://leetcode.com/problems/permutation-sequence/\">Permutation Sequence</a></p>\n<p>题目大意：一个[1,2,3,…,n]n个数字的集合有 n！个唯一的排列组合。对这些排列组合排序我们能得到一个有序的数组，现在给你一个n和k求第k个顺序的排列。</p>\n<p>ie，for n = 3，k = 4</p>\n<ol>\n<li>“123”</li>\n<li>“132”</li>\n<li>“213”</li>\n<li>“231”</li>\n<li>“312”</li>\n<li>“321”</li>\n</ol>\n<p>应该返回第4个排列情况”231”。</p>\n<p><strong>Note</strong> 给定的n在[1,9]之间</p>\n<p>解题思路：一开始我使用C++ STL自带的next_permutation API,以为能水过去。结果超时了(Time Limit Exceeded) 看来不能偷懒。</p>\n<p>我们来重新看一下题目，n个数字有n！种排列情况，求第k个排列组合(排序之后)。大致能理解为 给n个数字，组成第k小的数。 这么想的话，我们可以思考一下 如果有n个数，求组成第k小的数，我们第一位数字应该如何选择呢？</p>\n<p>还是这个(n = 3, k = 4)的case，我们手上有1，2，3这三个数字，我们要组成第4小的数，我们第一个数字应该选2，为什么选2需要解释一下：</p>\n<p>我们要组成第4小的数，手上有3个数，有3！= 6种排列情况(组成情况)。要先选一个最高位数， 我们看一下 剩下有2个数，有2种组成情况。显然最高位选1的话，最多也是一个第2小的数。选3的话，怎么组成也是第5小的数起跳。选2的话，组成的数区间是第4-第5。所以我们选择2作为 第4小的数的最高位。</p>\n<p>由此规律为：最高位数字是 (k-1)/(n-1)！<br>同理 选择次最高位思路是一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    string getPermutation(int n, int k) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        string str = &quot;&quot;;</span><br><span class=\"line\">        if(k == factorial(n))&#123;</span><br><span class=\"line\">            for(int i=n;i&gt;0;i--) str+=(&apos;0&apos;+i);</span><br><span class=\"line\">            return str;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        vector&lt;int&gt; numbers;</span><br><span class=\"line\">        for(int i=1;i&lt;=n;i++) numbers.push_back(i);</span><br><span class=\"line\">        for(int i=1;i&lt;n;i++)&#123;</span><br><span class=\"line\">            int num = factorial(n-i);</span><br><span class=\"line\">            int index = (k-1)/num;</span><br><span class=\"line\">            str += (&apos;0&apos; + numbers[index]);</span><br><span class=\"line\">            numbers.erase(numbers.begin() + index);</span><br><span class=\"line\">            k = k-index*num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        str+= (&apos;0&apos; + numbers[0]);</span><br><span class=\"line\">        return str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int factorial(int n)&#123;</span><br><span class=\"line\">        int ans = n;</span><br><span class=\"line\">        while(--n) ans*=n;</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Permutation%20Sequence.png\" alt=\"accepted\"></p>\n<blockquote>\n<p>如有任何知识产权、版权问题或理论错误，还请指正。</p>\n<p>转载请注明原作者及以上信息。</p>\n</blockquote>\n"},{"layout":"post","title":"Range Sum Query Mutable","date":"2016-02-02T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n[Range Sum Query - Mutable](https://leetcode.com/problems/range-sum-query-mutable/)\n\n\n给定一个整形数组。会有两个操作\n\n操作1：查询区间(i,j)的总和\n\n操作2：更新元素(i,val) 下标为i的元素 值更新为val\n\n\n提示：\n\n * 数组元素的修改只有通过 update 方法\n * update 和 sumRange 方法调用是不确定次数和顺序的（distributed evenly 分布式）\n \n\n这个是一个经典的问题。类似 RMQ(Range Minimum/Maximum Query)，区间最值查询。不过我们注意到有操作2，就表示说数据是可变的，离线算法就不考虑了。\n\n这类题目有一个现成的数据结构可以解决：[SegmentTree 线段树](https://en.wikipedia.org/wiki/Segment_tree)\n\n由于线段树是平衡二叉树，所以深度是logn。就是算查询的区间和的时间复杂度是 O(logn)的。\n\n![segment-tree1](http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png)\n\n由上图可知，叶子节点均为数组元素。我们在做ACM题的常常会提到一个线段树常数，其实是指线段树的空间复杂度。按照数组n来推算线段树的空间复杂度。\n\n时间复杂度大体分为： \n\n* 初始化 建树O(n) \n* 区间查询和 O(logn) \n* 更新单值O(logn) \n\n时间复杂度理想是线性的，不因为n的变化产生剧烈抖动。空间复杂度是O(nlogn)\n\n> A segment tree T on a set I of n intervals uses O(nlogn) storage.\n\n> Proof:\nLemma: Any interval [x, x′] of I is stored in the canonical set for at most two nodes at the    same depth.\n\n> Proof: Let v1, v2, v3 be the three nodes at the same depth, numbered from left to right; and let p(v) be the parent node of any given node v. Suppose [x, x′] is stored at v1 and v3. This means that [x, x′] spans the whole interval from the left endpoint of Int(v1) to the right endpoint of Int(v3). Note that all segments at a particular level are non-overlapping and ordered from left to right: this is true by construction for the level containing the leaves, and the property is not lost when moving from any level to the one above it by combining pairs of adjacent segments. Now either p(v2) = p(v1), or the former is to the right of the latter (edges in the tree do not cross). In the first case, Int(p(v2))'s leftmost point is the same as Int(v1)'s leftmost point; in the second case, Int(p(v2))'s leftmost point is to the right of Int(p(v1))'s rightmost point, and therefore also to the right of Int(v1)'s rightmost point. In both cases, Int(p(v2)) begins at or to the right of Int(v1)'s leftmost point. Similar reasoning shows that Int(p(v2)) ends at or to the left of Int(v3)'s rightmost point. Int(p(v2)) must therefore be contained in [x, x′]; hence, [x, x′] will not be stored at v2.\nThe set I has at most 4n + 1 elementary intervals. Because T is a binary balanced tree with at most 4n + 1 leaves, its height is O(logn). Since any interval is stored at most twice at a given depth of the tree, that the total amount of storage is O(nlogn).\n\n\n\n\n```\ntypedef unsigned long lusigned;\n\nstruct SegmenTreeNode{\n    int val;\n    lusigned star,end;\n    SegmenTreeNode *left,*right;\n    SegmenTreeNode(lusigned _star,lusigned _end,int _val){\n        val = _val;\n        star = _star, end = _end;\n        left = right = NULL;\n    }\n};\n\nclass NumArray {\npublic:\n    NumArray(vector<int> &nums) {\n        numbers = nums;\n        if(nums.size() >= 1){\n            rootNode = buildSegmentTree(0, 0, nums.size()-1, nums);\n        }\n    }\n    \n    void update(int i, int val){\n        updateNodeVal(rootNode, i, val);\n    }\n    \n    int sumRange(int i, int j) {\n        if(j < i) return 0;\n        return querySumValInSegmentTree(rootNode, 0, numbers.size()-1, i, j);\n    }\n    \nprivate:\n    vector<int> numbers;\n    SegmenTreeNode *rootNode;\n    SegmenTreeNode *buildSegmentTree(int root,lusigned star,lusigned end,const vector<int> nums){\n        \n        SegmenTreeNode *rootNode = new SegmenTreeNode(star, end, 0);\n        \n        if(star == end){\n            rootNode->val = nums[star];\n        }\n        else{\n            lusigned mid = (star + end)/2;\n            rootNode->left = buildSegmentTree(root*2+1, star, mid, nums);\n            rootNode->right =  buildSegmentTree(root*2+2, mid+1, end, nums);\n            \n            rootNode->val = rootNode->left->val + rootNode->right->val;\n        }\n        \n        return rootNode;\n    }\n    \n    int updateNodeVal(SegmenTreeNode *root, int idx,int value){\n        if(root->star == root->end && root->star == idx)  return (root->val = value);\n        else if(root->star == root->end) return root->val;\n        \n        lusigned mid = (root->star + root->end)>>1;\n        if(idx <= mid){\n            root->left->val = updateNodeVal(root->left, idx, value);\n        }\n        else{\n            root->right->val = updateNodeVal(root->right, idx, value);\n        }\n        return (root->val = root->left->val + root->right->val);\n    }\n    \n    int querySumValInSegmentTree(SegmenTreeNode *root, lusigned star,lusigned end,lusigned qSidx,lusigned qEidx){\n        \n        if(qSidx <= star && qEidx >= end) return root->val;\n        \n        if(qEidx < star || qSidx > end) return 0;\n        \n        lusigned mid = (star + end) / 2;\n        \n        int leftSumVal = querySumValInSegmentTree(root->left, star, mid, qSidx, qEidx);\n        int rightSumVal = querySumValInSegmentTree(root->right, mid+1, end, qSidx, qEidx);\n        \n        return leftSumVal + rightSumVal;\n    }\n};\n\n```\n\n![accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Range%20Sum%20Query%20Accepted.png)\n\n不太明白为什么 leetCode Judge 中 C/C++ 的效率最低，Java最高。这个明显是不合理的。。\n\n最后 关于 线段树的更新是有优化空间的。看一看这组操作\n\n 1. 操作1\n 2. 操作2 \n 3. 操作2\n 4. 操作2\n 5. 操作2\n 6. 操作2\n 7. 操作2\n\n其实 后面的操作2 如果没有接着操作1的话，其实我们没有必要实时更新单点值。这里就有一个延迟更新的优化点，也是线段树的精髓。 我之后有空补充:)","source":"_posts/2016-02-02-Range Sum Query - Mutable.md","raw":"---\nlayout: post\ntitle: 'Range Sum Query Mutable'\ndate: '2016-02-02'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n[Range Sum Query - Mutable](https://leetcode.com/problems/range-sum-query-mutable/)\n\n\n给定一个整形数组。会有两个操作\n\n操作1：查询区间(i,j)的总和\n\n操作2：更新元素(i,val) 下标为i的元素 值更新为val\n\n\n提示：\n\n * 数组元素的修改只有通过 update 方法\n * update 和 sumRange 方法调用是不确定次数和顺序的（distributed evenly 分布式）\n \n\n这个是一个经典的问题。类似 RMQ(Range Minimum/Maximum Query)，区间最值查询。不过我们注意到有操作2，就表示说数据是可变的，离线算法就不考虑了。\n\n这类题目有一个现成的数据结构可以解决：[SegmentTree 线段树](https://en.wikipedia.org/wiki/Segment_tree)\n\n由于线段树是平衡二叉树，所以深度是logn。就是算查询的区间和的时间复杂度是 O(logn)的。\n\n![segment-tree1](http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png)\n\n由上图可知，叶子节点均为数组元素。我们在做ACM题的常常会提到一个线段树常数，其实是指线段树的空间复杂度。按照数组n来推算线段树的空间复杂度。\n\n时间复杂度大体分为： \n\n* 初始化 建树O(n) \n* 区间查询和 O(logn) \n* 更新单值O(logn) \n\n时间复杂度理想是线性的，不因为n的变化产生剧烈抖动。空间复杂度是O(nlogn)\n\n> A segment tree T on a set I of n intervals uses O(nlogn) storage.\n\n> Proof:\nLemma: Any interval [x, x′] of I is stored in the canonical set for at most two nodes at the    same depth.\n\n> Proof: Let v1, v2, v3 be the three nodes at the same depth, numbered from left to right; and let p(v) be the parent node of any given node v. Suppose [x, x′] is stored at v1 and v3. This means that [x, x′] spans the whole interval from the left endpoint of Int(v1) to the right endpoint of Int(v3). Note that all segments at a particular level are non-overlapping and ordered from left to right: this is true by construction for the level containing the leaves, and the property is not lost when moving from any level to the one above it by combining pairs of adjacent segments. Now either p(v2) = p(v1), or the former is to the right of the latter (edges in the tree do not cross). In the first case, Int(p(v2))'s leftmost point is the same as Int(v1)'s leftmost point; in the second case, Int(p(v2))'s leftmost point is to the right of Int(p(v1))'s rightmost point, and therefore also to the right of Int(v1)'s rightmost point. In both cases, Int(p(v2)) begins at or to the right of Int(v1)'s leftmost point. Similar reasoning shows that Int(p(v2)) ends at or to the left of Int(v3)'s rightmost point. Int(p(v2)) must therefore be contained in [x, x′]; hence, [x, x′] will not be stored at v2.\nThe set I has at most 4n + 1 elementary intervals. Because T is a binary balanced tree with at most 4n + 1 leaves, its height is O(logn). Since any interval is stored at most twice at a given depth of the tree, that the total amount of storage is O(nlogn).\n\n\n\n\n```\ntypedef unsigned long lusigned;\n\nstruct SegmenTreeNode{\n    int val;\n    lusigned star,end;\n    SegmenTreeNode *left,*right;\n    SegmenTreeNode(lusigned _star,lusigned _end,int _val){\n        val = _val;\n        star = _star, end = _end;\n        left = right = NULL;\n    }\n};\n\nclass NumArray {\npublic:\n    NumArray(vector<int> &nums) {\n        numbers = nums;\n        if(nums.size() >= 1){\n            rootNode = buildSegmentTree(0, 0, nums.size()-1, nums);\n        }\n    }\n    \n    void update(int i, int val){\n        updateNodeVal(rootNode, i, val);\n    }\n    \n    int sumRange(int i, int j) {\n        if(j < i) return 0;\n        return querySumValInSegmentTree(rootNode, 0, numbers.size()-1, i, j);\n    }\n    \nprivate:\n    vector<int> numbers;\n    SegmenTreeNode *rootNode;\n    SegmenTreeNode *buildSegmentTree(int root,lusigned star,lusigned end,const vector<int> nums){\n        \n        SegmenTreeNode *rootNode = new SegmenTreeNode(star, end, 0);\n        \n        if(star == end){\n            rootNode->val = nums[star];\n        }\n        else{\n            lusigned mid = (star + end)/2;\n            rootNode->left = buildSegmentTree(root*2+1, star, mid, nums);\n            rootNode->right =  buildSegmentTree(root*2+2, mid+1, end, nums);\n            \n            rootNode->val = rootNode->left->val + rootNode->right->val;\n        }\n        \n        return rootNode;\n    }\n    \n    int updateNodeVal(SegmenTreeNode *root, int idx,int value){\n        if(root->star == root->end && root->star == idx)  return (root->val = value);\n        else if(root->star == root->end) return root->val;\n        \n        lusigned mid = (root->star + root->end)>>1;\n        if(idx <= mid){\n            root->left->val = updateNodeVal(root->left, idx, value);\n        }\n        else{\n            root->right->val = updateNodeVal(root->right, idx, value);\n        }\n        return (root->val = root->left->val + root->right->val);\n    }\n    \n    int querySumValInSegmentTree(SegmenTreeNode *root, lusigned star,lusigned end,lusigned qSidx,lusigned qEidx){\n        \n        if(qSidx <= star && qEidx >= end) return root->val;\n        \n        if(qEidx < star || qSidx > end) return 0;\n        \n        lusigned mid = (star + end) / 2;\n        \n        int leftSumVal = querySumValInSegmentTree(root->left, star, mid, qSidx, qEidx);\n        int rightSumVal = querySumValInSegmentTree(root->right, mid+1, end, qSidx, qEidx);\n        \n        return leftSumVal + rightSumVal;\n    }\n};\n\n```\n\n![accepted](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Range%20Sum%20Query%20Accepted.png)\n\n不太明白为什么 leetCode Judge 中 C/C++ 的效率最低，Java最高。这个明显是不合理的。。\n\n最后 关于 线段树的更新是有优化空间的。看一看这组操作\n\n 1. 操作1\n 2. 操作2 \n 3. 操作2\n 4. 操作2\n 5. 操作2\n 6. 操作2\n 7. 操作2\n\n其实 后面的操作2 如果没有接着操作1的话，其实我们没有必要实时更新单点值。这里就有一个延迟更新的优化点，也是线段树的精髓。 我之后有空补充:)","slug":"2016-02-02-Range Sum Query - Mutable","published":1,"updated":"2016-02-02T03:33:37.000Z","_id":"cip3cw770000ly8a34kn3e8zr","comments":1,"photos":[],"link":"","content":"<p><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"external\">Range Sum Query - Mutable</a></p>\n<p>给定一个整形数组。会有两个操作</p>\n<p>操作1：查询区间(i,j)的总和</p>\n<p>操作2：更新元素(i,val) 下标为i的元素 值更新为val</p>\n<p>提示：</p>\n<ul>\n<li>数组元素的修改只有通过 update 方法</li>\n<li>update 和 sumRange 方法调用是不确定次数和顺序的（distributed evenly 分布式）</li>\n</ul>\n<p>这个是一个经典的问题。类似 RMQ(Range Minimum/Maximum Query)，区间最值查询。不过我们注意到有操作2，就表示说数据是可变的，离线算法就不考虑了。</p>\n<p>这类题目有一个现成的数据结构可以解决：<a href=\"https://en.wikipedia.org/wiki/Segment_tree\" target=\"_blank\" rel=\"external\">SegmentTree 线段树</a></p>\n<p>由于线段树是平衡二叉树，所以深度是logn。就是算查询的区间和的时间复杂度是 O(logn)的。</p>\n<p><img src=\"http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png\" alt=\"segment-tree1\"></p>\n<p>由上图可知，叶子节点均为数组元素。我们在做ACM题的常常会提到一个线段树常数，其实是指线段树的空间复杂度。按照数组n来推算线段树的空间复杂度。</p>\n<p>时间复杂度大体分为： </p>\n<ul>\n<li>初始化 建树O(n) </li>\n<li>区间查询和 O(logn) </li>\n<li>更新单值O(logn) </li>\n</ul>\n<p>时间复杂度理想是线性的，不因为n的变化产生剧烈抖动。空间复杂度是O(nlogn)</p>\n<blockquote>\n<p>A segment tree T on a set I of n intervals uses O(nlogn) storage.</p>\n<p>Proof:<br>Lemma: Any interval [x, x′] of I is stored in the canonical set for at most two nodes at the    same depth.</p>\n<p>Proof: Let v1, v2, v3 be the three nodes at the same depth, numbered from left to right; and let p(v) be the parent node of any given node v. Suppose [x, x′] is stored at v1 and v3. This means that [x, x′] spans the whole interval from the left endpoint of Int(v1) to the right endpoint of Int(v3). Note that all segments at a particular level are non-overlapping and ordered from left to right: this is true by construction for the level containing the leaves, and the property is not lost when moving from any level to the one above it by combining pairs of adjacent segments. Now either p(v2) = p(v1), or the former is to the right of the latter (edges in the tree do not cross). In the first case, Int(p(v2))’s leftmost point is the same as Int(v1)’s leftmost point; in the second case, Int(p(v2))’s leftmost point is to the right of Int(p(v1))’s rightmost point, and therefore also to the right of Int(v1)’s rightmost point. In both cases, Int(p(v2)) begins at or to the right of Int(v1)’s leftmost point. Similar reasoning shows that Int(p(v2)) ends at or to the left of Int(v3)’s rightmost point. Int(p(v2)) must therefore be contained in [x, x′]; hence, [x, x′] will not be stored at v2.<br>The set I has at most 4n + 1 elementary intervals. Because T is a binary balanced tree with at most 4n + 1 leaves, its height is O(logn). Since any interval is stored at most twice at a given depth of the tree, that the total amount of storage is O(nlogn).</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef unsigned long lusigned;</span><br><span class=\"line\"></span><br><span class=\"line\">struct SegmenTreeNode&#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    lusigned star,end;</span><br><span class=\"line\">    SegmenTreeNode *left,*right;</span><br><span class=\"line\">    SegmenTreeNode(lusigned _star,lusigned _end,int _val)&#123;</span><br><span class=\"line\">        val = _val;</span><br><span class=\"line\">        star = _star, end = _end;</span><br><span class=\"line\">        left = right = NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class NumArray &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    NumArray(vector&lt;int&gt; &amp;nums) &#123;</span><br><span class=\"line\">        numbers = nums;</span><br><span class=\"line\">        if(nums.size() &gt;= 1)&#123;</span><br><span class=\"line\">            rootNode = buildSegmentTree(0, 0, nums.size()-1, nums);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void update(int i, int val)&#123;</span><br><span class=\"line\">        updateNodeVal(rootNode, i, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int sumRange(int i, int j) &#123;</span><br><span class=\"line\">        if(j &lt; i) return 0;</span><br><span class=\"line\">        return querySumValInSegmentTree(rootNode, 0, numbers.size()-1, i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">private:</span><br><span class=\"line\">    vector&lt;int&gt; numbers;</span><br><span class=\"line\">    SegmenTreeNode *rootNode;</span><br><span class=\"line\">    SegmenTreeNode *buildSegmentTree(int root,lusigned star,lusigned end,const vector&lt;int&gt; nums)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        SegmenTreeNode *rootNode = new SegmenTreeNode(star, end, 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(star == end)&#123;</span><br><span class=\"line\">            rootNode-&gt;val = nums[star];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            lusigned mid = (star + end)/2;</span><br><span class=\"line\">            rootNode-&gt;left = buildSegmentTree(root*2+1, star, mid, nums);</span><br><span class=\"line\">            rootNode-&gt;right =  buildSegmentTree(root*2+2, mid+1, end, nums);</span><br><span class=\"line\">            </span><br><span class=\"line\">            rootNode-&gt;val = rootNode-&gt;left-&gt;val + rootNode-&gt;right-&gt;val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return rootNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int updateNodeVal(SegmenTreeNode *root, int idx,int value)&#123;</span><br><span class=\"line\">        if(root-&gt;star == root-&gt;end &amp;&amp; root-&gt;star == idx)  return (root-&gt;val = value);</span><br><span class=\"line\">        else if(root-&gt;star == root-&gt;end) return root-&gt;val;</span><br><span class=\"line\">        </span><br><span class=\"line\">        lusigned mid = (root-&gt;star + root-&gt;end)&gt;&gt;1;</span><br><span class=\"line\">        if(idx &lt;= mid)&#123;</span><br><span class=\"line\">            root-&gt;left-&gt;val = updateNodeVal(root-&gt;left, idx, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            root-&gt;right-&gt;val = updateNodeVal(root-&gt;right, idx, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return (root-&gt;val = root-&gt;left-&gt;val + root-&gt;right-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int querySumValInSegmentTree(SegmenTreeNode *root, lusigned star,lusigned end,lusigned qSidx,lusigned qEidx)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(qSidx &lt;= star &amp;&amp; qEidx &gt;= end) return root-&gt;val;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(qEidx &lt; star || qSidx &gt; end) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        lusigned mid = (star + end) / 2;</span><br><span class=\"line\">        </span><br><span class=\"line\">        int leftSumVal = querySumValInSegmentTree(root-&gt;left, star, mid, qSidx, qEidx);</span><br><span class=\"line\">        int rightSumVal = querySumValInSegmentTree(root-&gt;right, mid+1, end, qSidx, qEidx);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return leftSumVal + rightSumVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Range%20Sum%20Query%20Accepted.png\" alt=\"accepted\"></p>\n<p>不太明白为什么 leetCode Judge 中 C/C++ 的效率最低，Java最高。这个明显是不合理的。。</p>\n<p>最后 关于 线段树的更新是有优化空间的。看一看这组操作</p>\n<ol>\n<li>操作1</li>\n<li>操作2 </li>\n<li>操作2</li>\n<li>操作2</li>\n<li>操作2</li>\n<li>操作2</li>\n<li>操作2</li>\n</ol>\n<p>其实 后面的操作2 如果没有接着操作1的话，其实我们没有必要实时更新单点值。这里就有一个延迟更新的优化点，也是线段树的精髓。 我之后有空补充:)</p>\n","excerpt":"","more":"<p><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\">Range Sum Query - Mutable</a></p>\n<p>给定一个整形数组。会有两个操作</p>\n<p>操作1：查询区间(i,j)的总和</p>\n<p>操作2：更新元素(i,val) 下标为i的元素 值更新为val</p>\n<p>提示：</p>\n<ul>\n<li>数组元素的修改只有通过 update 方法</li>\n<li>update 和 sumRange 方法调用是不确定次数和顺序的（distributed evenly 分布式）</li>\n</ul>\n<p>这个是一个经典的问题。类似 RMQ(Range Minimum/Maximum Query)，区间最值查询。不过我们注意到有操作2，就表示说数据是可变的，离线算法就不考虑了。</p>\n<p>这类题目有一个现成的数据结构可以解决：<a href=\"https://en.wikipedia.org/wiki/Segment_tree\">SegmentTree 线段树</a></p>\n<p>由于线段树是平衡二叉树，所以深度是logn。就是算查询的区间和的时间复杂度是 O(logn)的。</p>\n<p><img src=\"http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png\" alt=\"segment-tree1\"></p>\n<p>由上图可知，叶子节点均为数组元素。我们在做ACM题的常常会提到一个线段树常数，其实是指线段树的空间复杂度。按照数组n来推算线段树的空间复杂度。</p>\n<p>时间复杂度大体分为： </p>\n<ul>\n<li>初始化 建树O(n) </li>\n<li>区间查询和 O(logn) </li>\n<li>更新单值O(logn) </li>\n</ul>\n<p>时间复杂度理想是线性的，不因为n的变化产生剧烈抖动。空间复杂度是O(nlogn)</p>\n<blockquote>\n<p>A segment tree T on a set I of n intervals uses O(nlogn) storage.</p>\n<p>Proof:<br>Lemma: Any interval [x, x′] of I is stored in the canonical set for at most two nodes at the    same depth.</p>\n<p>Proof: Let v1, v2, v3 be the three nodes at the same depth, numbered from left to right; and let p(v) be the parent node of any given node v. Suppose [x, x′] is stored at v1 and v3. This means that [x, x′] spans the whole interval from the left endpoint of Int(v1) to the right endpoint of Int(v3). Note that all segments at a particular level are non-overlapping and ordered from left to right: this is true by construction for the level containing the leaves, and the property is not lost when moving from any level to the one above it by combining pairs of adjacent segments. Now either p(v2) = p(v1), or the former is to the right of the latter (edges in the tree do not cross). In the first case, Int(p(v2))’s leftmost point is the same as Int(v1)’s leftmost point; in the second case, Int(p(v2))’s leftmost point is to the right of Int(p(v1))’s rightmost point, and therefore also to the right of Int(v1)’s rightmost point. In both cases, Int(p(v2)) begins at or to the right of Int(v1)’s leftmost point. Similar reasoning shows that Int(p(v2)) ends at or to the left of Int(v3)’s rightmost point. Int(p(v2)) must therefore be contained in [x, x′]; hence, [x, x′] will not be stored at v2.<br>The set I has at most 4n + 1 elementary intervals. Because T is a binary balanced tree with at most 4n + 1 leaves, its height is O(logn). Since any interval is stored at most twice at a given depth of the tree, that the total amount of storage is O(nlogn).</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef unsigned long lusigned;</span><br><span class=\"line\"></span><br><span class=\"line\">struct SegmenTreeNode&#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    lusigned star,end;</span><br><span class=\"line\">    SegmenTreeNode *left,*right;</span><br><span class=\"line\">    SegmenTreeNode(lusigned _star,lusigned _end,int _val)&#123;</span><br><span class=\"line\">        val = _val;</span><br><span class=\"line\">        star = _star, end = _end;</span><br><span class=\"line\">        left = right = NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class NumArray &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    NumArray(vector&lt;int&gt; &amp;nums) &#123;</span><br><span class=\"line\">        numbers = nums;</span><br><span class=\"line\">        if(nums.size() &gt;= 1)&#123;</span><br><span class=\"line\">            rootNode = buildSegmentTree(0, 0, nums.size()-1, nums);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void update(int i, int val)&#123;</span><br><span class=\"line\">        updateNodeVal(rootNode, i, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int sumRange(int i, int j) &#123;</span><br><span class=\"line\">        if(j &lt; i) return 0;</span><br><span class=\"line\">        return querySumValInSegmentTree(rootNode, 0, numbers.size()-1, i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">private:</span><br><span class=\"line\">    vector&lt;int&gt; numbers;</span><br><span class=\"line\">    SegmenTreeNode *rootNode;</span><br><span class=\"line\">    SegmenTreeNode *buildSegmentTree(int root,lusigned star,lusigned end,const vector&lt;int&gt; nums)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        SegmenTreeNode *rootNode = new SegmenTreeNode(star, end, 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(star == end)&#123;</span><br><span class=\"line\">            rootNode-&gt;val = nums[star];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            lusigned mid = (star + end)/2;</span><br><span class=\"line\">            rootNode-&gt;left = buildSegmentTree(root*2+1, star, mid, nums);</span><br><span class=\"line\">            rootNode-&gt;right =  buildSegmentTree(root*2+2, mid+1, end, nums);</span><br><span class=\"line\">            </span><br><span class=\"line\">            rootNode-&gt;val = rootNode-&gt;left-&gt;val + rootNode-&gt;right-&gt;val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return rootNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int updateNodeVal(SegmenTreeNode *root, int idx,int value)&#123;</span><br><span class=\"line\">        if(root-&gt;star == root-&gt;end &amp;&amp; root-&gt;star == idx)  return (root-&gt;val = value);</span><br><span class=\"line\">        else if(root-&gt;star == root-&gt;end) return root-&gt;val;</span><br><span class=\"line\">        </span><br><span class=\"line\">        lusigned mid = (root-&gt;star + root-&gt;end)&gt;&gt;1;</span><br><span class=\"line\">        if(idx &lt;= mid)&#123;</span><br><span class=\"line\">            root-&gt;left-&gt;val = updateNodeVal(root-&gt;left, idx, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            root-&gt;right-&gt;val = updateNodeVal(root-&gt;right, idx, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return (root-&gt;val = root-&gt;left-&gt;val + root-&gt;right-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int querySumValInSegmentTree(SegmenTreeNode *root, lusigned star,lusigned end,lusigned qSidx,lusigned qEidx)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(qSidx &lt;= star &amp;&amp; qEidx &gt;= end) return root-&gt;val;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(qEidx &lt; star || qSidx &gt; end) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        lusigned mid = (star + end) / 2;</span><br><span class=\"line\">        </span><br><span class=\"line\">        int leftSumVal = querySumValInSegmentTree(root-&gt;left, star, mid, qSidx, qEidx);</span><br><span class=\"line\">        int rightSumVal = querySumValInSegmentTree(root-&gt;right, mid+1, end, qSidx, qEidx);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return leftSumVal + rightSumVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Range%20Sum%20Query%20Accepted.png\" alt=\"accepted\"></p>\n<p>不太明白为什么 leetCode Judge 中 C/C++ 的效率最低，Java最高。这个明显是不合理的。。</p>\n<p>最后 关于 线段树的更新是有优化空间的。看一看这组操作</p>\n<ol>\n<li>操作1</li>\n<li>操作2 </li>\n<li>操作2</li>\n<li>操作2</li>\n<li>操作2</li>\n<li>操作2</li>\n<li>操作2</li>\n</ol>\n<p>其实 后面的操作2 如果没有接着操作1的话，其实我们没有必要实时更新单点值。这里就有一个延迟更新的优化点，也是线段树的精髓。 我之后有空补充:)</p>\n"},{"layout":"post","title":"Cocoa Launch at Login","date":"2016-02-29T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\n# Cocoa Launch at Login \n\n从[Mac Developer Library](https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html)中查看文档：\n\n有两种方式可以添加登录启动项：使用Service Management framework 或 使用 shared file list\n\n这两种方式有差别：\n\n * 使用Service Management framework 在系统的登录项中是不可见的。只有卸载App才能移除登录项\n \n * 使用 shared file list 在系统的登录项中是可见的。用户可以直接在面板上控制他们。（If you use this API, your login item can be disabled by the user, so any other application that communicates with it it should have reasonable fallback behavior in case the login item is disabled.） 原文还有一句大意是指这个API有隐患，所以在OS X 10.10系统上 API被大量Deprecated\n \n\n下面具体介绍一下 这两种的实现\n\n## Adding Login Item Using the Service Management Framework\n\n应用要包含一个 Helper Target，类型也是应用。设置路径为Contents/Library/LoginItems。设置这个Helper Target info.plist LSBackgroundOnly 为 YES。\n\n使用 ``` SMLoginItemSetEnabled ```方法授权Helper，需要传入两个参数：```CFStringRef```指的是Helper Target的bundle identifier. ``` Boolean ``` 表示期望状态。 传入 ```true``` Helper 会每次在用户登录的时候启动。 传入``` false ``` 来注销这个登录项，不会在用户登录的时候启动。 这个方法会返回一个bool值，如果是ture的话，说明期望状态设置成功。如果是false的话，可能存在多个helper\n\n比如 一个公司发布过很多App，但其中的helper bundle identifier都是相同的。 这样会导致在同一个电脑上只有一个App(greatest bundle version number)能成功注册登录项。\n\n这个方式，我未实践过。贴几个相关的博文吧：\n\n[The Launch At Login Sandbox Project](http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/)\n\n[Adding a preference to launch sandboxed app on login](http://rhult.github.io/articles/sandboxed-launch-on-login/)\n\n[在SandBox沙盒下实现程序的开机启动](http://www.tanhao.me/pieces/590.html/)\n\n\n\n## Adding Login Items Using a Shared File List\n\n```\n- (BOOL)isLaunchAtStartup {\n    // See if the app is currently in LoginItems.\n    LSSharedFileListItemRef itemRef = [self itemRefInLoginItems];\n    // Store away that boolean.\n    BOOL isInList = itemRef != nil;\n    // Release the reference if it exists.\n    if (itemRef != nil) CFRelease(itemRef);\n    \n    return isInList;\n}\n\n- (IBAction)toggleLaunchAtStartup:(id)sender {\n    // Toggle the state.\n    BOOL shouldBeToggled = ![self isLaunchAtStartup];\n    // Get the LoginItems list.\n    LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);\n    if (loginItemsRef == nil) return;\n    if (shouldBeToggled) {\n        // Add the app to the LoginItems list.\n        CFURLRef appUrl = (__bridge CFURLRef)[NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];\n        LSSharedFileListItemRef itemRef = LSSharedFileListInsertItemURL(loginItemsRef, kLSSharedFileListItemLast, NULL, NULL, appUrl, NULL, NULL);\n        if (itemRef) CFRelease(itemRef);\n        [[self.statusMenu itemAtIndex:0] setTitle:@\"取消开机自启动\"];\n    }\n    else {\n        // Remove the app from the LoginItems list.\n        LSSharedFileListItemRef itemRef = [self itemRefInLoginItems];\n        LSSharedFileListItemRemove(loginItemsRef,itemRef);\n        if (itemRef != nil) CFRelease(itemRef);\n        [[self.statusMenu itemAtIndex:0] setTitle:@\"设置开机自启动\"];\n    }\n    CFRelease(loginItemsRef);\n}\n\n- (LSSharedFileListItemRef)itemRefInLoginItems {\n    LSSharedFileListItemRef res = nil;\n    \n    // Get the app's URL.\n    NSURL *bundleURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];\n    // Get the LoginItems list.\n    LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);\n    if (loginItemsRef == nil) return nil;\n    // Iterate over the LoginItems.\n    NSArray *loginItems = (__bridge NSArray *)LSSharedFileListCopySnapshot(loginItemsRef, nil);\n    for (id item in loginItems) {\n        LSSharedFileListItemRef itemRef = (__bridge LSSharedFileListItemRef)(item);\n        CFURLRef itemURLRef;\n        if (LSSharedFileListItemResolve(itemRef, 0, &itemURLRef, NULL) == noErr) {\n            // Again, use toll-free bridging.\n            NSURL *itemURL = (__bridge NSURL *)itemURLRef;\n            if ([itemURL isEqual:bundleURL]) {\n                res = itemRef;\n                break;\n            }\n        }\n    }\n    // Retain the LoginItem reference.\n    if (res != nil) CFRetain(res);\n    CFRelease(loginItemsRef);\n    CFRelease((__bridge CFTypeRef)(loginItems));\n    \n    return res;\n}\n\n```\n\n[launch on startup](http://bdunagan.com/2010/09/25/cocoa-tip-enabling-launch-on-startup/)\n\n\n** 主要特别注意的是以上方法大都是 Deprecated in OS X V10.10 所以如果你要开发Deployment Target 10.10 以上的App的话不推荐使用这个方法。显然这些API在之后的OS X更新版本中，将会无法调用。导致你的App出现编译问题。 **\n\n当然介于这个方式比较简单，你仍然想使用的话。你可以设置Deployment Target为 10.9 来使用这些在 10.10被废弃的API。是没有问题的。我就是这么干的，😊\n\n\n## Deprecated APIs\n\nIn previous versions of OS X, it is possible to add login items by sending an Apple event, by using the CFPreferences API, and by manually editing a property list file. These approaches are deprecated.\n\nIf you need to maintain compatibility with versions of OS X prior to v10.5, the preferred approach is to use Apple events; for details, see LoginItemsAE. Using the CFPreferences API is an acceptable alternative. You should not directly edit the property list file on any version of OS X.\n\n早些 OS X版本的API 和实现方式，现在也许行不通了。我就不翻译了。 \n \n \n\n","source":"_posts/2016-02-29-Cocoa Launch at Login.md","raw":"---\nlayout: post\ntitle: 'Cocoa Launch at Login'\ndate: '2016-02-29'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - Cocoa\n     \nauthor: '778477'\n---\n\n\n# Cocoa Launch at Login \n\n从[Mac Developer Library](https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html)中查看文档：\n\n有两种方式可以添加登录启动项：使用Service Management framework 或 使用 shared file list\n\n这两种方式有差别：\n\n * 使用Service Management framework 在系统的登录项中是不可见的。只有卸载App才能移除登录项\n \n * 使用 shared file list 在系统的登录项中是可见的。用户可以直接在面板上控制他们。（If you use this API, your login item can be disabled by the user, so any other application that communicates with it it should have reasonable fallback behavior in case the login item is disabled.） 原文还有一句大意是指这个API有隐患，所以在OS X 10.10系统上 API被大量Deprecated\n \n\n下面具体介绍一下 这两种的实现\n\n## Adding Login Item Using the Service Management Framework\n\n应用要包含一个 Helper Target，类型也是应用。设置路径为Contents/Library/LoginItems。设置这个Helper Target info.plist LSBackgroundOnly 为 YES。\n\n使用 ``` SMLoginItemSetEnabled ```方法授权Helper，需要传入两个参数：```CFStringRef```指的是Helper Target的bundle identifier. ``` Boolean ``` 表示期望状态。 传入 ```true``` Helper 会每次在用户登录的时候启动。 传入``` false ``` 来注销这个登录项，不会在用户登录的时候启动。 这个方法会返回一个bool值，如果是ture的话，说明期望状态设置成功。如果是false的话，可能存在多个helper\n\n比如 一个公司发布过很多App，但其中的helper bundle identifier都是相同的。 这样会导致在同一个电脑上只有一个App(greatest bundle version number)能成功注册登录项。\n\n这个方式，我未实践过。贴几个相关的博文吧：\n\n[The Launch At Login Sandbox Project](http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/)\n\n[Adding a preference to launch sandboxed app on login](http://rhult.github.io/articles/sandboxed-launch-on-login/)\n\n[在SandBox沙盒下实现程序的开机启动](http://www.tanhao.me/pieces/590.html/)\n\n\n\n## Adding Login Items Using a Shared File List\n\n```\n- (BOOL)isLaunchAtStartup {\n    // See if the app is currently in LoginItems.\n    LSSharedFileListItemRef itemRef = [self itemRefInLoginItems];\n    // Store away that boolean.\n    BOOL isInList = itemRef != nil;\n    // Release the reference if it exists.\n    if (itemRef != nil) CFRelease(itemRef);\n    \n    return isInList;\n}\n\n- (IBAction)toggleLaunchAtStartup:(id)sender {\n    // Toggle the state.\n    BOOL shouldBeToggled = ![self isLaunchAtStartup];\n    // Get the LoginItems list.\n    LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);\n    if (loginItemsRef == nil) return;\n    if (shouldBeToggled) {\n        // Add the app to the LoginItems list.\n        CFURLRef appUrl = (__bridge CFURLRef)[NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];\n        LSSharedFileListItemRef itemRef = LSSharedFileListInsertItemURL(loginItemsRef, kLSSharedFileListItemLast, NULL, NULL, appUrl, NULL, NULL);\n        if (itemRef) CFRelease(itemRef);\n        [[self.statusMenu itemAtIndex:0] setTitle:@\"取消开机自启动\"];\n    }\n    else {\n        // Remove the app from the LoginItems list.\n        LSSharedFileListItemRef itemRef = [self itemRefInLoginItems];\n        LSSharedFileListItemRemove(loginItemsRef,itemRef);\n        if (itemRef != nil) CFRelease(itemRef);\n        [[self.statusMenu itemAtIndex:0] setTitle:@\"设置开机自启动\"];\n    }\n    CFRelease(loginItemsRef);\n}\n\n- (LSSharedFileListItemRef)itemRefInLoginItems {\n    LSSharedFileListItemRef res = nil;\n    \n    // Get the app's URL.\n    NSURL *bundleURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];\n    // Get the LoginItems list.\n    LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);\n    if (loginItemsRef == nil) return nil;\n    // Iterate over the LoginItems.\n    NSArray *loginItems = (__bridge NSArray *)LSSharedFileListCopySnapshot(loginItemsRef, nil);\n    for (id item in loginItems) {\n        LSSharedFileListItemRef itemRef = (__bridge LSSharedFileListItemRef)(item);\n        CFURLRef itemURLRef;\n        if (LSSharedFileListItemResolve(itemRef, 0, &itemURLRef, NULL) == noErr) {\n            // Again, use toll-free bridging.\n            NSURL *itemURL = (__bridge NSURL *)itemURLRef;\n            if ([itemURL isEqual:bundleURL]) {\n                res = itemRef;\n                break;\n            }\n        }\n    }\n    // Retain the LoginItem reference.\n    if (res != nil) CFRetain(res);\n    CFRelease(loginItemsRef);\n    CFRelease((__bridge CFTypeRef)(loginItems));\n    \n    return res;\n}\n\n```\n\n[launch on startup](http://bdunagan.com/2010/09/25/cocoa-tip-enabling-launch-on-startup/)\n\n\n** 主要特别注意的是以上方法大都是 Deprecated in OS X V10.10 所以如果你要开发Deployment Target 10.10 以上的App的话不推荐使用这个方法。显然这些API在之后的OS X更新版本中，将会无法调用。导致你的App出现编译问题。 **\n\n当然介于这个方式比较简单，你仍然想使用的话。你可以设置Deployment Target为 10.9 来使用这些在 10.10被废弃的API。是没有问题的。我就是这么干的，😊\n\n\n## Deprecated APIs\n\nIn previous versions of OS X, it is possible to add login items by sending an Apple event, by using the CFPreferences API, and by manually editing a property list file. These approaches are deprecated.\n\nIf you need to maintain compatibility with versions of OS X prior to v10.5, the preferred approach is to use Apple events; for details, see LoginItemsAE. Using the CFPreferences API is an acceptable alternative. You should not directly edit the property list file on any version of OS X.\n\n早些 OS X版本的API 和实现方式，现在也许行不通了。我就不翻译了。 \n \n \n\n","slug":"2016-02-29-Cocoa Launch at Login","published":1,"updated":"2016-02-29T07:27:35.000Z","_id":"cip3cw771000ny8a3ph3yxtj7","comments":1,"photos":[],"link":"","content":"<h1 id=\"Cocoa-Launch-at-Login\"><a href=\"#Cocoa-Launch-at-Login\" class=\"headerlink\" title=\"Cocoa Launch at Login\"></a>Cocoa Launch at Login</h1><p>从<a href=\"https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html\" target=\"_blank\" rel=\"external\">Mac Developer Library</a>中查看文档：</p>\n<p>有两种方式可以添加登录启动项：使用Service Management framework 或 使用 shared file list</p>\n<p>这两种方式有差别：</p>\n<ul>\n<li><p>使用Service Management framework 在系统的登录项中是不可见的。只有卸载App才能移除登录项</p>\n</li>\n<li><p>使用 shared file list 在系统的登录项中是可见的。用户可以直接在面板上控制他们。（If you use this API, your login item can be disabled by the user, so any other application that communicates with it it should have reasonable fallback behavior in case the login item is disabled.） 原文还有一句大意是指这个API有隐患，所以在OS X 10.10系统上 API被大量Deprecated</p>\n</li>\n</ul>\n<p>下面具体介绍一下 这两种的实现</p>\n<h2 id=\"Adding-Login-Item-Using-the-Service-Management-Framework\"><a href=\"#Adding-Login-Item-Using-the-Service-Management-Framework\" class=\"headerlink\" title=\"Adding Login Item Using the Service Management Framework\"></a>Adding Login Item Using the Service Management Framework</h2><p>应用要包含一个 Helper Target，类型也是应用。设置路径为Contents/Library/LoginItems。设置这个Helper Target info.plist LSBackgroundOnly 为 YES。</p>\n<p>使用 <figure class=\"highlight plain\"><figcaption><span>```方法授权Helper，需要传入两个参数：```CFStringRef```指的是Helper Target的bundle identifier. ``` Boolean ``` 表示期望状态。 传入 ```true``` Helper 会每次在用户登录的时候启动。 传入``` false ``` 来注销这个登录项，不会在用户登录的时候启动。 这个方法会返回一个bool值，如果是ture的话，说明期望状态设置成功。如果是false的话，可能存在多个helper</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">比如 一个公司发布过很多App，但其中的helper bundle identifier都是相同的。 这样会导致在同一个电脑上只有一个App(greatest bundle version number)能成功注册登录项。</span><br><span class=\"line\"></span><br><span class=\"line\">这个方式，我未实践过。贴几个相关的博文吧：</span><br><span class=\"line\"></span><br><span class=\"line\">[The Launch At Login Sandbox Project](http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/)</span><br><span class=\"line\"></span><br><span class=\"line\">[Adding a preference to launch sandboxed app on login](http://rhult.github.io/articles/sandboxed-launch-on-login/)</span><br><span class=\"line\"></span><br><span class=\"line\">[在SandBox沙盒下实现程序的开机启动](http://www.tanhao.me/pieces/590.html/)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## Adding Login Items Using a Shared File List</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>(BOOL)isLaunchAtStartup {<br>  // See if the app is currently in LoginItems.<br>  LSSharedFileListItemRef itemRef = [self itemRefInLoginItems];<br>  // Store away that boolean.<br>  BOOL isInList = itemRef != nil;<br>  // Release the reference if it exists.<br>  if (itemRef != nil) CFRelease(itemRef);</p>\n<p>  return isInList;<br>}</p>\n</li>\n<li><p>(IBAction)toggleLaunchAtStartup:(id)sender {<br>  // Toggle the state.<br>  BOOL shouldBeToggled = ![self isLaunchAtStartup];<br>  // Get the LoginItems list.<br>  LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);<br>  if (loginItemsRef == nil) return;<br>  if (shouldBeToggled) {</p>\n<pre><code>// Add the app to the LoginItems list.\nCFURLRef appUrl = (__bridge CFURLRef)[NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];\nLSSharedFileListItemRef itemRef = LSSharedFileListInsertItemURL(loginItemsRef, kLSSharedFileListItemLast, NULL, NULL, appUrl, NULL, NULL);\nif (itemRef) CFRelease(itemRef);\n[[self.statusMenu itemAtIndex:0] setTitle:@&quot;取消开机自启动&quot;];\n</code></pre><p>  }<br>  else {</p>\n<pre><code>// Remove the app from the LoginItems list.\nLSSharedFileListItemRef itemRef = [self itemRefInLoginItems];\nLSSharedFileListItemRemove(loginItemsRef,itemRef);\nif (itemRef != nil) CFRelease(itemRef);\n[[self.statusMenu itemAtIndex:0] setTitle:@&quot;设置开机自启动&quot;];\n</code></pre><p>  }<br>  CFRelease(loginItemsRef);<br>}</p>\n</li>\n<li><p>(LSSharedFileListItemRef)itemRefInLoginItems {<br>  LSSharedFileListItemRef res = nil;</p>\n<p>  // Get the app’s URL.<br>  NSURL <em>bundleURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];<br>  // Get the LoginItems list.<br>  LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);<br>  if (loginItemsRef == nil) return nil;<br>  // Iterate over the LoginItems.<br>  NSArray </em>loginItems = (__bridge NSArray *)LSSharedFileListCopySnapshot(loginItemsRef, nil);<br>  for (id item in loginItems) {</p>\n<pre><code>LSSharedFileListItemRef itemRef = (__bridge LSSharedFileListItemRef)(item);\nCFURLRef itemURLRef;\nif (LSSharedFileListItemResolve(itemRef, 0, &amp;itemURLRef, NULL) == noErr) {\n    // Again, use toll-free bridging.\n    NSURL *itemURL = (__bridge NSURL *)itemURLRef;\n    if ([itemURL isEqual:bundleURL]) {\n        res = itemRef;\n        break;\n    }\n}\n</code></pre><p>  }<br>  // Retain the LoginItem reference.<br>  if (res != nil) CFRetain(res);<br>  CFRelease(loginItemsRef);<br>  CFRelease((__bridge CFTypeRef)(loginItems));</p>\n<p>  return res;<br>}</p>\n</li>\n</ul>\n<p>```</p>\n<p><a href=\"http://bdunagan.com/2010/09/25/cocoa-tip-enabling-launch-on-startup/\" target=\"_blank\" rel=\"external\">launch on startup</a></p>\n<p><strong> 主要特别注意的是以上方法大都是 Deprecated in OS X V10.10 所以如果你要开发Deployment Target 10.10 以上的App的话不推荐使用这个方法。显然这些API在之后的OS X更新版本中，将会无法调用。导致你的App出现编译问题。 </strong></p>\n<p>当然介于这个方式比较简单，你仍然想使用的话。你可以设置Deployment Target为 10.9 来使用这些在 10.10被废弃的API。是没有问题的。我就是这么干的，😊</p>\n<h2 id=\"Deprecated-APIs\"><a href=\"#Deprecated-APIs\" class=\"headerlink\" title=\"Deprecated APIs\"></a>Deprecated APIs</h2><p>In previous versions of OS X, it is possible to add login items by sending an Apple event, by using the CFPreferences API, and by manually editing a property list file. These approaches are deprecated.</p>\n<p>If you need to maintain compatibility with versions of OS X prior to v10.5, the preferred approach is to use Apple events; for details, see LoginItemsAE. Using the CFPreferences API is an acceptable alternative. You should not directly edit the property list file on any version of OS X.</p>\n<p>早些 OS X版本的API 和实现方式，现在也许行不通了。我就不翻译了。 </p>\n","excerpt":"","more":"<h1 id=\"Cocoa-Launch-at-Login\"><a href=\"#Cocoa-Launch-at-Login\" class=\"headerlink\" title=\"Cocoa Launch at Login\"></a>Cocoa Launch at Login</h1><p>从<a href=\"https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html\">Mac Developer Library</a>中查看文档：</p>\n<p>有两种方式可以添加登录启动项：使用Service Management framework 或 使用 shared file list</p>\n<p>这两种方式有差别：</p>\n<ul>\n<li><p>使用Service Management framework 在系统的登录项中是不可见的。只有卸载App才能移除登录项</p>\n</li>\n<li><p>使用 shared file list 在系统的登录项中是可见的。用户可以直接在面板上控制他们。（If you use this API, your login item can be disabled by the user, so any other application that communicates with it it should have reasonable fallback behavior in case the login item is disabled.） 原文还有一句大意是指这个API有隐患，所以在OS X 10.10系统上 API被大量Deprecated</p>\n</li>\n</ul>\n<p>下面具体介绍一下 这两种的实现</p>\n<h2 id=\"Adding-Login-Item-Using-the-Service-Management-Framework\"><a href=\"#Adding-Login-Item-Using-the-Service-Management-Framework\" class=\"headerlink\" title=\"Adding Login Item Using the Service Management Framework\"></a>Adding Login Item Using the Service Management Framework</h2><p>应用要包含一个 Helper Target，类型也是应用。设置路径为Contents/Library/LoginItems。设置这个Helper Target info.plist LSBackgroundOnly 为 YES。</p>\n<p>使用 <figure class=\"highlight plain\"><figcaption><span>```方法授权Helper，需要传入两个参数：```CFStringRef```指的是Helper Target的bundle identifier. ``` Boolean ``` 表示期望状态。 传入 ```true``` Helper 会每次在用户登录的时候启动。 传入``` false ``` 来注销这个登录项，不会在用户登录的时候启动。 这个方法会返回一个bool值，如果是ture的话，说明期望状态设置成功。如果是false的话，可能存在多个helper</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">比如 一个公司发布过很多App，但其中的helper bundle identifier都是相同的。 这样会导致在同一个电脑上只有一个App(greatest bundle version number)能成功注册登录项。</span><br><span class=\"line\"></span><br><span class=\"line\">这个方式，我未实践过。贴几个相关的博文吧：</span><br><span class=\"line\"></span><br><span class=\"line\">[The Launch At Login Sandbox Project](http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/)</span><br><span class=\"line\"></span><br><span class=\"line\">[Adding a preference to launch sandboxed app on login](http://rhult.github.io/articles/sandboxed-launch-on-login/)</span><br><span class=\"line\"></span><br><span class=\"line\">[在SandBox沙盒下实现程序的开机启动](http://www.tanhao.me/pieces/590.html/)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## Adding Login Items Using a Shared File List</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>(BOOL)isLaunchAtStartup {<br>  // See if the app is currently in LoginItems.<br>  LSSharedFileListItemRef itemRef = [self itemRefInLoginItems];<br>  // Store away that boolean.<br>  BOOL isInList = itemRef != nil;<br>  // Release the reference if it exists.<br>  if (itemRef != nil) CFRelease(itemRef);</p>\n<p>  return isInList;<br>}</p>\n</li>\n<li><p>(IBAction)toggleLaunchAtStartup:(id)sender {<br>  // Toggle the state.<br>  BOOL shouldBeToggled = ![self isLaunchAtStartup];<br>  // Get the LoginItems list.<br>  LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);<br>  if (loginItemsRef == nil) return;<br>  if (shouldBeToggled) {</p>\n<pre><code>// Add the app to the LoginItems list.\nCFURLRef appUrl = (__bridge CFURLRef)[NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];\nLSSharedFileListItemRef itemRef = LSSharedFileListInsertItemURL(loginItemsRef, kLSSharedFileListItemLast, NULL, NULL, appUrl, NULL, NULL);\nif (itemRef) CFRelease(itemRef);\n[[self.statusMenu itemAtIndex:0] setTitle:@&quot;取消开机自启动&quot;];\n</code></pre><p>  }<br>  else {</p>\n<pre><code>// Remove the app from the LoginItems list.\nLSSharedFileListItemRef itemRef = [self itemRefInLoginItems];\nLSSharedFileListItemRemove(loginItemsRef,itemRef);\nif (itemRef != nil) CFRelease(itemRef);\n[[self.statusMenu itemAtIndex:0] setTitle:@&quot;设置开机自启动&quot;];\n</code></pre><p>  }<br>  CFRelease(loginItemsRef);<br>}</p>\n</li>\n<li><p>(LSSharedFileListItemRef)itemRefInLoginItems {<br>  LSSharedFileListItemRef res = nil;</p>\n<p>  // Get the app’s URL.<br>  NSURL <em>bundleURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];<br>  // Get the LoginItems list.<br>  LSSharedFileListRef loginItemsRef = LSSharedFileListCreate(NULL, kLSSharedFileListSessionLoginItems, NULL);<br>  if (loginItemsRef == nil) return nil;<br>  // Iterate over the LoginItems.<br>  NSArray </em>loginItems = (__bridge NSArray *)LSSharedFileListCopySnapshot(loginItemsRef, nil);<br>  for (id item in loginItems) {</p>\n<pre><code>LSSharedFileListItemRef itemRef = (__bridge LSSharedFileListItemRef)(item);\nCFURLRef itemURLRef;\nif (LSSharedFileListItemResolve(itemRef, 0, &amp;itemURLRef, NULL) == noErr) {\n    // Again, use toll-free bridging.\n    NSURL *itemURL = (__bridge NSURL *)itemURLRef;\n    if ([itemURL isEqual:bundleURL]) {\n        res = itemRef;\n        break;\n    }\n}\n</code></pre><p>  }<br>  // Retain the LoginItem reference.<br>  if (res != nil) CFRetain(res);<br>  CFRelease(loginItemsRef);<br>  CFRelease((__bridge CFTypeRef)(loginItems));</p>\n<p>  return res;<br>}</p>\n</li>\n</ul>\n<p>```</p>\n<p><a href=\"http://bdunagan.com/2010/09/25/cocoa-tip-enabling-launch-on-startup/\">launch on startup</a></p>\n<p><strong> 主要特别注意的是以上方法大都是 Deprecated in OS X V10.10 所以如果你要开发Deployment Target 10.10 以上的App的话不推荐使用这个方法。显然这些API在之后的OS X更新版本中，将会无法调用。导致你的App出现编译问题。 </strong></p>\n<p>当然介于这个方式比较简单，你仍然想使用的话。你可以设置Deployment Target为 10.9 来使用这些在 10.10被废弃的API。是没有问题的。我就是这么干的，😊</p>\n<h2 id=\"Deprecated-APIs\"><a href=\"#Deprecated-APIs\" class=\"headerlink\" title=\"Deprecated APIs\"></a>Deprecated APIs</h2><p>In previous versions of OS X, it is possible to add login items by sending an Apple event, by using the CFPreferences API, and by manually editing a property list file. These approaches are deprecated.</p>\n<p>If you need to maintain compatibility with versions of OS X prior to v10.5, the preferred approach is to use Apple events; for details, see LoginItemsAE. Using the CFPreferences API is an acceptable alternative. You should not directly edit the property list file on any version of OS X.</p>\n<p>早些 OS X版本的API 和实现方式，现在也许行不通了。我就不翻译了。 </p>\n"},{"layout":"post","title":"Cocoa auto update","date":"2016-03-30T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\n# Cocoa auto update\n\n我们在进行Mac 桌面应用开发的时候，需要维护应用的更新。我们希望说每一次的新版本发布,用户都能够自动更新下载版本并且替换掉老版本。\n\n\n首先需要一个文件服务器来存放 对外发布的软件压缩包。这里还维护一份releaseInfo.json对外描述已有的版本信息\n\n```\n{\n  \"app\": \"MyApp\",\n  \"version\": \"1.0.0\",\n  \"channels\": [\"release\"],\n  \"entries\": [\n    {\n      \"os\": \"osx\",\n      \"architectures\": [\"x86-64\"],\n      \"osversion\": \" >= 10.6 \",\n      \"appversion\": \"1.0.0\",\n      \"path\": \"MyApp-1.0.0-osx.tar.gz\",\n      \"format\": \"gz\"\n    }\n  ]\n}\n\n```\n\n客户端定时check版本信息，发现服务端有版本号大于自身版本号的时候 触发更新下载逻辑。 这里使用`NSURLSession`即可，下载过程不在这里描述了。\n\n当我们自行下载完安装包之后，如何帮助用户自动安装呢?\n\n我们下载完成之后，可用使用`NSTask`来调用一个 shell 脚本，让它来帮助我们结束老版本的进程，同时将下载好的新版本解压、拷贝内容到老版本的路径下、重新唤起App。 这个时候，app运行就是新版本的样式和逻辑\n\n附上具体的shell脚本：\n \n**注意需要传入的参数：tarball指的下载的安装包路径，destination指的当前app的bundlePath**\n\n\n```\nfunction abort() {\n    echo \"Update script aborted.\"\n    echo \"Removing temporary directory...\"\n    rm -rf $tempdir\n    echo \"Removing tarball...\"\n    rm -rf \"$tarball\"\n    echo \"Relaunching bundle...\"\n    open \"$destination\"\n    rm -f ~/.auto-update.lock\n    exit 1\n}\n\ntarball=$1\ndestination=$2\n\nlockfile ~/.auto-update.lock\n\n# Step 1. Wait until all processes from within the bundle are closed\n\nprocesses=$(echo \"$(ps ax)\" | grep -v \"$0\")\n# Escape the destination into a regexp that matches it\nregexp=$(echo \"$destination\" | sed 's/[^[:alnum:]_-]/\\\\&/g')\n# Filters entries matching the regexp, and do some magic to preserve the trailing newline\nmatches=$(echo \"$processes\" | awk \"/$regexp/ { print \\$1 }\"; echo .)\nmatches=${matches%.}\n# Count matches\ncount=`printf \"%s\" \"$matches\" | wc -l`\nif [[ $count -gt 0 ]]; then\n    for pid in $matches\n    do\n        echo \"$pid\"\n        kill -9 \"$pid\"\n    done\nfi\n\n\n# Step 2. Check if the downloaded tar is empty, if so abort\nif [ ! -s \"$tarball\" ]\nthen\n    abort\nfi\n\n# Step 3. Extract the new contents\necho \"Creating temporary directory...\"\ntempdir=`mktemp -d /tmp/auto-update.XXXXX`\necho \"Extracting new content from tarball...\"\ntar -xf \"$tarball\" -C \"$tempdir\"\n\n# Step 4. Check if the extraction worked, if not abort\nif [ $? -ne 0 ]\nthen\n    abort\nfi\n\n# Step 5. Remove the old bundle directory\necho \"Removing bundle...\"\nrm -rf \"$destination\"/*\necho \"Moving new content into place...\"\nmv -f $tempdir'/'$(ls $tempdir | head -n 1)'/'* \"$destination\"'/'\necho \"Make sure destination is not quarantined...\"\nxattr -d com.apple.quarantine \"$destination\"\necho \"Removing temporary directory...\"\nrm -rf $tempdir\necho \"Removing tarball...\"\nrm -rf \"$tarball\"\n\n# Step 6. (Re)launch the destination bundle\necho \"Relaunching bundle...\"\nopen \"$destination\"\n\necho \"Done.\"\nrm -f ~/.auto-update.lock\n```\n\n\n# 参考资料\n* https://github.com/Automattic/auto-update\n* https://github.com/Automattic/auto-update-server\n\n\n\n","source":"_posts/2016-03-30-Cocoa Auto Update.md","raw":"---\nlayout: post\ntitle: 'Cocoa auto update'\ndate: '2016-03-30'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - Cocoa\n     \nauthor: '778477'\n---\n\n\n# Cocoa auto update\n\n我们在进行Mac 桌面应用开发的时候，需要维护应用的更新。我们希望说每一次的新版本发布,用户都能够自动更新下载版本并且替换掉老版本。\n\n\n首先需要一个文件服务器来存放 对外发布的软件压缩包。这里还维护一份releaseInfo.json对外描述已有的版本信息\n\n```\n{\n  \"app\": \"MyApp\",\n  \"version\": \"1.0.0\",\n  \"channels\": [\"release\"],\n  \"entries\": [\n    {\n      \"os\": \"osx\",\n      \"architectures\": [\"x86-64\"],\n      \"osversion\": \" >= 10.6 \",\n      \"appversion\": \"1.0.0\",\n      \"path\": \"MyApp-1.0.0-osx.tar.gz\",\n      \"format\": \"gz\"\n    }\n  ]\n}\n\n```\n\n客户端定时check版本信息，发现服务端有版本号大于自身版本号的时候 触发更新下载逻辑。 这里使用`NSURLSession`即可，下载过程不在这里描述了。\n\n当我们自行下载完安装包之后，如何帮助用户自动安装呢?\n\n我们下载完成之后，可用使用`NSTask`来调用一个 shell 脚本，让它来帮助我们结束老版本的进程，同时将下载好的新版本解压、拷贝内容到老版本的路径下、重新唤起App。 这个时候，app运行就是新版本的样式和逻辑\n\n附上具体的shell脚本：\n \n**注意需要传入的参数：tarball指的下载的安装包路径，destination指的当前app的bundlePath**\n\n\n```\nfunction abort() {\n    echo \"Update script aborted.\"\n    echo \"Removing temporary directory...\"\n    rm -rf $tempdir\n    echo \"Removing tarball...\"\n    rm -rf \"$tarball\"\n    echo \"Relaunching bundle...\"\n    open \"$destination\"\n    rm -f ~/.auto-update.lock\n    exit 1\n}\n\ntarball=$1\ndestination=$2\n\nlockfile ~/.auto-update.lock\n\n# Step 1. Wait until all processes from within the bundle are closed\n\nprocesses=$(echo \"$(ps ax)\" | grep -v \"$0\")\n# Escape the destination into a regexp that matches it\nregexp=$(echo \"$destination\" | sed 's/[^[:alnum:]_-]/\\\\&/g')\n# Filters entries matching the regexp, and do some magic to preserve the trailing newline\nmatches=$(echo \"$processes\" | awk \"/$regexp/ { print \\$1 }\"; echo .)\nmatches=${matches%.}\n# Count matches\ncount=`printf \"%s\" \"$matches\" | wc -l`\nif [[ $count -gt 0 ]]; then\n    for pid in $matches\n    do\n        echo \"$pid\"\n        kill -9 \"$pid\"\n    done\nfi\n\n\n# Step 2. Check if the downloaded tar is empty, if so abort\nif [ ! -s \"$tarball\" ]\nthen\n    abort\nfi\n\n# Step 3. Extract the new contents\necho \"Creating temporary directory...\"\ntempdir=`mktemp -d /tmp/auto-update.XXXXX`\necho \"Extracting new content from tarball...\"\ntar -xf \"$tarball\" -C \"$tempdir\"\n\n# Step 4. Check if the extraction worked, if not abort\nif [ $? -ne 0 ]\nthen\n    abort\nfi\n\n# Step 5. Remove the old bundle directory\necho \"Removing bundle...\"\nrm -rf \"$destination\"/*\necho \"Moving new content into place...\"\nmv -f $tempdir'/'$(ls $tempdir | head -n 1)'/'* \"$destination\"'/'\necho \"Make sure destination is not quarantined...\"\nxattr -d com.apple.quarantine \"$destination\"\necho \"Removing temporary directory...\"\nrm -rf $tempdir\necho \"Removing tarball...\"\nrm -rf \"$tarball\"\n\n# Step 6. (Re)launch the destination bundle\necho \"Relaunching bundle...\"\nopen \"$destination\"\n\necho \"Done.\"\nrm -f ~/.auto-update.lock\n```\n\n\n# 参考资料\n* https://github.com/Automattic/auto-update\n* https://github.com/Automattic/auto-update-server\n\n\n\n","slug":"2016-03-30-Cocoa Auto Update","published":1,"updated":"2016-03-30T15:28:20.000Z","_id":"cip3cw774000oy8a3j8qykjqf","comments":1,"photos":[],"link":"","content":"<h1 id=\"Cocoa-auto-update\"><a href=\"#Cocoa-auto-update\" class=\"headerlink\" title=\"Cocoa auto update\"></a>Cocoa auto update</h1><p>我们在进行Mac 桌面应用开发的时候，需要维护应用的更新。我们希望说每一次的新版本发布,用户都能够自动更新下载版本并且替换掉老版本。</p>\n<p>首先需要一个文件服务器来存放 对外发布的软件压缩包。这里还维护一份releaseInfo.json对外描述已有的版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;app&quot;: &quot;MyApp&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;channels&quot;: [&quot;release&quot;],</span><br><span class=\"line\">  &quot;entries&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;os&quot;: &quot;osx&quot;,</span><br><span class=\"line\">      &quot;architectures&quot;: [&quot;x86-64&quot;],</span><br><span class=\"line\">      &quot;osversion&quot;: &quot; &gt;= 10.6 &quot;,</span><br><span class=\"line\">      &quot;appversion&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">      &quot;path&quot;: &quot;MyApp-1.0.0-osx.tar.gz&quot;,</span><br><span class=\"line\">      &quot;format&quot;: &quot;gz&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端定时check版本信息，发现服务端有版本号大于自身版本号的时候 触发更新下载逻辑。 这里使用<code>NSURLSession</code>即可，下载过程不在这里描述了。</p>\n<p>当我们自行下载完安装包之后，如何帮助用户自动安装呢?</p>\n<p>我们下载完成之后，可用使用<code>NSTask</code>来调用一个 shell 脚本，让它来帮助我们结束老版本的进程，同时将下载好的新版本解压、拷贝内容到老版本的路径下、重新唤起App。 这个时候，app运行就是新版本的样式和逻辑</p>\n<p>附上具体的shell脚本：</p>\n<p><strong>注意需要传入的参数：tarball指的下载的安装包路径，destination指的当前app的bundlePath</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function abort() &#123;</span><br><span class=\"line\">    echo &quot;Update script aborted.&quot;</span><br><span class=\"line\">    echo &quot;Removing temporary directory...&quot;</span><br><span class=\"line\">    rm -rf $tempdir</span><br><span class=\"line\">    echo &quot;Removing tarball...&quot;</span><br><span class=\"line\">    rm -rf &quot;$tarball&quot;</span><br><span class=\"line\">    echo &quot;Relaunching bundle...&quot;</span><br><span class=\"line\">    open &quot;$destination&quot;</span><br><span class=\"line\">    rm -f ~/.auto-update.lock</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tarball=$1</span><br><span class=\"line\">destination=$2</span><br><span class=\"line\"></span><br><span class=\"line\">lockfile ~/.auto-update.lock</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 1. Wait until all processes from within the bundle are closed</span><br><span class=\"line\"></span><br><span class=\"line\">processes=$(echo &quot;$(ps ax)&quot; | grep -v &quot;$0&quot;)</span><br><span class=\"line\"># Escape the destination into a regexp that matches it</span><br><span class=\"line\">regexp=$(echo &quot;$destination&quot; | sed &apos;s/[^[:alnum:]_-]/\\\\&amp;/g&apos;)</span><br><span class=\"line\"># Filters entries matching the regexp, and do some magic to preserve the trailing newline</span><br><span class=\"line\">matches=$(echo &quot;$processes&quot; | awk &quot;/$regexp/ &#123; print \\$1 &#125;&quot;; echo .)</span><br><span class=\"line\">matches=$&#123;matches%.&#125;</span><br><span class=\"line\"># Count matches</span><br><span class=\"line\">count=`printf &quot;%s&quot; &quot;$matches&quot; | wc -l`</span><br><span class=\"line\">if [[ $count -gt 0 ]]; then</span><br><span class=\"line\">    for pid in $matches</span><br><span class=\"line\">    do</span><br><span class=\"line\">        echo &quot;$pid&quot;</span><br><span class=\"line\">        kill -9 &quot;$pid&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Step 2. Check if the downloaded tar is empty, if so abort</span><br><span class=\"line\">if [ ! -s &quot;$tarball&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    abort</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 3. Extract the new contents</span><br><span class=\"line\">echo &quot;Creating temporary directory...&quot;</span><br><span class=\"line\">tempdir=`mktemp -d /tmp/auto-update.XXXXX`</span><br><span class=\"line\">echo &quot;Extracting new content from tarball...&quot;</span><br><span class=\"line\">tar -xf &quot;$tarball&quot; -C &quot;$tempdir&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 4. Check if the extraction worked, if not abort</span><br><span class=\"line\">if [ $? -ne 0 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    abort</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 5. Remove the old bundle directory</span><br><span class=\"line\">echo &quot;Removing bundle...&quot;</span><br><span class=\"line\">rm -rf &quot;$destination&quot;/*</span><br><span class=\"line\">echo &quot;Moving new content into place...&quot;</span><br><span class=\"line\">mv -f $tempdir&apos;/&apos;$(ls $tempdir | head -n 1)&apos;/&apos;* &quot;$destination&quot;&apos;/&apos;</span><br><span class=\"line\">echo &quot;Make sure destination is not quarantined...&quot;</span><br><span class=\"line\">xattr -d com.apple.quarantine &quot;$destination&quot;</span><br><span class=\"line\">echo &quot;Removing temporary directory...&quot;</span><br><span class=\"line\">rm -rf $tempdir</span><br><span class=\"line\">echo &quot;Removing tarball...&quot;</span><br><span class=\"line\">rm -rf &quot;$tarball&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 6. (Re)launch the destination bundle</span><br><span class=\"line\">echo &quot;Relaunching bundle...&quot;</span><br><span class=\"line\">open &quot;$destination&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Done.&quot;</span><br><span class=\"line\">rm -f ~/.auto-update.lock</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://github.com/Automattic/auto-update\" target=\"_blank\" rel=\"external\">https://github.com/Automattic/auto-update</a></li>\n<li><a href=\"https://github.com/Automattic/auto-update-server\" target=\"_blank\" rel=\"external\">https://github.com/Automattic/auto-update-server</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Cocoa-auto-update\"><a href=\"#Cocoa-auto-update\" class=\"headerlink\" title=\"Cocoa auto update\"></a>Cocoa auto update</h1><p>我们在进行Mac 桌面应用开发的时候，需要维护应用的更新。我们希望说每一次的新版本发布,用户都能够自动更新下载版本并且替换掉老版本。</p>\n<p>首先需要一个文件服务器来存放 对外发布的软件压缩包。这里还维护一份releaseInfo.json对外描述已有的版本信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;app&quot;: &quot;MyApp&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;channels&quot;: [&quot;release&quot;],</span><br><span class=\"line\">  &quot;entries&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;os&quot;: &quot;osx&quot;,</span><br><span class=\"line\">      &quot;architectures&quot;: [&quot;x86-64&quot;],</span><br><span class=\"line\">      &quot;osversion&quot;: &quot; &gt;= 10.6 &quot;,</span><br><span class=\"line\">      &quot;appversion&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">      &quot;path&quot;: &quot;MyApp-1.0.0-osx.tar.gz&quot;,</span><br><span class=\"line\">      &quot;format&quot;: &quot;gz&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端定时check版本信息，发现服务端有版本号大于自身版本号的时候 触发更新下载逻辑。 这里使用<code>NSURLSession</code>即可，下载过程不在这里描述了。</p>\n<p>当我们自行下载完安装包之后，如何帮助用户自动安装呢?</p>\n<p>我们下载完成之后，可用使用<code>NSTask</code>来调用一个 shell 脚本，让它来帮助我们结束老版本的进程，同时将下载好的新版本解压、拷贝内容到老版本的路径下、重新唤起App。 这个时候，app运行就是新版本的样式和逻辑</p>\n<p>附上具体的shell脚本：</p>\n<p><strong>注意需要传入的参数：tarball指的下载的安装包路径，destination指的当前app的bundlePath</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function abort() &#123;</span><br><span class=\"line\">    echo &quot;Update script aborted.&quot;</span><br><span class=\"line\">    echo &quot;Removing temporary directory...&quot;</span><br><span class=\"line\">    rm -rf $tempdir</span><br><span class=\"line\">    echo &quot;Removing tarball...&quot;</span><br><span class=\"line\">    rm -rf &quot;$tarball&quot;</span><br><span class=\"line\">    echo &quot;Relaunching bundle...&quot;</span><br><span class=\"line\">    open &quot;$destination&quot;</span><br><span class=\"line\">    rm -f ~/.auto-update.lock</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tarball=$1</span><br><span class=\"line\">destination=$2</span><br><span class=\"line\"></span><br><span class=\"line\">lockfile ~/.auto-update.lock</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 1. Wait until all processes from within the bundle are closed</span><br><span class=\"line\"></span><br><span class=\"line\">processes=$(echo &quot;$(ps ax)&quot; | grep -v &quot;$0&quot;)</span><br><span class=\"line\"># Escape the destination into a regexp that matches it</span><br><span class=\"line\">regexp=$(echo &quot;$destination&quot; | sed &apos;s/[^[:alnum:]_-]/\\\\&amp;/g&apos;)</span><br><span class=\"line\"># Filters entries matching the regexp, and do some magic to preserve the trailing newline</span><br><span class=\"line\">matches=$(echo &quot;$processes&quot; | awk &quot;/$regexp/ &#123; print \\$1 &#125;&quot;; echo .)</span><br><span class=\"line\">matches=$&#123;matches%.&#125;</span><br><span class=\"line\"># Count matches</span><br><span class=\"line\">count=`printf &quot;%s&quot; &quot;$matches&quot; | wc -l`</span><br><span class=\"line\">if [[ $count -gt 0 ]]; then</span><br><span class=\"line\">    for pid in $matches</span><br><span class=\"line\">    do</span><br><span class=\"line\">        echo &quot;$pid&quot;</span><br><span class=\"line\">        kill -9 &quot;$pid&quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Step 2. Check if the downloaded tar is empty, if so abort</span><br><span class=\"line\">if [ ! -s &quot;$tarball&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    abort</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 3. Extract the new contents</span><br><span class=\"line\">echo &quot;Creating temporary directory...&quot;</span><br><span class=\"line\">tempdir=`mktemp -d /tmp/auto-update.XXXXX`</span><br><span class=\"line\">echo &quot;Extracting new content from tarball...&quot;</span><br><span class=\"line\">tar -xf &quot;$tarball&quot; -C &quot;$tempdir&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 4. Check if the extraction worked, if not abort</span><br><span class=\"line\">if [ $? -ne 0 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    abort</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 5. Remove the old bundle directory</span><br><span class=\"line\">echo &quot;Removing bundle...&quot;</span><br><span class=\"line\">rm -rf &quot;$destination&quot;/*</span><br><span class=\"line\">echo &quot;Moving new content into place...&quot;</span><br><span class=\"line\">mv -f $tempdir&apos;/&apos;$(ls $tempdir | head -n 1)&apos;/&apos;* &quot;$destination&quot;&apos;/&apos;</span><br><span class=\"line\">echo &quot;Make sure destination is not quarantined...&quot;</span><br><span class=\"line\">xattr -d com.apple.quarantine &quot;$destination&quot;</span><br><span class=\"line\">echo &quot;Removing temporary directory...&quot;</span><br><span class=\"line\">rm -rf $tempdir</span><br><span class=\"line\">echo &quot;Removing tarball...&quot;</span><br><span class=\"line\">rm -rf &quot;$tarball&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 6. (Re)launch the destination bundle</span><br><span class=\"line\">echo &quot;Relaunching bundle...&quot;</span><br><span class=\"line\">open &quot;$destination&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Done.&quot;</span><br><span class=\"line\">rm -f ~/.auto-update.lock</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://github.com/Automattic/auto-update\">https://github.com/Automattic/auto-update</a></li>\n<li><a href=\"https://github.com/Automattic/auto-update-server\">https://github.com/Automattic/auto-update-server</a></li>\n</ul>\n"},{"layout":"post","title":"Minimum Size Subarray Sum","date":"2016-04-08T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n\n# Question\n\n[Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/)\n\n> Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum ≥ s. If there isn't one, return 0 instead.\n\n> For example, given the array [2,3,1,2,4,3] and s = 7,\nthe subarray [4,3] has the minimal length under the problem constraint.\n\n\n题目大意： 给定一个正数数组 nums和一个正数 s，找出最短长度的连续子数组 使其和 大于等于 s。如果没有的话，返回 0.\n\n\n# Solution\n\n## 暴力枚举 <span style=\"color:green;\">Accepted</span>  \n\n``` \nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        size_t n = nums.size();\n        int sum = 0;\n        int ans = INT_MAX;\n        for(int i=0;i<n;i++){\n            sum = nums[i];\n            if(sum >= s) return 1;\n            for(int j=i+1;j<n;j++){\n                sum += nums[j];\n                if(sum >= s){\n                    ans = min(ans,j-i+1);\n                    break;\n                }\n            }\n        }\n        \n        return ans==INT_MAX ? 0 : ans;\n    }\n};\n```\n\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum.png)\n\n\n## 暴力枚举 + flag优化 <span style=\"color:green;\">Accepted</span>\n\n```\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        size_t n = nums.size();\n        int sum = 0;\n        int ans = INT_MAX;\n        \n        bool flag;\n        for(int i=0;i<n;i++){\n            sum = nums[i];\n            if(sum >= s) return 1;\n            flag = false;\n            for(int j=i+1;j<n;j++){\n                sum += nums[j];\n                if(sum >= s){\n                    ans = min(ans,j-i+1);\n                    flag = true;\n                    break;\n                }\n            }\n            \n            if(!flag) break;\n        }\n        \n        return ans==INT_MAX ? 0 : ans;\n    }\n};\n```\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%202.png)\n\n## 枚举小窗口 <span style=\"color:green;\">Accepted</span>\n```\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        size_t n = nums.size();\n        int sum = 0;\n        int ans = INT_MAX;\n        int p = 0,q = 0;\n        \n        while(q < n){\n            sum += nums[q++];\n            \n            while(sum >= s){\n                ans = min(ans,q-p);\n                sum -= nums[p++];\n            }\n            \n        }\n        \n        return ans==INT_MAX ? 0 : ans;\n    }\n};\n```\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%203.png)","source":"_posts/2016-04-08-Minimum Size Subarray Sum.md","raw":"---\nlayout: post\ntitle: 'Minimum Size Subarray Sum'\ndate: '2016-04-08'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n\n# Question\n\n[Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/)\n\n> Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum ≥ s. If there isn't one, return 0 instead.\n\n> For example, given the array [2,3,1,2,4,3] and s = 7,\nthe subarray [4,3] has the minimal length under the problem constraint.\n\n\n题目大意： 给定一个正数数组 nums和一个正数 s，找出最短长度的连续子数组 使其和 大于等于 s。如果没有的话，返回 0.\n\n\n# Solution\n\n## 暴力枚举 <span style=\"color:green;\">Accepted</span>  \n\n``` \nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        size_t n = nums.size();\n        int sum = 0;\n        int ans = INT_MAX;\n        for(int i=0;i<n;i++){\n            sum = nums[i];\n            if(sum >= s) return 1;\n            for(int j=i+1;j<n;j++){\n                sum += nums[j];\n                if(sum >= s){\n                    ans = min(ans,j-i+1);\n                    break;\n                }\n            }\n        }\n        \n        return ans==INT_MAX ? 0 : ans;\n    }\n};\n```\n\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum.png)\n\n\n## 暴力枚举 + flag优化 <span style=\"color:green;\">Accepted</span>\n\n```\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        size_t n = nums.size();\n        int sum = 0;\n        int ans = INT_MAX;\n        \n        bool flag;\n        for(int i=0;i<n;i++){\n            sum = nums[i];\n            if(sum >= s) return 1;\n            flag = false;\n            for(int j=i+1;j<n;j++){\n                sum += nums[j];\n                if(sum >= s){\n                    ans = min(ans,j-i+1);\n                    flag = true;\n                    break;\n                }\n            }\n            \n            if(!flag) break;\n        }\n        \n        return ans==INT_MAX ? 0 : ans;\n    }\n};\n```\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%202.png)\n\n## 枚举小窗口 <span style=\"color:green;\">Accepted</span>\n```\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        size_t n = nums.size();\n        int sum = 0;\n        int ans = INT_MAX;\n        int p = 0,q = 0;\n        \n        while(q < n){\n            sum += nums[q++];\n            \n            while(sum >= s){\n                ans = min(ans,q-p);\n                sum -= nums[p++];\n            }\n            \n        }\n        \n        return ans==INT_MAX ? 0 : ans;\n    }\n};\n```\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%203.png)","slug":"2016-04-08-Minimum Size Subarray Sum","published":1,"updated":"2016-04-08T12:54:55.000Z","_id":"cip3cw776000py8a34uupggnr","comments":1,"photos":[],"link":"","content":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p><a href=\"https://leetcode.com/problems/minimum-size-subarray-sum/\" target=\"_blank\" rel=\"external\">Minimum Size Subarray Sum</a></p>\n<blockquote>\n<p>Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum ≥ s. If there isn’t one, return 0 instead.</p>\n<p>For example, given the array [2,3,1,2,4,3] and s = 7,<br>the subarray [4,3] has the minimal length under the problem constraint.</p>\n</blockquote>\n<p>题目大意： 给定一个正数数组 nums和一个正数 s，找出最短长度的连续子数组 使其和 大于等于 s。如果没有的话，返回 0.</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><h2 id=\"暴力枚举-Accepted\"><a href=\"#暴力枚举-Accepted\" class=\"headerlink\" title=\"暴力枚举 Accepted\"></a>暴力枚举 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        size_t n = nums.size();</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int ans = INT_MAX;</span><br><span class=\"line\">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">            sum = nums[i];</span><br><span class=\"line\">            if(sum &gt;= s) return 1;</span><br><span class=\"line\">            for(int j=i+1;j&lt;n;j++)&#123;</span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">                if(sum &gt;= s)&#123;</span><br><span class=\"line\">                    ans = min(ans,j-i+1);</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans==INT_MAX ? 0 : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum.png\" alt=\"\"></p>\n<h2 id=\"暴力枚举-flag优化-Accepted\"><a href=\"#暴力枚举-flag优化-Accepted\" class=\"headerlink\" title=\"暴力枚举 + flag优化 Accepted\"></a>暴力枚举 + flag优化 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        size_t n = nums.size();</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int ans = INT_MAX;</span><br><span class=\"line\">        </span><br><span class=\"line\">        bool flag;</span><br><span class=\"line\">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">            sum = nums[i];</span><br><span class=\"line\">            if(sum &gt;= s) return 1;</span><br><span class=\"line\">            flag = false;</span><br><span class=\"line\">            for(int j=i+1;j&lt;n;j++)&#123;</span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">                if(sum &gt;= s)&#123;</span><br><span class=\"line\">                    ans = min(ans,j-i+1);</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(!flag) break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans==INT_MAX ? 0 : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%202.png\" alt=\"\"></p>\n<h2 id=\"枚举小窗口-Accepted\"><a href=\"#枚举小窗口-Accepted\" class=\"headerlink\" title=\"枚举小窗口 Accepted\"></a>枚举小窗口 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        size_t n = nums.size();</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int ans = INT_MAX;</span><br><span class=\"line\">        int p = 0,q = 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        while(q &lt; n)&#123;</span><br><span class=\"line\">            sum += nums[q++];</span><br><span class=\"line\">            </span><br><span class=\"line\">            while(sum &gt;= s)&#123;</span><br><span class=\"line\">                ans = min(ans,q-p);</span><br><span class=\"line\">                sum -= nums[p++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans==INT_MAX ? 0 : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%203.png\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p><a href=\"https://leetcode.com/problems/minimum-size-subarray-sum/\">Minimum Size Subarray Sum</a></p>\n<blockquote>\n<p>Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum ≥ s. If there isn’t one, return 0 instead.</p>\n<p>For example, given the array [2,3,1,2,4,3] and s = 7,<br>the subarray [4,3] has the minimal length under the problem constraint.</p>\n</blockquote>\n<p>题目大意： 给定一个正数数组 nums和一个正数 s，找出最短长度的连续子数组 使其和 大于等于 s。如果没有的话，返回 0.</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><h2 id=\"暴力枚举-Accepted\"><a href=\"#暴力枚举-Accepted\" class=\"headerlink\" title=\"暴力枚举 Accepted\"></a>暴力枚举 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        size_t n = nums.size();</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int ans = INT_MAX;</span><br><span class=\"line\">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">            sum = nums[i];</span><br><span class=\"line\">            if(sum &gt;= s) return 1;</span><br><span class=\"line\">            for(int j=i+1;j&lt;n;j++)&#123;</span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">                if(sum &gt;= s)&#123;</span><br><span class=\"line\">                    ans = min(ans,j-i+1);</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans==INT_MAX ? 0 : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum.png\" alt=\"\"></p>\n<h2 id=\"暴力枚举-flag优化-Accepted\"><a href=\"#暴力枚举-flag优化-Accepted\" class=\"headerlink\" title=\"暴力枚举 + flag优化 Accepted\"></a>暴力枚举 + flag优化 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        size_t n = nums.size();</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int ans = INT_MAX;</span><br><span class=\"line\">        </span><br><span class=\"line\">        bool flag;</span><br><span class=\"line\">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">            sum = nums[i];</span><br><span class=\"line\">            if(sum &gt;= s) return 1;</span><br><span class=\"line\">            flag = false;</span><br><span class=\"line\">            for(int j=i+1;j&lt;n;j++)&#123;</span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">                if(sum &gt;= s)&#123;</span><br><span class=\"line\">                    ans = min(ans,j-i+1);</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(!flag) break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans==INT_MAX ? 0 : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%202.png\" alt=\"\"></p>\n<h2 id=\"枚举小窗口-Accepted\"><a href=\"#枚举小窗口-Accepted\" class=\"headerlink\" title=\"枚举小窗口 Accepted\"></a>枚举小窗口 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        size_t n = nums.size();</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int ans = INT_MAX;</span><br><span class=\"line\">        int p = 0,q = 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        while(q &lt; n)&#123;</span><br><span class=\"line\">            sum += nums[q++];</span><br><span class=\"line\">            </span><br><span class=\"line\">            while(sum &gt;= s)&#123;</span><br><span class=\"line\">                ans = min(ans,q-p);</span><br><span class=\"line\">                sum -= nums[p++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans==INT_MAX ? 0 : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/Minimum%20Size%20Subarray%20Sum%203.png\" alt=\"\"></p>\n"},{"layout":"post","title":"House Robber","date":"2016-04-25T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n# House Robber\n- - -\n\n[House Robber](https://leetcode.com/problems/house-robber/)\n\n> You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\n> Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\n题目大意：你是一个职业强盗，计划去洗劫一条街。这条街上每个店铺都有一定量的现金。但是如果两家相邻的店铺被同时打劫的话会惊动警察。给定一个非负数数组表示各个店铺的现金数，请制定一个合理的打劫顺序使今晚的洗劫行动收获最大。\n\n思考： \n \n 1. **贪心策略**：只洗劫奇数店铺 或 偶数店铺。 但细想一下，该策略只适合店铺数少于4的情况。比如有4家店铺的话： Plans = {[1,3],[2,4],[1,4]}；贪心策略的一个反例。\n 2. **暴力搜索**：深度搜索，枚举每个店铺的两种状态： 抢 或 不抢。抢依赖上一家不抢。类似01背包，背包没有容量限制。**可能会超时**\n 3. 在想 思路2的时候，其实已经想到这是一个 动态规划的题了：）动规的时间复杂度比搜索要来的线性，稳定。动态方程式是 `dp[i] = max{dp[i-2]+nums[i],dp[i-1]} 2<=i<numsSize`\n \n \n \n## 动态规划 <span style=\"color:green;\">Accepted</span> \n \n```\nint max(const int a,const int b){\n    return a > b ? a : b;\n}\n\nint easyRob(int* nums, int numsSize){\n    int odd = 0, eve = 0;\n    \n    for(int i=0;i<numsSize;i++){\n        if(i%2) eve += nums[i];\n        else odd += nums[i];\n    }\n    \n    return max(odd,eve);\n}\n\nint rob(int* nums, int numsSize) {\n    if(numsSize <= 3) return easyRob(nums,numsSize);\n    \n    int *dp = (int *)malloc(sizeof(int)*(numsSize));\n    memset(dp, 0, sizeof(int)*(numsSize));\n    dp[0] = nums[0];\n    dp[1] = max(nums[1],nums[0]);\n    dp[2] = max(dp[0]+nums[2],dp[1]);\n    \n    for(int i=3;i<numsSize;i++){\n        dp[i] = max(dp[i-2]+nums[i],dp[i-1]);\n    }\n    \n    int ans = dp[numsSize-1];\n    free(dp);\n    return ans;\n}\n\n```\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/house_robber.png)","source":"_posts/2016-04-25-House Robber.md","raw":"---\nlayout: post\ntitle: 'House Robber'\ndate: '2016-04-25'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n# House Robber\n- - -\n\n[House Robber](https://leetcode.com/problems/house-robber/)\n\n> You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\n> Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\n题目大意：你是一个职业强盗，计划去洗劫一条街。这条街上每个店铺都有一定量的现金。但是如果两家相邻的店铺被同时打劫的话会惊动警察。给定一个非负数数组表示各个店铺的现金数，请制定一个合理的打劫顺序使今晚的洗劫行动收获最大。\n\n思考： \n \n 1. **贪心策略**：只洗劫奇数店铺 或 偶数店铺。 但细想一下，该策略只适合店铺数少于4的情况。比如有4家店铺的话： Plans = {[1,3],[2,4],[1,4]}；贪心策略的一个反例。\n 2. **暴力搜索**：深度搜索，枚举每个店铺的两种状态： 抢 或 不抢。抢依赖上一家不抢。类似01背包，背包没有容量限制。**可能会超时**\n 3. 在想 思路2的时候，其实已经想到这是一个 动态规划的题了：）动规的时间复杂度比搜索要来的线性，稳定。动态方程式是 `dp[i] = max{dp[i-2]+nums[i],dp[i-1]} 2<=i<numsSize`\n \n \n \n## 动态规划 <span style=\"color:green;\">Accepted</span> \n \n```\nint max(const int a,const int b){\n    return a > b ? a : b;\n}\n\nint easyRob(int* nums, int numsSize){\n    int odd = 0, eve = 0;\n    \n    for(int i=0;i<numsSize;i++){\n        if(i%2) eve += nums[i];\n        else odd += nums[i];\n    }\n    \n    return max(odd,eve);\n}\n\nint rob(int* nums, int numsSize) {\n    if(numsSize <= 3) return easyRob(nums,numsSize);\n    \n    int *dp = (int *)malloc(sizeof(int)*(numsSize));\n    memset(dp, 0, sizeof(int)*(numsSize));\n    dp[0] = nums[0];\n    dp[1] = max(nums[1],nums[0]);\n    dp[2] = max(dp[0]+nums[2],dp[1]);\n    \n    for(int i=3;i<numsSize;i++){\n        dp[i] = max(dp[i-2]+nums[i],dp[i-1]);\n    }\n    \n    int ans = dp[numsSize-1];\n    free(dp);\n    return ans;\n}\n\n```\n\n![](https://raw.githubusercontent.com/778477/778477.github.io/master/img/house_robber.png)","slug":"2016-04-25-House Robber","published":1,"updated":"2016-05-28T08:56:23.000Z","_id":"cip3cw778000ry8a3hiv4hvrb","comments":1,"photos":[],"link":"","content":"<h1 id=\"House-Robber\"><a href=\"#House-Robber\" class=\"headerlink\" title=\"House Robber\"></a>House Robber</h1><hr>\n<p><a href=\"https://leetcode.com/problems/house-robber/\" target=\"_blank\" rel=\"external\">House Robber</a></p>\n<blockquote>\n<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>\n</blockquote>\n<p>题目大意：你是一个职业强盗，计划去洗劫一条街。这条街上每个店铺都有一定量的现金。但是如果两家相邻的店铺被同时打劫的话会惊动警察。给定一个非负数数组表示各个店铺的现金数，请制定一个合理的打劫顺序使今晚的洗劫行动收获最大。</p>\n<p>思考： </p>\n<ol>\n<li><strong>贪心策略</strong>：只洗劫奇数店铺 或 偶数店铺。 但细想一下，该策略只适合店铺数少于4的情况。比如有4家店铺的话： Plans = {[1,3],[2,4],[1,4]}；贪心策略的一个反例。</li>\n<li><strong>暴力搜索</strong>：深度搜索，枚举每个店铺的两种状态： 抢 或 不抢。抢依赖上一家不抢。类似01背包，背包没有容量限制。<strong>可能会超时</strong></li>\n<li>在想 思路2的时候，其实已经想到这是一个 动态规划的题了：）动规的时间复杂度比搜索要来的线性，稳定。动态方程式是 <code>dp[i] = max{dp[i-2]+nums[i],dp[i-1]} 2&lt;=i&lt;numsSize</code></li>\n</ol>\n<h2 id=\"动态规划-Accepted\"><a href=\"#动态规划-Accepted\" class=\"headerlink\" title=\"动态规划 Accepted\"></a>动态规划 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max(const int a,const int b)&#123;</span><br><span class=\"line\">    return a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int easyRob(int* nums, int numsSize)&#123;</span><br><span class=\"line\">    int odd = 0, eve = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i=0;i&lt;numsSize;i++)&#123;</span><br><span class=\"line\">        if(i%2) eve += nums[i];</span><br><span class=\"line\">        else odd += nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return max(odd,eve);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int rob(int* nums, int numsSize) &#123;</span><br><span class=\"line\">    if(numsSize &lt;= 3) return easyRob(nums,numsSize);</span><br><span class=\"line\">    </span><br><span class=\"line\">    int *dp = (int *)malloc(sizeof(int)*(numsSize));</span><br><span class=\"line\">    memset(dp, 0, sizeof(int)*(numsSize));</span><br><span class=\"line\">    dp[0] = nums[0];</span><br><span class=\"line\">    dp[1] = max(nums[1],nums[0]);</span><br><span class=\"line\">    dp[2] = max(dp[0]+nums[2],dp[1]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i=3;i&lt;numsSize;i++)&#123;</span><br><span class=\"line\">        dp[i] = max(dp[i-2]+nums[i],dp[i-1]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int ans = dp[numsSize-1];</span><br><span class=\"line\">    free(dp);</span><br><span class=\"line\">    return ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/house_robber.png\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"House-Robber\"><a href=\"#House-Robber\" class=\"headerlink\" title=\"House Robber\"></a>House Robber</h1><hr>\n<p><a href=\"https://leetcode.com/problems/house-robber/\">House Robber</a></p>\n<blockquote>\n<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>\n</blockquote>\n<p>题目大意：你是一个职业强盗，计划去洗劫一条街。这条街上每个店铺都有一定量的现金。但是如果两家相邻的店铺被同时打劫的话会惊动警察。给定一个非负数数组表示各个店铺的现金数，请制定一个合理的打劫顺序使今晚的洗劫行动收获最大。</p>\n<p>思考： </p>\n<ol>\n<li><strong>贪心策略</strong>：只洗劫奇数店铺 或 偶数店铺。 但细想一下，该策略只适合店铺数少于4的情况。比如有4家店铺的话： Plans = {[1,3],[2,4],[1,4]}；贪心策略的一个反例。</li>\n<li><strong>暴力搜索</strong>：深度搜索，枚举每个店铺的两种状态： 抢 或 不抢。抢依赖上一家不抢。类似01背包，背包没有容量限制。<strong>可能会超时</strong></li>\n<li>在想 思路2的时候，其实已经想到这是一个 动态规划的题了：）动规的时间复杂度比搜索要来的线性，稳定。动态方程式是 <code>dp[i] = max{dp[i-2]+nums[i],dp[i-1]} 2&lt;=i&lt;numsSize</code></li>\n</ol>\n<h2 id=\"动态规划-Accepted\"><a href=\"#动态规划-Accepted\" class=\"headerlink\" title=\"动态规划 Accepted\"></a>动态规划 <span style=\"color:green;\">Accepted</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max(const int a,const int b)&#123;</span><br><span class=\"line\">    return a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int easyRob(int* nums, int numsSize)&#123;</span><br><span class=\"line\">    int odd = 0, eve = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i=0;i&lt;numsSize;i++)&#123;</span><br><span class=\"line\">        if(i%2) eve += nums[i];</span><br><span class=\"line\">        else odd += nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return max(odd,eve);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int rob(int* nums, int numsSize) &#123;</span><br><span class=\"line\">    if(numsSize &lt;= 3) return easyRob(nums,numsSize);</span><br><span class=\"line\">    </span><br><span class=\"line\">    int *dp = (int *)malloc(sizeof(int)*(numsSize));</span><br><span class=\"line\">    memset(dp, 0, sizeof(int)*(numsSize));</span><br><span class=\"line\">    dp[0] = nums[0];</span><br><span class=\"line\">    dp[1] = max(nums[1],nums[0]);</span><br><span class=\"line\">    dp[2] = max(dp[0]+nums[2],dp[1]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i=3;i&lt;numsSize;i++)&#123;</span><br><span class=\"line\">        dp[i] = max(dp[i-2]+nums[i],dp[i-1]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int ans = dp[numsSize-1];</span><br><span class=\"line\">    free(dp);</span><br><span class=\"line\">    return ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/master/img/house_robber.png\" alt=\"\"></p>\n"},{"layout":"post","title":"Word Search II","date":"2016-05-28T00:00:00.000Z","header-img":"img/home-bg.jpg","author":"778477","_content":"\n# Word Search II\n---\n\n\n[Word Search](https://leetcode.com/problems/word-search-ii/)\n\n> Given a 2D board and a list of words from the dictionary, find all words in the board.\n\n> Each word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\n```\nFor example,\nGiven words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board =\n\n[\n  ['o','a','a','n'],\n  ['e','t','a','e'],\n  ['i','h','k','r'],\n  ['i','f','l','v']\n]\nReturn [\"eat\",\"oath\"].\n```\n\n题目大意：给定一个二维面板和一组字符串，找出二维面板上存在的字符串。\n**必须使用面板上的字母且水平连续或垂直连续拼接单词。**\n\n\n## 思路1： 深度优先搜索(DFS)  <span style=\"color:red\">Time Limit Exceeded</span>\n\n先遍历每个单词，如果单词首字母面板上有存在则开始深度优先搜索单词剩余的字母。\n\n来分析一下超时的Test Case：\n\n```\n[\"aaaa\",\"aaaa\",\"aaaa\",\"aaaa\",\"bcde\",\"fghi\",\"jklm\",\"nopq\",\"rstu\",\"vwxy\",\"zzzz\"]\n\n\n[\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\",\"aaaaaaaaaaaaaaae\",\"aaaaaaaaaaaaaaaf\",\"aaaaaaaaaaaaaaag\",\"aaaaaaaaaaaaaaah\",\"aaaaaaaaaaaaaaai\",\"aaaaaaaaaaaaaaaj\",\"aaaaaaaaaaaaaaak\",\"aaaaaaaaaaaaaaal\",\"aaaaaaaaaaaaaaam\",\"aaaaaaaaaaaaaaan\",\"aaaaaaaaaaaaaaao\",\"aaaaaaaaaaaaaaap\",\"aaaaaaaaaaaaaaaq\",\"aaaaaaaaaaaaaaar\",\"aaaaaaaaaaaaaaas\",\"aaaaaaaaaaaaaaat\",\"aaaaaaaaaaaaaaau\",\"aaaaaaaaaaaaaaav\",\"aaaaaaaaaaaaaaaw\",\"aaaaaaaaaaaaaaax\",\"aaaaaaaaaaaaaaay\",\"aaaaaaaaaaaaaaaz\",\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\",\"aaaaaaaaaaaaaaae\",\"aaaaaaaaaaaaaaaf\",\"aaaaaaaaaaaaaaag\",\"aaaaaaaaaaaaaaah\",\"aaaaaaaaaaaaaaai\",\"aaaaaaaaaaaaaaaj\",\"aaaaaaaaaaaaaaak\",\"aaaaaaaaaaaaaaal\",\"aaaaaaaaaaaaaaam\",\"aaaaaaaaaaaaaaan\",\"aaaaaaaaaaaaaaao\",\"aaaaaaaaaaaaaaap\",\"aaaaaaaaaaaaaaaq\",\"aaaaaaaaaaaaaaar\",\"aaaaaaaaaaaaaaas\",\"aaaaaaaaaaaaaaat\",\"aaaaaaaaaaaaaaau\",\"aaaaaaaaaaaaaaav\",\"aaaaaaaaaaaaaaaw\",\"aaaaaaaaaaaaaaax\",\"aaaaaaaaaaaaaaay\",\"aaaaaaaaaaaaaaaz\",\"aaaaaaaaaaaaaaba\",\"aaaaaaaaaaaaaabb\",\"aaaaaaaaaaaaaabc\"]\n```\n\n发现这个Test Case很有意思，有大量重复相同的前缀`aaaaaaaaaaaaaaaa`。使用DFS遍历图的话，如果没有高效的剪枝策略。光是这个前缀的深度优先搜索效率就很低下了。\n\n\n## 思路2 ： 字典树(Trie) + 深度优先搜索(DFS) <span style=\"color:green\">Accepted</span>\n\n建立Trie字典树，能有效的避免大量重复前缀的搜索。 \n\nLeetCodeOJ 上有[关于Trie建树的题目](https://leetcode.com/problems/implement-trie-prefix-tree/)\n\n```\n\nconst int TrieChildNodeMax(26);\nclass Trie{\npublic:\n    class TrieNode{\n    public:\n        TrieNode(){\n            isWord = false;\n            word = \"\";\n            memset(childNode, NULL, sizeof(TrieNode *) * TrieChildNodeMax);\n        }\n        TrieNode *childNode[TrieChildNodeMax];\n        string word;\n        bool isWord;\n    };\n    TrieNode *root;\n    \n    Trie(){\n        root = new TrieNode();\n    }\n    \n    \n    void insert(const string word,TrieNode* node,int idx = 0){\n        if(idx == word.length()) return ;\n        int k = word[idx] - 'a';\n        if(node->childNode[k] == NULL){\n            node->childNode[k] = new TrieNode();\n        }\n        if(idx == word.length() - 1){\n            node->childNode[k]->isWord = true;\n            node->childNode[k]->word = word;\n        }\n        else{\n            insert(word, node->childNode[k],idx+1);\n        }\n    }\n    \n};\n\nclass Solution {\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        vector<string> ans;\n        \n        \n        for_each(words.begin(), words.end(), [&](const string word){\n            trie.insert(word, trie.root);\n        });\n        \n        \n        n = (int)board.size();\n        m = 0;\n        if(n > 0) m = (int)board[0].size();\n        \n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                memset(vis, false, sizeof(bool)*1024*1024);\n                if(boardHasWord(board,i,j,trie.root,ans)){\n                    cout<<\"Yes,find word in borad\"<<endl;\n                }\n            }\n        }\n        \n        sort(ans.begin(), ans.end());\n        \n        return ans;\n    }\nprivate:\n    bool judge(const int x,const int y){\n        return (x>-1&&x<n&&y>-1&&y<m&&!vis[x][y]);\n    }\n    bool boardHasWord(const vector<vector<char>> board,int x,int y,Trie::TrieNode* root,vector<string>& ans){\n        int k = board[x][y] - 'a';\n        vis[x][y] = true;\n        if(root->childNode[k]){\n            if(root->childNode[k]->isWord){\n                root->childNode[k]->isWord = false;\n                ans.push_back(root->childNode[k]->word);\n            }\n            \n            \n            for(int i=0;i<4;i++){\n                int xx = x + dir[i][0];\n                int yy = y + dir[i][1];\n                \n                if(judge(xx, yy)){\n                    vis[xx][yy] = true;\n                    if(boardHasWord(board, xx, yy, root->childNode[k], ans)) return true;\n                    vis[xx][yy] = false;\n                }\n            }\n        }\n        \n        return false;\n    }\n    int n,m;\n    const int dir[4][2] = { {1,0},{0,1},{-1,0},{0,-1} };\n    bool vis[1024][1024];\n    Trie trie;\n};\n\n\n\nint main(){\n    \n    freopen(INPUT,\"r\",stdin);\n    \n    string buf;\n    vector<vector<char>> board;\n    while(cin>>buf){\n        vector<char> chars;\n        chars.assign(buf.begin(), buf.end());\n        board.push_back(chars);\n    }\n    \n    Solution solve;\n    vector<string> words({\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\"});\n    vector<string> ans = solve.findWords(board,words);\n    \n    \n    for_each(ans.begin(), ans.end(), [](const string str){\n        cout<<str<<endl;\n    });\n    \n    \n    return 0;\n}\n\n\n\n/*\tWrong Answer */\n/*\n[\"ab\",\"aa\"]\n[\"aba\",\"baa\",\"bab\",\"aaab\",\"aaa\",\"aaaa\",\"aaba\"]\n*/\n\n\n\n/* Time Limit Exceeded */\n/*\n \n [\"aaaa\",\"aaaa\",\"aaaa\",\"aaaa\",\"bcde\",\"fghi\",\"jklm\",\"nopq\",\"rstu\",\"vwxy\",\"zzzz\"]\n [\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\"]\n*/\n\n```\n\n\n![Accepted](https://raw.githubusercontent.com/778477/778477.github.io/63215efbb2bc92122d932f3e33a6423b79a4d49f/img/Word_Search_II.png)","source":"_posts/2016-05-28-Word Search II.md","raw":"---\nlayout: post\ntitle: 'Word Search II'\ndate: '2016-05-28'\nheader-img: \"img/home-bg.jpg\"\ntags:\n     - LeetCode\n     \nauthor: '778477'\n---\n\n# Word Search II\n---\n\n\n[Word Search](https://leetcode.com/problems/word-search-ii/)\n\n> Given a 2D board and a list of words from the dictionary, find all words in the board.\n\n> Each word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\n```\nFor example,\nGiven words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board =\n\n[\n  ['o','a','a','n'],\n  ['e','t','a','e'],\n  ['i','h','k','r'],\n  ['i','f','l','v']\n]\nReturn [\"eat\",\"oath\"].\n```\n\n题目大意：给定一个二维面板和一组字符串，找出二维面板上存在的字符串。\n**必须使用面板上的字母且水平连续或垂直连续拼接单词。**\n\n\n## 思路1： 深度优先搜索(DFS)  <span style=\"color:red\">Time Limit Exceeded</span>\n\n先遍历每个单词，如果单词首字母面板上有存在则开始深度优先搜索单词剩余的字母。\n\n来分析一下超时的Test Case：\n\n```\n[\"aaaa\",\"aaaa\",\"aaaa\",\"aaaa\",\"bcde\",\"fghi\",\"jklm\",\"nopq\",\"rstu\",\"vwxy\",\"zzzz\"]\n\n\n[\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\",\"aaaaaaaaaaaaaaae\",\"aaaaaaaaaaaaaaaf\",\"aaaaaaaaaaaaaaag\",\"aaaaaaaaaaaaaaah\",\"aaaaaaaaaaaaaaai\",\"aaaaaaaaaaaaaaaj\",\"aaaaaaaaaaaaaaak\",\"aaaaaaaaaaaaaaal\",\"aaaaaaaaaaaaaaam\",\"aaaaaaaaaaaaaaan\",\"aaaaaaaaaaaaaaao\",\"aaaaaaaaaaaaaaap\",\"aaaaaaaaaaaaaaaq\",\"aaaaaaaaaaaaaaar\",\"aaaaaaaaaaaaaaas\",\"aaaaaaaaaaaaaaat\",\"aaaaaaaaaaaaaaau\",\"aaaaaaaaaaaaaaav\",\"aaaaaaaaaaaaaaaw\",\"aaaaaaaaaaaaaaax\",\"aaaaaaaaaaaaaaay\",\"aaaaaaaaaaaaaaaz\",\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\",\"aaaaaaaaaaaaaaae\",\"aaaaaaaaaaaaaaaf\",\"aaaaaaaaaaaaaaag\",\"aaaaaaaaaaaaaaah\",\"aaaaaaaaaaaaaaai\",\"aaaaaaaaaaaaaaaj\",\"aaaaaaaaaaaaaaak\",\"aaaaaaaaaaaaaaal\",\"aaaaaaaaaaaaaaam\",\"aaaaaaaaaaaaaaan\",\"aaaaaaaaaaaaaaao\",\"aaaaaaaaaaaaaaap\",\"aaaaaaaaaaaaaaaq\",\"aaaaaaaaaaaaaaar\",\"aaaaaaaaaaaaaaas\",\"aaaaaaaaaaaaaaat\",\"aaaaaaaaaaaaaaau\",\"aaaaaaaaaaaaaaav\",\"aaaaaaaaaaaaaaaw\",\"aaaaaaaaaaaaaaax\",\"aaaaaaaaaaaaaaay\",\"aaaaaaaaaaaaaaaz\",\"aaaaaaaaaaaaaaba\",\"aaaaaaaaaaaaaabb\",\"aaaaaaaaaaaaaabc\"]\n```\n\n发现这个Test Case很有意思，有大量重复相同的前缀`aaaaaaaaaaaaaaaa`。使用DFS遍历图的话，如果没有高效的剪枝策略。光是这个前缀的深度优先搜索效率就很低下了。\n\n\n## 思路2 ： 字典树(Trie) + 深度优先搜索(DFS) <span style=\"color:green\">Accepted</span>\n\n建立Trie字典树，能有效的避免大量重复前缀的搜索。 \n\nLeetCodeOJ 上有[关于Trie建树的题目](https://leetcode.com/problems/implement-trie-prefix-tree/)\n\n```\n\nconst int TrieChildNodeMax(26);\nclass Trie{\npublic:\n    class TrieNode{\n    public:\n        TrieNode(){\n            isWord = false;\n            word = \"\";\n            memset(childNode, NULL, sizeof(TrieNode *) * TrieChildNodeMax);\n        }\n        TrieNode *childNode[TrieChildNodeMax];\n        string word;\n        bool isWord;\n    };\n    TrieNode *root;\n    \n    Trie(){\n        root = new TrieNode();\n    }\n    \n    \n    void insert(const string word,TrieNode* node,int idx = 0){\n        if(idx == word.length()) return ;\n        int k = word[idx] - 'a';\n        if(node->childNode[k] == NULL){\n            node->childNode[k] = new TrieNode();\n        }\n        if(idx == word.length() - 1){\n            node->childNode[k]->isWord = true;\n            node->childNode[k]->word = word;\n        }\n        else{\n            insert(word, node->childNode[k],idx+1);\n        }\n    }\n    \n};\n\nclass Solution {\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        vector<string> ans;\n        \n        \n        for_each(words.begin(), words.end(), [&](const string word){\n            trie.insert(word, trie.root);\n        });\n        \n        \n        n = (int)board.size();\n        m = 0;\n        if(n > 0) m = (int)board[0].size();\n        \n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                memset(vis, false, sizeof(bool)*1024*1024);\n                if(boardHasWord(board,i,j,trie.root,ans)){\n                    cout<<\"Yes,find word in borad\"<<endl;\n                }\n            }\n        }\n        \n        sort(ans.begin(), ans.end());\n        \n        return ans;\n    }\nprivate:\n    bool judge(const int x,const int y){\n        return (x>-1&&x<n&&y>-1&&y<m&&!vis[x][y]);\n    }\n    bool boardHasWord(const vector<vector<char>> board,int x,int y,Trie::TrieNode* root,vector<string>& ans){\n        int k = board[x][y] - 'a';\n        vis[x][y] = true;\n        if(root->childNode[k]){\n            if(root->childNode[k]->isWord){\n                root->childNode[k]->isWord = false;\n                ans.push_back(root->childNode[k]->word);\n            }\n            \n            \n            for(int i=0;i<4;i++){\n                int xx = x + dir[i][0];\n                int yy = y + dir[i][1];\n                \n                if(judge(xx, yy)){\n                    vis[xx][yy] = true;\n                    if(boardHasWord(board, xx, yy, root->childNode[k], ans)) return true;\n                    vis[xx][yy] = false;\n                }\n            }\n        }\n        \n        return false;\n    }\n    int n,m;\n    const int dir[4][2] = { {1,0},{0,1},{-1,0},{0,-1} };\n    bool vis[1024][1024];\n    Trie trie;\n};\n\n\n\nint main(){\n    \n    freopen(INPUT,\"r\",stdin);\n    \n    string buf;\n    vector<vector<char>> board;\n    while(cin>>buf){\n        vector<char> chars;\n        chars.assign(buf.begin(), buf.end());\n        board.push_back(chars);\n    }\n    \n    Solution solve;\n    vector<string> words({\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\"});\n    vector<string> ans = solve.findWords(board,words);\n    \n    \n    for_each(ans.begin(), ans.end(), [](const string str){\n        cout<<str<<endl;\n    });\n    \n    \n    return 0;\n}\n\n\n\n/*\tWrong Answer */\n/*\n[\"ab\",\"aa\"]\n[\"aba\",\"baa\",\"bab\",\"aaab\",\"aaa\",\"aaaa\",\"aaba\"]\n*/\n\n\n\n/* Time Limit Exceeded */\n/*\n \n [\"aaaa\",\"aaaa\",\"aaaa\",\"aaaa\",\"bcde\",\"fghi\",\"jklm\",\"nopq\",\"rstu\",\"vwxy\",\"zzzz\"]\n [\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaac\",\"aaaaaaaaaaaaaaad\"]\n*/\n\n```\n\n\n![Accepted](https://raw.githubusercontent.com/778477/778477.github.io/63215efbb2bc92122d932f3e33a6423b79a4d49f/img/Word_Search_II.png)","slug":"2016-05-28-Word Search II","published":1,"updated":"2016-05-28T09:02:46.000Z","_id":"cip3cw77b000sy8a3zf8x9jan","comments":1,"photos":[],"link":"","content":"<h1 id=\"Word-Search-II\"><a href=\"#Word-Search-II\" class=\"headerlink\" title=\"Word Search II\"></a>Word Search II</h1><hr>\n<p><a href=\"https://leetcode.com/problems/word-search-ii/\" target=\"_blank\" rel=\"external\">Word Search</a></p>\n<blockquote>\n<p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>\n<p>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">Given words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;] and board =</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  [&apos;o&apos;,&apos;a&apos;,&apos;a&apos;,&apos;n&apos;],</span><br><span class=\"line\">  [&apos;e&apos;,&apos;t&apos;,&apos;a&apos;,&apos;e&apos;],</span><br><span class=\"line\">  [&apos;i&apos;,&apos;h&apos;,&apos;k&apos;,&apos;r&apos;],</span><br><span class=\"line\">  [&apos;i&apos;,&apos;f&apos;,&apos;l&apos;,&apos;v&apos;]</span><br><span class=\"line\">]</span><br><span class=\"line\">Return [&quot;eat&quot;,&quot;oath&quot;].</span><br></pre></td></tr></table></figure>\n<p>题目大意：给定一个二维面板和一组字符串，找出二维面板上存在的字符串。<br><strong>必须使用面板上的字母且水平连续或垂直连续拼接单词。</strong></p>\n<h2 id=\"思路1：-深度优先搜索-DFS-Time-Limit-Exceeded\"><a href=\"#思路1：-深度优先搜索-DFS-Time-Limit-Exceeded\" class=\"headerlink\" title=\"思路1： 深度优先搜索(DFS)  Time Limit Exceeded\"></a>思路1： 深度优先搜索(DFS)  <span style=\"color:red\">Time Limit Exceeded</span></h2><p>先遍历每个单词，如果单词首字母面板上有存在则开始深度优先搜索单词剩余的字母。</p>\n<p>来分析一下超时的Test Case：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;bcde&quot;,&quot;fghi&quot;,&quot;jklm&quot;,&quot;nopq&quot;,&quot;rstu&quot;,&quot;vwxy&quot;,&quot;zzzz&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;,&quot;aaaaaaaaaaaaaaae&quot;,&quot;aaaaaaaaaaaaaaaf&quot;,&quot;aaaaaaaaaaaaaaag&quot;,&quot;aaaaaaaaaaaaaaah&quot;,&quot;aaaaaaaaaaaaaaai&quot;,&quot;aaaaaaaaaaaaaaaj&quot;,&quot;aaaaaaaaaaaaaaak&quot;,&quot;aaaaaaaaaaaaaaal&quot;,&quot;aaaaaaaaaaaaaaam&quot;,&quot;aaaaaaaaaaaaaaan&quot;,&quot;aaaaaaaaaaaaaaao&quot;,&quot;aaaaaaaaaaaaaaap&quot;,&quot;aaaaaaaaaaaaaaaq&quot;,&quot;aaaaaaaaaaaaaaar&quot;,&quot;aaaaaaaaaaaaaaas&quot;,&quot;aaaaaaaaaaaaaaat&quot;,&quot;aaaaaaaaaaaaaaau&quot;,&quot;aaaaaaaaaaaaaaav&quot;,&quot;aaaaaaaaaaaaaaaw&quot;,&quot;aaaaaaaaaaaaaaax&quot;,&quot;aaaaaaaaaaaaaaay&quot;,&quot;aaaaaaaaaaaaaaaz&quot;,&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;,&quot;aaaaaaaaaaaaaaae&quot;,&quot;aaaaaaaaaaaaaaaf&quot;,&quot;aaaaaaaaaaaaaaag&quot;,&quot;aaaaaaaaaaaaaaah&quot;,&quot;aaaaaaaaaaaaaaai&quot;,&quot;aaaaaaaaaaaaaaaj&quot;,&quot;aaaaaaaaaaaaaaak&quot;,&quot;aaaaaaaaaaaaaaal&quot;,&quot;aaaaaaaaaaaaaaam&quot;,&quot;aaaaaaaaaaaaaaan&quot;,&quot;aaaaaaaaaaaaaaao&quot;,&quot;aaaaaaaaaaaaaaap&quot;,&quot;aaaaaaaaaaaaaaaq&quot;,&quot;aaaaaaaaaaaaaaar&quot;,&quot;aaaaaaaaaaaaaaas&quot;,&quot;aaaaaaaaaaaaaaat&quot;,&quot;aaaaaaaaaaaaaaau&quot;,&quot;aaaaaaaaaaaaaaav&quot;,&quot;aaaaaaaaaaaaaaaw&quot;,&quot;aaaaaaaaaaaaaaax&quot;,&quot;aaaaaaaaaaaaaaay&quot;,&quot;aaaaaaaaaaaaaaaz&quot;,&quot;aaaaaaaaaaaaaaba&quot;,&quot;aaaaaaaaaaaaaabb&quot;,&quot;aaaaaaaaaaaaaabc&quot;]</span><br></pre></td></tr></table></figure>\n<p>发现这个Test Case很有意思，有大量重复相同的前缀<code>aaaaaaaaaaaaaaaa</code>。使用DFS遍历图的话，如果没有高效的剪枝策略。光是这个前缀的深度优先搜索效率就很低下了。</p>\n<h2 id=\"思路2-：-字典树-Trie-深度优先搜索-DFS-Accepted\"><a href=\"#思路2-：-字典树-Trie-深度优先搜索-DFS-Accepted\" class=\"headerlink\" title=\"思路2 ： 字典树(Trie) + 深度优先搜索(DFS) Accepted\"></a>思路2 ： 字典树(Trie) + 深度优先搜索(DFS) <span style=\"color:green\">Accepted</span></h2><p>建立Trie字典树，能有效的避免大量重复前缀的搜索。 </p>\n<p>LeetCodeOJ 上有<a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"external\">关于Trie建树的题目</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const int TrieChildNodeMax(26);</span><br><span class=\"line\">class Trie&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    class TrieNode&#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        TrieNode()&#123;</span><br><span class=\"line\">            isWord = false;</span><br><span class=\"line\">            word = &quot;&quot;;</span><br><span class=\"line\">            memset(childNode, NULL, sizeof(TrieNode *) * TrieChildNodeMax);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TrieNode *childNode[TrieChildNodeMax];</span><br><span class=\"line\">        string word;</span><br><span class=\"line\">        bool isWord;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    TrieNode *root;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Trie()&#123;</span><br><span class=\"line\">        root = new TrieNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    void insert(const string word,TrieNode* node,int idx = 0)&#123;</span><br><span class=\"line\">        if(idx == word.length()) return ;</span><br><span class=\"line\">        int k = word[idx] - &apos;a&apos;;</span><br><span class=\"line\">        if(node-&gt;childNode[k] == NULL)&#123;</span><br><span class=\"line\">            node-&gt;childNode[k] = new TrieNode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(idx == word.length() - 1)&#123;</span><br><span class=\"line\">            node-&gt;childNode[k]-&gt;isWord = true;</span><br><span class=\"line\">            node-&gt;childNode[k]-&gt;word = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            insert(word, node-&gt;childNode[k],idx+1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    vector&lt;string&gt; findWords(vector&lt;vector&lt;char&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words) &#123;</span><br><span class=\"line\">        vector&lt;string&gt; ans;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        for_each(words.begin(), words.end(), [&amp;](const string word)&#123;</span><br><span class=\"line\">            trie.insert(word, trie.root);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        n = (int)board.size();</span><br><span class=\"line\">        m = 0;</span><br><span class=\"line\">        if(n &gt; 0) m = (int)board[0].size();</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">            for(int j=0;j&lt;m;j++)&#123;</span><br><span class=\"line\">                memset(vis, false, sizeof(bool)*1024*1024);</span><br><span class=\"line\">                if(boardHasWord(board,i,j,trie.root,ans))&#123;</span><br><span class=\"line\">                    cout&lt;&lt;&quot;Yes,find word in borad&quot;&lt;&lt;endl;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        sort(ans.begin(), ans.end());</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    bool judge(const int x,const int y)&#123;</span><br><span class=\"line\">        return (x&gt;-1&amp;&amp;x&lt;n&amp;&amp;y&gt;-1&amp;&amp;y&lt;m&amp;&amp;!vis[x][y]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool boardHasWord(const vector&lt;vector&lt;char&gt;&gt; board,int x,int y,Trie::TrieNode* root,vector&lt;string&gt;&amp; ans)&#123;</span><br><span class=\"line\">        int k = board[x][y] - &apos;a&apos;;</span><br><span class=\"line\">        vis[x][y] = true;</span><br><span class=\"line\">        if(root-&gt;childNode[k])&#123;</span><br><span class=\"line\">            if(root-&gt;childNode[k]-&gt;isWord)&#123;</span><br><span class=\"line\">                root-&gt;childNode[k]-&gt;isWord = false;</span><br><span class=\"line\">                ans.push_back(root-&gt;childNode[k]-&gt;word);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            for(int i=0;i&lt;4;i++)&#123;</span><br><span class=\"line\">                int xx = x + dir[i][0];</span><br><span class=\"line\">                int yy = y + dir[i][1];</span><br><span class=\"line\">                </span><br><span class=\"line\">                if(judge(xx, yy))&#123;</span><br><span class=\"line\">                    vis[xx][yy] = true;</span><br><span class=\"line\">                    if(boardHasWord(board, xx, yy, root-&gt;childNode[k], ans)) return true;</span><br><span class=\"line\">                    vis[xx][yy] = false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int n,m;</span><br><span class=\"line\">    const int dir[4][2] = &#123; &#123;1,0&#125;,&#123;0,1&#125;,&#123;-1,0&#125;,&#123;0,-1&#125; &#125;;</span><br><span class=\"line\">    bool vis[1024][1024];</span><br><span class=\"line\">    Trie trie;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    freopen(INPUT,&quot;r&quot;,stdin);</span><br><span class=\"line\">    </span><br><span class=\"line\">    string buf;</span><br><span class=\"line\">    vector&lt;vector&lt;char&gt;&gt; board;</span><br><span class=\"line\">    while(cin&gt;&gt;buf)&#123;</span><br><span class=\"line\">        vector&lt;char&gt; chars;</span><br><span class=\"line\">        chars.assign(buf.begin(), buf.end());</span><br><span class=\"line\">        board.push_back(chars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Solution solve;</span><br><span class=\"line\">    vector&lt;string&gt; words(&#123;&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;&#125;);</span><br><span class=\"line\">    vector&lt;string&gt; ans = solve.findWords(board,words);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    for_each(ans.begin(), ans.end(), [](const string str)&#123;</span><br><span class=\"line\">        cout&lt;&lt;str&lt;&lt;endl;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*\tWrong Answer */</span><br><span class=\"line\">/*</span><br><span class=\"line\">[&quot;ab&quot;,&quot;aa&quot;]</span><br><span class=\"line\">[&quot;aba&quot;,&quot;baa&quot;,&quot;bab&quot;,&quot;aaab&quot;,&quot;aaa&quot;,&quot;aaaa&quot;,&quot;aaba&quot;]</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* Time Limit Exceeded */</span><br><span class=\"line\">/*</span><br><span class=\"line\"> </span><br><span class=\"line\"> [&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;bcde&quot;,&quot;fghi&quot;,&quot;jklm&quot;,&quot;nopq&quot;,&quot;rstu&quot;,&quot;vwxy&quot;,&quot;zzzz&quot;]</span><br><span class=\"line\"> [&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;]</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/63215efbb2bc92122d932f3e33a6423b79a4d49f/img/Word_Search_II.png\" alt=\"Accepted\"></p>\n","excerpt":"","more":"<h1 id=\"Word-Search-II\"><a href=\"#Word-Search-II\" class=\"headerlink\" title=\"Word Search II\"></a>Word Search II</h1><hr>\n<p><a href=\"https://leetcode.com/problems/word-search-ii/\">Word Search</a></p>\n<blockquote>\n<p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>\n<p>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">Given words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;] and board =</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  [&apos;o&apos;,&apos;a&apos;,&apos;a&apos;,&apos;n&apos;],</span><br><span class=\"line\">  [&apos;e&apos;,&apos;t&apos;,&apos;a&apos;,&apos;e&apos;],</span><br><span class=\"line\">  [&apos;i&apos;,&apos;h&apos;,&apos;k&apos;,&apos;r&apos;],</span><br><span class=\"line\">  [&apos;i&apos;,&apos;f&apos;,&apos;l&apos;,&apos;v&apos;]</span><br><span class=\"line\">]</span><br><span class=\"line\">Return [&quot;eat&quot;,&quot;oath&quot;].</span><br></pre></td></tr></table></figure>\n<p>题目大意：给定一个二维面板和一组字符串，找出二维面板上存在的字符串。<br><strong>必须使用面板上的字母且水平连续或垂直连续拼接单词。</strong></p>\n<h2 id=\"思路1：-深度优先搜索-DFS-Time-Limit-Exceeded\"><a href=\"#思路1：-深度优先搜索-DFS-Time-Limit-Exceeded\" class=\"headerlink\" title=\"思路1： 深度优先搜索(DFS)  Time Limit Exceeded\"></a>思路1： 深度优先搜索(DFS)  <span style=\"color:red\">Time Limit Exceeded</span></h2><p>先遍历每个单词，如果单词首字母面板上有存在则开始深度优先搜索单词剩余的字母。</p>\n<p>来分析一下超时的Test Case：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;bcde&quot;,&quot;fghi&quot;,&quot;jklm&quot;,&quot;nopq&quot;,&quot;rstu&quot;,&quot;vwxy&quot;,&quot;zzzz&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;,&quot;aaaaaaaaaaaaaaae&quot;,&quot;aaaaaaaaaaaaaaaf&quot;,&quot;aaaaaaaaaaaaaaag&quot;,&quot;aaaaaaaaaaaaaaah&quot;,&quot;aaaaaaaaaaaaaaai&quot;,&quot;aaaaaaaaaaaaaaaj&quot;,&quot;aaaaaaaaaaaaaaak&quot;,&quot;aaaaaaaaaaaaaaal&quot;,&quot;aaaaaaaaaaaaaaam&quot;,&quot;aaaaaaaaaaaaaaan&quot;,&quot;aaaaaaaaaaaaaaao&quot;,&quot;aaaaaaaaaaaaaaap&quot;,&quot;aaaaaaaaaaaaaaaq&quot;,&quot;aaaaaaaaaaaaaaar&quot;,&quot;aaaaaaaaaaaaaaas&quot;,&quot;aaaaaaaaaaaaaaat&quot;,&quot;aaaaaaaaaaaaaaau&quot;,&quot;aaaaaaaaaaaaaaav&quot;,&quot;aaaaaaaaaaaaaaaw&quot;,&quot;aaaaaaaaaaaaaaax&quot;,&quot;aaaaaaaaaaaaaaay&quot;,&quot;aaaaaaaaaaaaaaaz&quot;,&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;,&quot;aaaaaaaaaaaaaaae&quot;,&quot;aaaaaaaaaaaaaaaf&quot;,&quot;aaaaaaaaaaaaaaag&quot;,&quot;aaaaaaaaaaaaaaah&quot;,&quot;aaaaaaaaaaaaaaai&quot;,&quot;aaaaaaaaaaaaaaaj&quot;,&quot;aaaaaaaaaaaaaaak&quot;,&quot;aaaaaaaaaaaaaaal&quot;,&quot;aaaaaaaaaaaaaaam&quot;,&quot;aaaaaaaaaaaaaaan&quot;,&quot;aaaaaaaaaaaaaaao&quot;,&quot;aaaaaaaaaaaaaaap&quot;,&quot;aaaaaaaaaaaaaaaq&quot;,&quot;aaaaaaaaaaaaaaar&quot;,&quot;aaaaaaaaaaaaaaas&quot;,&quot;aaaaaaaaaaaaaaat&quot;,&quot;aaaaaaaaaaaaaaau&quot;,&quot;aaaaaaaaaaaaaaav&quot;,&quot;aaaaaaaaaaaaaaaw&quot;,&quot;aaaaaaaaaaaaaaax&quot;,&quot;aaaaaaaaaaaaaaay&quot;,&quot;aaaaaaaaaaaaaaaz&quot;,&quot;aaaaaaaaaaaaaaba&quot;,&quot;aaaaaaaaaaaaaabb&quot;,&quot;aaaaaaaaaaaaaabc&quot;]</span><br></pre></td></tr></table></figure>\n<p>发现这个Test Case很有意思，有大量重复相同的前缀<code>aaaaaaaaaaaaaaaa</code>。使用DFS遍历图的话，如果没有高效的剪枝策略。光是这个前缀的深度优先搜索效率就很低下了。</p>\n<h2 id=\"思路2-：-字典树-Trie-深度优先搜索-DFS-Accepted\"><a href=\"#思路2-：-字典树-Trie-深度优先搜索-DFS-Accepted\" class=\"headerlink\" title=\"思路2 ： 字典树(Trie) + 深度优先搜索(DFS) Accepted\"></a>思路2 ： 字典树(Trie) + 深度优先搜索(DFS) <span style=\"color:green\">Accepted</span></h2><p>建立Trie字典树，能有效的避免大量重复前缀的搜索。 </p>\n<p>LeetCodeOJ 上有<a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">关于Trie建树的题目</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const int TrieChildNodeMax(26);</span><br><span class=\"line\">class Trie&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    class TrieNode&#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        TrieNode()&#123;</span><br><span class=\"line\">            isWord = false;</span><br><span class=\"line\">            word = &quot;&quot;;</span><br><span class=\"line\">            memset(childNode, NULL, sizeof(TrieNode *) * TrieChildNodeMax);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TrieNode *childNode[TrieChildNodeMax];</span><br><span class=\"line\">        string word;</span><br><span class=\"line\">        bool isWord;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    TrieNode *root;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Trie()&#123;</span><br><span class=\"line\">        root = new TrieNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    void insert(const string word,TrieNode* node,int idx = 0)&#123;</span><br><span class=\"line\">        if(idx == word.length()) return ;</span><br><span class=\"line\">        int k = word[idx] - &apos;a&apos;;</span><br><span class=\"line\">        if(node-&gt;childNode[k] == NULL)&#123;</span><br><span class=\"line\">            node-&gt;childNode[k] = new TrieNode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(idx == word.length() - 1)&#123;</span><br><span class=\"line\">            node-&gt;childNode[k]-&gt;isWord = true;</span><br><span class=\"line\">            node-&gt;childNode[k]-&gt;word = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            insert(word, node-&gt;childNode[k],idx+1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    vector&lt;string&gt; findWords(vector&lt;vector&lt;char&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words) &#123;</span><br><span class=\"line\">        vector&lt;string&gt; ans;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        for_each(words.begin(), words.end(), [&amp;](const string word)&#123;</span><br><span class=\"line\">            trie.insert(word, trie.root);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        n = (int)board.size();</span><br><span class=\"line\">        m = 0;</span><br><span class=\"line\">        if(n &gt; 0) m = (int)board[0].size();</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">            for(int j=0;j&lt;m;j++)&#123;</span><br><span class=\"line\">                memset(vis, false, sizeof(bool)*1024*1024);</span><br><span class=\"line\">                if(boardHasWord(board,i,j,trie.root,ans))&#123;</span><br><span class=\"line\">                    cout&lt;&lt;&quot;Yes,find word in borad&quot;&lt;&lt;endl;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        sort(ans.begin(), ans.end());</span><br><span class=\"line\">        </span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    bool judge(const int x,const int y)&#123;</span><br><span class=\"line\">        return (x&gt;-1&amp;&amp;x&lt;n&amp;&amp;y&gt;-1&amp;&amp;y&lt;m&amp;&amp;!vis[x][y]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool boardHasWord(const vector&lt;vector&lt;char&gt;&gt; board,int x,int y,Trie::TrieNode* root,vector&lt;string&gt;&amp; ans)&#123;</span><br><span class=\"line\">        int k = board[x][y] - &apos;a&apos;;</span><br><span class=\"line\">        vis[x][y] = true;</span><br><span class=\"line\">        if(root-&gt;childNode[k])&#123;</span><br><span class=\"line\">            if(root-&gt;childNode[k]-&gt;isWord)&#123;</span><br><span class=\"line\">                root-&gt;childNode[k]-&gt;isWord = false;</span><br><span class=\"line\">                ans.push_back(root-&gt;childNode[k]-&gt;word);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            for(int i=0;i&lt;4;i++)&#123;</span><br><span class=\"line\">                int xx = x + dir[i][0];</span><br><span class=\"line\">                int yy = y + dir[i][1];</span><br><span class=\"line\">                </span><br><span class=\"line\">                if(judge(xx, yy))&#123;</span><br><span class=\"line\">                    vis[xx][yy] = true;</span><br><span class=\"line\">                    if(boardHasWord(board, xx, yy, root-&gt;childNode[k], ans)) return true;</span><br><span class=\"line\">                    vis[xx][yy] = false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int n,m;</span><br><span class=\"line\">    const int dir[4][2] = &#123; &#123;1,0&#125;,&#123;0,1&#125;,&#123;-1,0&#125;,&#123;0,-1&#125; &#125;;</span><br><span class=\"line\">    bool vis[1024][1024];</span><br><span class=\"line\">    Trie trie;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    freopen(INPUT,&quot;r&quot;,stdin);</span><br><span class=\"line\">    </span><br><span class=\"line\">    string buf;</span><br><span class=\"line\">    vector&lt;vector&lt;char&gt;&gt; board;</span><br><span class=\"line\">    while(cin&gt;&gt;buf)&#123;</span><br><span class=\"line\">        vector&lt;char&gt; chars;</span><br><span class=\"line\">        chars.assign(buf.begin(), buf.end());</span><br><span class=\"line\">        board.push_back(chars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Solution solve;</span><br><span class=\"line\">    vector&lt;string&gt; words(&#123;&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;&#125;);</span><br><span class=\"line\">    vector&lt;string&gt; ans = solve.findWords(board,words);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    for_each(ans.begin(), ans.end(), [](const string str)&#123;</span><br><span class=\"line\">        cout&lt;&lt;str&lt;&lt;endl;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*\tWrong Answer */</span><br><span class=\"line\">/*</span><br><span class=\"line\">[&quot;ab&quot;,&quot;aa&quot;]</span><br><span class=\"line\">[&quot;aba&quot;,&quot;baa&quot;,&quot;bab&quot;,&quot;aaab&quot;,&quot;aaa&quot;,&quot;aaaa&quot;,&quot;aaba&quot;]</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* Time Limit Exceeded */</span><br><span class=\"line\">/*</span><br><span class=\"line\"> </span><br><span class=\"line\"> [&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;aaaa&quot;,&quot;bcde&quot;,&quot;fghi&quot;,&quot;jklm&quot;,&quot;nopq&quot;,&quot;rstu&quot;,&quot;vwxy&quot;,&quot;zzzz&quot;]</span><br><span class=\"line\"> [&quot;aaaaaaaaaaaaaaaa&quot;,&quot;aaaaaaaaaaaaaaab&quot;,&quot;aaaaaaaaaaaaaaac&quot;,&quot;aaaaaaaaaaaaaaad&quot;]</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/778477/778477.github.io/63215efbb2bc92122d932f3e33a6423b79a4d49f/img/Word_Search_II.png\" alt=\"Accepted\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cip3cw76b0000y8a3v2bh7ong","tag_id":"cip3cw76f0002y8a332wq3jp1","_id":"cip3cw76m0007y8a3h4jyeza6"},{"post_id":"cip3cw76d0001y8a3u1qdwh4j","tag_id":"cip3cw76k0005y8a3jmbuf6uf","_id":"cip3cw76q000by8a3s5xj0g4a"},{"post_id":"cip3cw76o0009y8a35e6xj7ui","tag_id":"cip3cw76k0005y8a3jmbuf6uf","_id":"cip3cw76r000dy8a34xh522yh"},{"post_id":"cip3cw76g0003y8a3g3r6lo2q","tag_id":"cip3cw76f0002y8a332wq3jp1","_id":"cip3cw76s000fy8a3949fpjvm"},{"post_id":"cip3cw76u000hy8a35543b43s","tag_id":"cip3cw76f0002y8a332wq3jp1","_id":"cip3cw76w000jy8a34f6ugvr2"},{"post_id":"cip3cw76x000ky8a3wbec78xk","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw778000qy8a3zju02wwf"},{"post_id":"cip3cw76j0004y8a3cicqdqfm","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw7ew000ty8a3tat3n2d3"},{"post_id":"cip3cw76k0006y8a3nn0pgfr2","tag_id":"cip3cw76f0002y8a332wq3jp1","_id":"cip3cw7ew000uy8a32gg2htd8"},{"post_id":"cip3cw76q000cy8a3fnghlvdl","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw7f0000vy8a3kvfuzqh5"},{"post_id":"cip3cw76m0008y8a3jk4em9jh","tag_id":"cip3cw76f0002y8a332wq3jp1","_id":"cip3cw7f1000wy8a3jxhnr741"},{"post_id":"cip3cw76s000ey8a3q6fy7txp","tag_id":"cip3cw76f0002y8a332wq3jp1","_id":"cip3cw7fc000xy8a3f2xvilo1"},{"post_id":"cip3cw76v000iy8a36ogs7x37","tag_id":"cip3cw76f0002y8a332wq3jp1","_id":"cip3cw7lb000yy8a3q7im35en"},{"post_id":"cip3cw76t000gy8a3d3qmt7ra","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw7ld000zy8a3pqyst5ms"},{"post_id":"cip3cw770000ly8a34kn3e8zr","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw7nr0010y8a3iywlsw1l"},{"post_id":"cip3cw771000ny8a3ph3yxtj7","tag_id":"cip3cw7s20011y8a3vvv0yn3t","_id":"cip3cw7s30013y8a34jgx71q7"},{"post_id":"cip3cw774000oy8a3j8qykjqf","tag_id":"cip3cw7s20011y8a3vvv0yn3t","_id":"cip3cw7s30014y8a3rt8f6b4x"},{"post_id":"cip3cw776000py8a34uupggnr","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw7w20015y8a3ey4aepkx"},{"post_id":"cip3cw778000ry8a3hiv4hvrb","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw80e0016y8a3efx79rdd"},{"post_id":"cip3cw77b000sy8a3zf8x9jan","tag_id":"cip3cw771000my8a3jjw5l49a","_id":"cip3cw8490017y8a3gupnptmu"}],"Tag":[{"name":"iOS","_id":"cip3cw76f0002y8a332wq3jp1"},{"name":"ACM","_id":"cip3cw76k0005y8a3jmbuf6uf"},{"name":"LeetCode","_id":"cip3cw771000my8a3jjw5l49a"},{"name":"Cocoa","_id":"cip3cw7s20011y8a3vvv0yn3t"}]}}